<<<<<<< HEAD
<<<<<<< HEAD
{"version":3,"sources":["billing.js","estimate.js","location.js","payment.js","cart-drawer.js","header.js","payment-overlay.js","product-layout-favorite.js","category.js","wishlist.js","utility.js","checkout-init.js","checkout-logic.js","checkout-validation.js","cart-drawer-logic.js","cart-drawer-init.js","wishlist-logic.js","init.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvrxhzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxtjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"boukem2.js","sourcesContent":["/**\r\n * Object responsible for handling billing information.\r\n *\r\n * @type {{autoFillBillingAddress: Function, setDifferentBillingAddress: Function, clearBillingAddress: Function, init: Function}}\r\n */\r\nvar billingContainer = {\r\n\r\n    /**\r\n     * Fill the billing address with the shipping address.\r\n     * First parameter is an array of all fields that only need basic validation (empty or not)\r\n     * Second parameter is an input that requires more advanced verification (postcode)\r\n     *\r\n     *\r\n     * @param fields\r\n     * @param fieldWithRules\r\n     */\r\n    autoFillBillingAddress : function(fields, fieldWithRules) {\r\n        if($(\".billing-checkbox\").is(\":checked\"))\r\n        {\r\n            //We assume here that fieldWithRules is the shipping postcode.\r\n            $(\"#billing\" + fieldWithRules[0].id.substring(\"shipping\".length, fieldWithRules[0].id.length)).val(fieldWithRules[0].value);\r\n\r\n            for(var i= 0, length = fields.length; i<length; i++) {\r\n                //check if the id has the string \"shipping\".\r\n                //if it does, delete the shipping prefix and replace it by billing.\r\n                //Create a new jquery selector and fill it with the value of the shipping one.\r\n                if (fields[i][0].id.indexOf(\"shipping\") > -1) {\r\n                    var genericInput = fields[i][0].id.substring(\"shipping\".length, fields[i][0].id.length);\r\n                    $(\"#billing\" + genericInput).val(fields[i][0].value);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Get user's billing address. By default shipping address = billing address.\r\n     * Set the width of select list at the same time.\r\n     *\r\n     */\r\n    setDifferentBillingAddress : function (self) {\r\n        $(\".billing-checkbox\").on(\"change\", function() {\r\n            $(\".form-billing .chosen-container\").width($(\"#customer_email\").outerWidth()-20);\r\n\r\n            if (!this.checked) {\r\n                $(\".form-billing\").hide().removeClass(\"hidden\").fadeIn();\r\n                self.clearBillingAddress();\r\n            }\r\n            else {\r\n                $(\".form-billing\").fadeOut(function() {\r\n                    $(this).addClass(\"hidden\");\r\n                });\r\n            }\r\n        })\r\n    },\r\n\r\n    /**\r\n     * Clear the billing form.\r\n     *\r\n     */\r\n    clearBillingAddress : function() {\r\n        if ($(\".form-billing input\").val() != \"\") {\r\n            $(\".form-billing input\").val() == \"\";\r\n        }\r\n    },\r\n\r\n    init: function() {\r\n        var self = billingContainer;\r\n\r\n        self.setDifferentBillingAddress(self);\r\n    }\r\n}","/**\r\n * Object responsible for handling the estimation of user's purchase.\r\n *\r\n * @type {{ajaxCall: Function, getShipmentTaxes: Function, displayEstimatePanel: Function, fetchEstimate: Function, init: Function}}\r\n */\r\nvar estimateContainer = {\r\n\r\n    /**\r\n     * Ajax call to /api/estimate after all verifications have passed.\r\n     *\r\n     */\r\n    ajaxCall : function() {\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: ApiEndpoints.estimate,\r\n            data: {\r\n                email: $(\"#customer_email\").val(),\r\n                shipping: {},\r\n                products: UtilityContainer.getProductsFromLocalStorage(),\r\n                shipping_address: UtilityContainer.getShippingFromForm()\r\n            },\r\n            success: function(data) {\r\n                console.log(data);\r\n                estimateContainer.init(data);\r\n            },\r\n            error: function(e, status) {\r\n                if (e.status == 403){\r\n                    // TODO: replace with an actual link\r\n                    window.location.replace(\"/auth/login\");\r\n                    return;\r\n                }\r\n                $('#estimate').html('<div class=\"alert alert-danger\">Une erreur est survenue. Veuillez vérifier les informations fournies.</div>');\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Get the relevant taxes according to the chosen shipping method.\r\n     *\r\n     * @param serviceCode\r\n     * @param data\r\n     * @returns {string}\r\n     */\r\n    getShipmentTaxes : function(serviceCode, data) {\r\n        var taxes = 0;\r\n\r\n        for(var i=0; i<data.shipping.services.length; i++)\r\n        {\r\n            if(data.shipping.services[i].method == serviceCode)\r\n            {\r\n                if (data.shipping.services[i].taxes.length != 0)\r\n                {\r\n                    for(var j=0; j<data.shipping.services[i].taxes.length; j++)\r\n                    {\r\n                        taxes += data.shipping.services[i].taxes[j].amount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return taxes.toFixed(2);\r\n    },\r\n\r\n    /**\r\n     * Display the estimate panel\r\n     *\r\n     */\r\n    displayEstimatePanel : function() {\r\n        $(\"#estimate\").removeClass(\"hidden fadeOutUp\").addClass(\"animated fadeInDown\");\r\n    },\r\n\r\n    /**\r\n     * Utility function to scroll the body to the estimate table\r\n     *\r\n     */\r\n    scrollTopToEstimate : function() {\r\n        $('html, body').animate({\r\n            scrollTop: $(\"#estimate\").offset().top\r\n        }, 1000);\r\n    },\r\n\r\n    /**\r\n     * Populate the shipping methods table with the data received after the api call.\r\n     *\r\n     * @param data\r\n     */\r\n    fetchEstimate : function(data, self) {\r\n        $(\".has-error\").removeClass(\"has-error\");\r\n\r\n        var email_value = $(\"#customer_email\").val();\r\n        var postcode_value = $(\"#shippingPostcode\").val();\r\n        var country_value = $(\".country\").val();\r\n\r\n        for(var i = 0, shippingLength = data.shipping.services.length; i<shippingLength; i++)\r\n        {\r\n            var serviceDOM = \"<tr data-service='\" + data.shipping.services[i].method + \"'>\" +\r\n                \"<td>\" + data.shipping.services[i].name + \"</td>\" +\r\n                \"<td>\" + data.shipping.services[i].transit + \"</td>\" +\r\n                \"<td>\" + data.shipping.services[i].delivery + \"</td>\" +\r\n                \"<td>\" + data.shipping.services[i].price + \"</td>\" +\r\n                \"<td>\" +\r\n                \"<input \" +\r\n                \"type='radio' \" +\r\n                \"name='shipping' \" +\r\n                \"class='shipping_method' \" +\r\n                \"data-taxes='\" + self.getShipmentTaxes(data.shipping.services[i].method, data) + \"' \" +\r\n                \"data-cost='\" + data.shipping.services[i].price + \"' \" +\r\n                \"data-value='\" + data.shipping.services[i].method + \"' \" +\r\n                \"value='\" + btoa(JSON.stringify(data.shipping.services[i])) + \"' >\" +\r\n                \"</td>\";\r\n\r\n            $(\"#estimate .table-striped\").append(serviceDOM);\r\n        }\r\n\r\n        $(\"#estimateButton\").removeClass(\"btn-three\").addClass(\"btn-one\").text(Localization.continue);\r\n        self.selectDefaultShipmentMethod();\r\n\r\n        self.scrollTopToEstimate();\r\n\r\n        paymentContainer.init(data);\r\n    },\r\n\r\n    /**\r\n     * Select the default shipment method from a predefined list.\r\n     *\r\n     */\r\n    selectDefaultShipmentMethod : function() {\r\n        var defaultShipment = [\"DOM.EP\", \"USA.TP\", \"INT.TP\"],\r\n            availableShipment = $(\"input[name=shipping]\");\r\n\r\n        for(var i= 0, length = availableShipment.length; i<length; i++)\r\n        {\r\n            if (defaultShipment.indexOf(availableShipment[i].dataset.value) != -1)\r\n            {\r\n                availableShipment[i].checked = true;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Registers functions to be called outside of this object.\r\n     *\r\n     * @param data\r\n     */\r\n    init : function(data) {\r\n        var self = estimateContainer;\r\n\r\n        if (UtilityContainer.getProductsFromLocalStorage().length == 0)\r\n        {\r\n            location.reload();\r\n        }\r\n        else\r\n        {\r\n            self.displayEstimatePanel();\r\n            self.fetchEstimate(data, self);\r\n        }\r\n    }\r\n\r\n}","/**\r\n * Object responsible for building the select list populating countries, provinces and states on checkout page.\r\n *\r\n * @type {{populateCountry: Function, populateProvincesAndStates: Function, updateChosenSelects: Function, callUpdateChosenSelects: Function, init: Function}}\r\n */\r\nvar locationContainer = {\r\n\r\n    /**\r\n     * Function to populate country list\r\n     * Activates the chosen plugin on the country select list.\r\n     *\r\n     */\r\n    populateCountry : function (lang) {\r\n        var file = \"/js/data/country-list.\" + lang + \".json\",\r\n            listItems = '',\r\n            $country = $(\".country\");\r\n\r\n        $.getJSON(file, function(data) {\r\n            $.each(data, function(key, val) {\r\n                if (key == \"CA\") {\r\n                    listItems += \"<option value='\" + key + \"' selected>\" + val + \"</option>\";\r\n                }\r\n                else {\r\n                    listItems += \"<option value='\" + key + \"'>\" + val + \"</option>\";\r\n                }\r\n            });\r\n            $country.append(listItems);\r\n        }).done(function() {\r\n            $(\".country\").chosen();\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Function to populate provinces and states\r\n     * Activates the chosen plugin on the province select list.\r\n     *\r\n     * @param country\r\n     * @param callback\r\n     */\r\n    populateProvincesAndStates : function (country, callback) {\r\n        $.getJSON(\"/js/data/world-states.json\", function(data) {\r\n            for(var i= 0, length = country.length; i<length; i++) {\r\n                var listItems = '',\r\n                    $province = $(\".province\").find(\"[data-country='\" + country[i] +\"']\");\r\n\r\n                $.each(data, function(key)\r\n                {\r\n                    if (data[key].country === country[i] && data[key].short == \"QC\" ){\r\n                        listItems += \"<option value='\" + data[key].short + \"' selected>\" + data[key].name + \"</option>\";\r\n                    }\r\n                    else if (data[key].country === country[i]){\r\n                        listItems += \"<option value='\" + data[key].short + \"'>\" + data[key].name + \"</option>\";\r\n                    }\r\n                });\r\n                $province.append(listItems);\r\n            }\r\n            callback();\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Event function enabling or disabling postcode and province fields according to the chosen country and the provided input (shipping or billing)\r\n     *\r\n     * @param chosenCountry\r\n     * @param input\r\n     */\r\n    updateChosenSelects: function(chosenCountry, input) {\r\n        if (chosenCountry == 'CA' || chosenCountry == 'US' || chosenCountry == \"MX\"){\r\n            $(input).removeAttr('disabled').trigger(\"chosen:updated\");\r\n        } else {\r\n            $(input).attr('disabled','disabled');\r\n        }\r\n\r\n        $(input + ' optgroup').attr('disabled','disabled');\r\n\r\n        if (chosenCountry == 'CA' || chosenCountry == 'US' || chosenCountry == 'MX'){\r\n            $(input + ' [data-country=\"' + chosenCountry + '\"]').removeAttr('disabled');\r\n\r\n        }\r\n\r\n        $(input).trigger('chosen:updated');\r\n    },\r\n\r\n    /**\r\n     * Triggers updateChosenSelects($country, $input)\r\n     * This function will be registered in init().\r\n     *\r\n     */\r\n    callUpdateChosenSelects: function(self) {\r\n        $(\"#billingCountry\").on(\"change\", function() {\r\n            self.updateChosenSelects($(this).val(), \"#billingProvince\");\r\n        });\r\n\r\n        $(\"#shippingCountry\").on(\"change\", function() {\r\n            self.updateChosenSelects($(this).val(), \"#shippingProvince\");\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Registering functions to be called outside of this object.\r\n     *\r\n     */\r\n    init : function() {\r\n        var self = locationContainer;\r\n\r\n        self.populateCountry($(\"html\").attr(\"lang\"));\r\n        self.populateProvincesAndStates([\"CA\", \"US\", \"MX\"], function() {\r\n            $(\".province\").chosen();\r\n        });\r\n        self.callUpdateChosenSelects(self);\r\n\r\n    }\r\n}","/**\r\n * Object responsible for handling the payment panel.\r\n *\r\n * @type {{displayPaymentPanel: Function, initPaymentPanel: Function, updatePaymentPanel: Function, getTaxes: Function, init: Function}}\r\n */\r\nvar paymentContainer = {\r\n    /**\r\n     * Displays the Payment panel.\r\n     *\r\n     */\r\n    displayPaymentPanel : function() {\r\n        $(\"#payment\").removeClass(\"hidden fadeOutUp\").addClass(\"animated fadeInDown\");\r\n        $(\"#checkoutButton\").addClass(\"animated rubberBand\");\r\n    },\r\n\r\n    /**\r\n     * Populate the payment panel with default values.\r\n     *\r\n     * @param data\r\n     */\r\n    initPaymentPanel : function(data) {\r\n        var subtotal = parseFloat(UtilityContainer.getProductsPriceFromLocalStorage()).toFixed(2),\r\n            priceTransport = $(\"input:radio.shipping_method:checked\").data(\"cost\"),\r\n            taxes = paymentContainer.getTaxes(data) + parseFloat($(\"input:radio.shipping_method:checked\").data(\"taxes\")),\r\n            total = parseFloat(subtotal) + parseFloat(priceTransport) + parseFloat(taxes);\r\n\r\n        $(\"#price_subtotal\").text(subtotal);\r\n        $(\"#price_transport\").text(priceTransport);\r\n        $(\"#price_taxes\").text(taxes.toFixed(2));\r\n        $(\"#price_total\").text(total.toFixed(2));\r\n    },\r\n\r\n    /**\r\n     * Update the payment panel with right values (shipping method)\r\n     *\r\n     * @param data\r\n     */\r\n    updatePaymentPanel : function(data) {\r\n        var subtotal = parseFloat(UtilityContainer.getProductsPriceFromLocalStorage()).toFixed(2),\r\n            priceTransport, taxes;\r\n\r\n        $(\".shipping_method\").on(\"change\", function() {\r\n            priceTransport = $(this).data(\"cost\");\r\n            taxes = paymentContainer.getTaxes(data) + parseFloat($(this).data(\"taxes\"));\r\n            total = parseFloat(subtotal) + parseFloat(priceTransport) + parseFloat(taxes);\r\n\r\n            $(\"#price_subtotal\").text(subtotal);\r\n            $(\"#price_transport\").text(priceTransport);\r\n            $(\"#price_taxes\").text(taxes.toFixed(2));\r\n            $(\"#price_total\").text(total.toFixed(2));\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Get the total taxes (TPS/TVQ or TVH or TPS or null) + shipping method taxes.\r\n     *\r\n     * @param data\r\n     * @returns {number}\r\n     */\r\n    getTaxes : function(data) {\r\n        var taxes = 0,\r\n            dataTaxesLength = data.taxes.length;\r\n\r\n        if (dataTaxesLength != 0)\r\n        {\r\n            for(var i=0; i<dataTaxesLength; i++)\r\n            {\r\n                taxes += data.taxes[i].amount;\r\n            }\r\n        }\r\n        return taxes;\r\n    },\r\n\r\n    /**\r\n     * Register methods for outside calling.\r\n     *\r\n     * @param data\r\n     */\r\n    init : function(data) {\r\n        paymentContainer.displayPaymentPanel();\r\n        paymentContainer.initPaymentPanel(data);\r\n        paymentContainer.updatePaymentPanel(data);\r\n\r\n        checkoutLogicContainer.init();\r\n    }\r\n}","/**\r\n * Object responsible for displaying the cart drawer.\r\n * Logic handled in dev/actions/layout/cart-drawer-logic.js\r\n *\r\n * @type {{$el: {$back: (*|jQuery|HTMLElement), $proceed: (*|jQuery|HTMLElement), $trigger: (*|jQuery|HTMLElement), $container: (*|jQuery|HTMLElement), $checkout: (*|jQuery|HTMLElement), $body: (*|jQuery|HTMLElement)}, displayOn: Function, displayOff: Function, animateIn: Function, animateOut: Function, setCartItemsHeight: Function, computeCartItemsHeight: Function, init: Function}}\r\n */\r\nvar cartDisplayContainer = {\r\n    $el : {\r\n        $back : $(\"#back\"),\r\n        $proceed : $(\"#proceed\"),\r\n        $trigger : $(\".view-cart\"),\r\n        $container : $(\"#cart-container\"),\r\n        $checkout : $(\"#checkout\"),\r\n        $body : $(\"body\")\r\n    },\r\n\r\n    displayOn: function() {\r\n        var _width = cartDisplayContainer.$el.$container.width();\r\n        cartDisplayContainer.$el.$container.css( {\r\n            \"margin-right\" : -_width\r\n        });\r\n\r\n        cartDisplayContainer.$el.$trigger.click(function() {\r\n            cartDisplayContainer.animateIn();\r\n        });\r\n    },\r\n\r\n    displayOff : function() {\r\n        cartDisplayContainer.$el.$back.click(function() {\r\n            cartDisplayContainer.animateOut();\r\n        });\r\n        cartDisplayContainer.$el.$checkout.click(function() {\r\n            sessionStorage.isDisplayed = false;\r\n        });\r\n    },\r\n\r\n    animateIn : function() {\r\n        cartDisplayContainer.$el.$container.show();\r\n        cartDisplayContainer.$el.$container.animate( {\r\n            \"margin-right\" : 0\r\n        }, 400);\r\n        sessionStorage.isDisplayed = true;\r\n    },\r\n\r\n    animateOut: function() {\r\n        var _width = cartDisplayContainer.$el.$container.width();\r\n        cartDisplayContainer.$el.$container.animate( {\r\n            \"margin-right\" : -_width\r\n        }, 400, function() {\r\n            $(this).hide();\r\n        });\r\n        sessionStorage.isDisplayed = false;\r\n    },\r\n\r\n    setCartItemsHeight : function() {\r\n        cartDisplayContainer.computeCartItemsHeight();\r\n\r\n        $(window).on(\"resize\", function() {\r\n            cartDisplayContainer.computeCartItemsHeight();\r\n        });\r\n\r\n        cartDisplayContainer.$el.$trigger.on(\"click\", function() {\r\n            cartDisplayContainer.computeCartItemsHeight();\r\n        })\r\n    },\r\n\r\n    computeCartItemsHeight : function() {\r\n        var cartItemsHeight = $(\"#cart-container\").height() - ($(\".cart-header\").height() + $(\".cart-footer\").height());\r\n\r\n        $(\"#cart-items\").css(\"height\", cartItemsHeight);\r\n    },\r\n\r\n    init : function() {\r\n        cartDisplayContainer.displayOn();\r\n        cartDisplayContainer.displayOff();\r\n        UtilityContainer.populateCountry($(\"html\").attr(\"lang\"));\r\n\r\n        if (sessionStorage.isDisplayed == \"true\")\r\n        {\r\n            cartDisplayContainer.$el.$container.css(\"margin-right\", 0);\r\n            cartDisplayContainer.$el.$container.show();\r\n        }\r\n\r\n    }\r\n};","/**\r\n * Object responsible for displaying the navigation header.\r\n *\r\n * @type {{md: {removeCartDescription: Function}, sm: {btnTransform_sm: Function}, init: Function}}\r\n */\r\nvar headerContainer = {\r\n    /**\r\n     * Desktop size\r\n     *\r\n     */\r\n    md: {\r\n        removeCartDescription : function() {\r\n            if ($(window).width() <= 1195) {\r\n                $(\"#nav-right #cart-description\").text(\"\");\r\n                $(\"#nav-right\").css(\"padding-bottom\", \"18px\");\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Tablet size\r\n     *\r\n     */\r\n    sm : {\r\n        btnTransform_sm : function() {\r\n            if ($(window).width() <= 934 && ($(window).width() >= 769)) {\r\n                $(\".row:first .btn\").addClass(\"btn-sm\");\r\n                $(\"#searchBar\").addClass(\"input-sm\");\r\n                $(\"#view-cart-wrapper\").addClass(\"btn-xs btn-xs-btn-sm-height\");\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Changes text from dropdown button within the parent node passed in the argument\r\n     *\r\n     * @param $elem\r\n     */\r\n    changeTextFromDropdown : function($elem) {\r\n        $($elem + \" .dropdown-menu li a\").click(function(){\r\n\r\n            $($elem + \" .btn:first-child\").html($(this).text() + '<span class=\\\"caret\\\"></span>');\r\n            $($elem + \" .btn:first-child\").val($(this).text());\r\n\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Object responsible for handling all semantic ui modules (to be refactored eventually into its own object).\r\n     *\r\n     */\r\n    semanticUI: {\r\n\r\n        /**\r\n         * Initialize dropdown module.\r\n         *\r\n         */\r\n        initDropdownModule : function() {\r\n            //Enable selection on clicked items\r\n            $(\".ui.dropdown-select\").dropdown();\r\n\r\n            //Prevent selection on clicked items\r\n            $(\".ui.dropdown-no-select\").dropdown({\r\n                    action: \"select\"\r\n                }\r\n            );\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Register functions in event handler (onload, onresize) to be called outside of this object.\r\n     *\r\n     */\r\n    init: function () {\r\n        var self = headerContainer;\r\n\r\n        $(window).on(\"load resize\", function() {\r\n            self.md.removeCartDescription();\r\n            self.sm.btnTransform_sm();\r\n        });\r\n\r\n        self.changeTextFromDropdown(\".search-filter\");\r\n\r\n        //Initialize Semantic UI component\r\n        self.semanticUI.initDropdownModule();\r\n    }\r\n}\r\n","/**\r\n * Object responsible for handling the payment overlay behaviour.\r\n *\r\n * @type {{cancelOrder: Function, init: Function}}\r\n */\r\nvar paymentOverlayContainer = {\r\n\r\n    /**\r\n     * Cancels an order.\r\n     * If the user clicks the cancel button, remove the cookie, flush the card, fadeOut the jumbotron then redirect to homepage.\r\n     *\r\n     */\r\n    cancelOrder : function() {\r\n        $(\"body\").on(\"click\", \"#cancelOrder\", function() {\r\n            Cookies.remove(\"_unpaid_orders\");\r\n\r\n            $(\"#cancelledOrder .jumbotron\").fadeOut();\r\n\r\n            window.location.replace(\"/\");\r\n\r\n            UtilityContainer.removeAllProductsFromLocalStorage();\r\n\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Checks whether the user has any unpaid orders, and displays a message if that's the case.\r\n     *\r\n     */\r\n    checkPendingOrders : function() {\r\n\r\n        if (Cookies.get('_unpaid_orders')) {\r\n\r\n            // Retrieve order details.\r\n            var order = JSON.parse(Cookies.get('_unpaid_orders'));\r\n\r\n            // Check whether current order has been paid.\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: ApiEndpoints.orders.view.replace(':id', order.id).replace(':verification', order.verification),\r\n                success: function(data) {\r\n                    if (data.status == 'pending')\r\n                        paymentOverlayContainer.showPaymentNotice();\r\n                    else\r\n                        Cookies.remove('_unpaid_orders');\r\n                }\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Shows payment notice.\r\n     *\r\n     */\r\n    showPaymentNotice : function() {\r\n\r\n        // Retrieve order details.\r\n        var order = JSON.parse(Cookies.get('_unpaid_orders'));\r\n\r\n        // Display notice.\r\n        $('body').prepend(\r\n            '<div class=\"container overlay fullScreen\" id=\"cancelledOrder\">'+\r\n            '<div class=\"jumbotron vertical-align color-one\">'+\r\n            '<div class=\"text-center\">'+\r\n            '<h2>'+\r\n            Localization.pending_order.replace(':command', order.id) +\r\n            '</h2>'+\r\n            '<h4>'+ Localization.what_to_do +'</h4>'+\r\n            '<br />'+\r\n            '<ul class=\"list-inline\">' +\r\n            '<li>' +\r\n            '<a href=\"'+\r\n            ApiEndpoints.orders.pay.replace(':id', order.id)\r\n                .replace(':verification', order.verification) +'\">'+\r\n            '<button class=\"btn btn-success\" id=\"payOrder\">'+ Localization.pay_now +'</button>'+\r\n            '</a>'+\r\n            '</li>' +\r\n            '<li>' +\r\n            '<button class=\"btn btn-danger\" id=\"cancelOrder\">'+\r\n            Localization.cancel_order +\r\n            '</button>'+\r\n            '</li>'+\r\n            '</ul>'+\r\n            '</div>'+\r\n            '</div>'+\r\n            '</div>'\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Register functions to be called outside paymentOverlayContainer.\r\n     *\r\n     */\r\n    init : function() {\r\n        var self = paymentOverlayContainer;\r\n\r\n        self.cancelOrder();\r\n        self.checkPendingOrders();\r\n    }\r\n}\r\n","/**\r\n * Object responsible for adding products to a user's wishlist.\r\n *\r\n * @type {{fadeInFavoriteIcon: Function, setWishlistBadgeQuantity: Function, createWishlistElement: Function, renderWishlist: Function, localizeWishlistButton: Function, removeWishlistElement: Function, init: Function}}\r\n */\r\nvar productLayoutFavoriteContainer = {\r\n    /**\r\n     * Fade in the favorite icon (heart icon) when hovering on a product tile.\r\n     *\r\n     */\r\n    fadeInFavoriteIcon: function() {\r\n        $(\".dense_product\").hover(function() {\r\n            $(this).children(\".favorite-wrapper\").fadeIn();\r\n        }, function () {\r\n            $(this).children(\".favorite-wrapper\").hide();\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Update the value of .wishlist_badge when adding or deleting elements.\r\n     *\r\n     */\r\n    setWishlistBadgeQuantity : function() {\r\n        var total = UtilityContainer.getNumberOfProductsInWishlist();\r\n\r\n        $(\".wishlist_badge\").text(total);\r\n    },\r\n\r\n    /**\r\n     * Add the clicked product to the wish list.\r\n     *\r\n     */\r\n    addToFavorite: function() {\r\n        var self = productLayoutFavoriteContainer,\r\n            item;\r\n\r\n        $(\".favorite-wrapper\").on(\"click\", function() {\r\n            //No favorited class.\r\n            if (!$(this).hasClass(\"favorited\")) {\r\n                item = UtilityContainer.buyButton_to_Json($(this).parent().find(\".buybutton\"));\r\n                localStorage.setItem(\"_wish_product \" + item.product, JSON.stringify(item));\r\n\r\n                $(this).addClass(\"favorited\");\r\n\r\n                self.setWishlistBadgeQuantity();\r\n            }\r\n            else\r\n            //Has a favorited class. We remove it, then delete the element from local Storage.\r\n            {\r\n                self.removeFromFavorite($(this), self);\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Persist the heart icon next to products already marked as wished.\r\n     *\r\n     */\r\n    persistFavorite: function() {\r\n        for(var i = 0, length = localStorage.length; i<length; i++)\r\n        {\r\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0) {\r\n                for(var j = 0; j<$(\".favorite-wrapper\").length; j++)\r\n                {\r\n                    if(JSON.parse(localStorage.getItem(localStorage.key(i))).product === parseInt($(\".favorite-wrapper\")[j].dataset.product))\r\n                    {\r\n                        $(\".favorite-wrapper\")[j].className += \" favorited\";\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Delete the clicked element from the wish list.\r\n     *\r\n     * @param context\r\n     */\r\n    removeFromFavorite: function (element, context) {\r\n        element.removeClass(\"favorited\");\r\n        localStorage.removeItem(\"_wish_product \" + element.data(\"product\"));\r\n        context.setWishlistBadgeQuantity();\r\n    },\r\n\r\n    init: function () {\r\n        var self = productLayoutFavoriteContainer;\r\n\r\n\r\n        self.addToFavorite();\r\n        self.persistFavorite();\r\n        self.fadeInFavoriteIcon();\r\n        self.setWishlistBadgeQuantity();\r\n    }\r\n}","/**\r\n * Object responsible for the view component of each category page.\r\n *\r\n * @type {{blurBackground: Function, init: Function}}\r\n */\r\nvar categoryContainer = {\r\n\r\n    /**\r\n     * Contains the updated URL parameters,\r\n     *\r\n     */\r\n    searchParameters: {\r\n        page: 1,\r\n        per_page: 8,\r\n        order: 'relevance',\r\n        min_price: null,\r\n        max_price: null,\r\n        brands: '',\r\n        categories: ''\r\n    },\r\n\r\n    /**\r\n     * Blurs the background of each category's page header.\r\n     *\r\n     */\r\n    blurBackground: function () {\r\n        $(\".category-header\").blurjs({\r\n            source: \".category-header\"\r\n        });\r\n    },\r\n\r\n\r\n    // SORTING FEATURE\r\n    /**\r\n     * TODO: REFACTOR ALL LOGIC INTO ITS OWN CONTAINER\r\n     *\r\n     */\r\n    itemsPerPage: function () {\r\n        $(\".items-per-page .item\").on(\"click\", function() {\r\n            categoryContainer.URL_add_parameter(\"per_page\", $(this).data(\"sort\"));\r\n        });\r\n\r\n        // Set the selected option.\r\n        $('#items-per-page-box').dropdown('set selected', this.searchParameters.per_page);\r\n    },\r\n\r\n    sortBy: function () {\r\n        $(\".sort-by .item\").on(\"click\", function() {\r\n            categoryContainer.URL_add_parameter(\"order\", $(this).data(\"sort\"));\r\n        });\r\n\r\n        // Set the selected option.\r\n        $('#sort-by-box').dropdown('set selected', this.searchParameters.order);\r\n    },\r\n\r\n\r\n    // FILTERING FEATURE.\r\n    priceUpdate: function() {\r\n        $(\"#price-update\").on(\"click\", function() {\r\n            categoryContainer.URL_add_parameter(\"min_price\", $(\"#min-price\").val());\r\n            categoryContainer.URL_add_parameter(\"max_price\", $(\"#max-price\").val());\r\n        });\r\n\r\n        // Set the specified price range.\r\n        if (this.searchParameters.min_price) {\r\n            $('#min-price').val(this.searchParameters.min_price);\r\n        }\r\n        if (this.searchParameters.max_price) {\r\n            $('#max-price').val(this.searchParameters.max_price);\r\n        }\r\n    },\r\n\r\n    categoriesUpdate: function() {\r\n\r\n    },\r\n\r\n    brandsUpdate: function() {\r\n\r\n    },\r\n\r\n\r\n    // HELPER FUNCTION : TO BE MOVED IN UTILITYCONTAINER\r\n    // Courtesy of http://stackoverflow.com/a/1917916\r\n    URL_add_parameter: function(key, value){\r\n        key = escape(key); value = escape(value);\r\n\r\n        var kvp = document.location.search.substr(1).split('&');\r\n        if (kvp == '') {\r\n            document.location.search = '?' + key + '=' + value;\r\n        }\r\n        else {\r\n\r\n            var i = kvp.length; var x; while (i--) {\r\n                x = kvp[i].split('=');\r\n\r\n                if (x[0] == key) {\r\n                    x[1] = value;\r\n                    kvp[i] = x.join('=');\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (i < 0) { kvp[kvp.length] = [key, value].join('='); }\r\n\r\n            //this will reload the page, it's likely better to store this until finished\r\n            document.location.search = kvp.join('&');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Retrieves the query parameters from the URL and stores them locally.\r\n     * Inspired by http://stackoverflow.com/a/1917916\r\n     *\r\n     */\r\n    retrieveSearchParameters: function() {\r\n\r\n        // Performance check.\r\n        var query = document.location.search.substr(1);\r\n        if (query.length < 1) {\r\n            return;\r\n        }\r\n\r\n        // Loop through query elements.\r\n        var kvp = query.split('&'), index, pair, key, value;\r\n        for (index in kvp)\r\n        {\r\n            // Skip parameters without any values.\r\n            if (kvp[index].indexOf('=') < 1) {\r\n                continue;\r\n            }\r\n\r\n            pair = kvp[index].split('=');\r\n            key = pair[0];\r\n            value = pair[1];\r\n\r\n            // Save the search parameter if it's valid.\r\n            if (typeof this.searchParameters[key] != 'undefined') {\r\n                this.searchParameters[key] = value;\r\n                //this.searchParameters[key] = ['brands', 'categories'].includes(key) ?\r\n                //    value.split(';') :\r\n                //    value;\r\n            }\r\n        }\r\n    },\r\n\r\n    init: function () {\r\n        var self = categoryContainer;\r\n\r\n        self.retrieveSearchParameters();\r\n        self.blurBackground();\r\n        self.itemsPerPage();\r\n        self.sortBy();\r\n        self.priceUpdate();\r\n        self.categoriesUpdate();\r\n        self.brandsUpdate();\r\n    }\r\n\r\n};\r\n","/**\r\n * Object responsible for the view component of the wish list page.\r\n * Logic handled in dev/actions/site/wishlist-logic.js\r\n *\r\n * @type {{setNumberOfProductsInHeader: Function, init: Function}}\r\n */\r\nvar wishlistContainer = {\r\n\r\n    /**\r\n     * Sets the number of products in the header (singular / plural).\r\n     *\r\n     */\r\n    setNumberOfProductsInHeader: function() {\r\n        var quantity = \"\";\r\n        UtilityContainer.getNumberOfProductsInWishlist() == 0 || UtilityContainer.getNumberOfProductsInWishlist() == 1 ? quantity+= (UtilityContainer.getNumberOfProductsInWishlist() + \"  item \") : quantity += (UtilityContainer.getNumberOfProductsInWishlist() + \"  items \");\r\n        $(\"#quantity-wishlist\").text(quantity);\r\n    },\r\n\r\n\r\n    init: function() {\r\n        var self = wishlistContainer;\r\n\r\n        self.setNumberOfProductsInHeader();\r\n    }\r\n}","/**\r\n * Utility object containing various utility functions...\r\n * Self Explanatory duh.\r\n *\r\n * @type {{getProductsFromLocalStorage: Function, getNumberOfProductsInWishlist: Function, getNumberOfProducts: Function, getProductsPriceFromLocalStorage: Function, removeAllProductsFromLocalStorage: Function, getShippingFromForm: Function, buyButton_to_Json: Function, populateCountry: Function, validateEmptyFields: Function, validateEmail: Function, validatePostCode: Function, validateEmptyCart: Function, addErrorClassToFields: Function, addErrorClassToFieldsWithRules: Function, addFadeOutUpClass: Function, removeErrorClassFromFields: Function, getCheapestShippingMethod: Function, getTaxes: Function, getShipmentTaxes: Function, getCartTaxes: Function, getCartTotal: Function}}\r\n */\r\nvar UtilityContainer = {\r\n    /**\r\n     * Utility function for getting all the products in localStorage.\r\n     * Returns an array containing their id, their quantity and their price.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    getProductsFromLocalStorage : function() {\r\n        var res = [];\r\n\r\n        for(var i = 0, length = localStorage.length; i<length; i++)\r\n        {\r\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\r\n            {\r\n                var product = JSON.parse(localStorage.getItem(localStorage.key(i))),\r\n                    productId = product.product,\r\n                    productQuantity = product.quantity,\r\n                    productPrice = product.price;\r\n\r\n                res.push({\r\n                    id: productId,\r\n                    quantity: productQuantity,\r\n                    price : productPrice\r\n                });\r\n            }\r\n        }\r\n\r\n        return res;\r\n    },\r\n\r\n    /**\r\n     * Utility function returning the number of products present in the wish list.\r\n     *\r\n     * @returns {number}\r\n     */\r\n    getNumberOfProductsInWishlist : function() {\r\n        var total = 0;\r\n\r\n        for(var i = 0, length = localStorage.length; i<length; i++)\r\n        {\r\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0)\r\n            {\r\n                total += JSON.parse(localStorage.getItem(localStorage.key(i))).quantity;\r\n            }\r\n        }\r\n\r\n        return total;\r\n    },\r\n\r\n    /**\r\n     * Utility function returning the number of products present in the cart.\r\n     *\r\n     * @returns {number}\r\n     */\r\n    getNumberOfProducts : function() {\r\n        var total = 0;\r\n\r\n        for(var i = 0, length = localStorage.length; i<length; i++)\r\n        {\r\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\r\n            {\r\n                total += JSON.parse(localStorage.getItem(localStorage.key(i))).quantity;\r\n            }\r\n        }\r\n\r\n        return total;\r\n    },\r\n\r\n    /**\r\n     * Utility function to get the total price from all products present in localStorage.\r\n     *\r\n     * @returns {number}\r\n     */\r\n    getProductsPriceFromLocalStorage : function() {\r\n        var total = 0,\r\n            products = UtilityContainer.getProductsFromLocalStorage();\r\n\r\n        for(var i= 0, length = products.length; i<length; i++)\r\n        {\r\n            total += (products[i].price * products[i].quantity);\r\n        }\r\n\r\n        return total;\r\n    },\r\n\r\n    /**\r\n     * Utility function to delete all products from localStorage.\r\n     *\r\n     */\r\n    removeAllProductsFromLocalStorage : function() {\r\n        for(var i= 0, length = localStorage.length; i<length; i++) {\r\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\r\n            {\r\n                localStorage.removeItem(localStorage.key(i));\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Utility function fo getting the country, the postal code and the province (if any) of the user.\r\n     *\r\n     * @returns {{country: (*|jQuery), postcode: (*|jQuery), province: (*|jQuery)}}\r\n     */\r\n    getShippingFromForm : function() {\r\n        return res = {\r\n            \"country\" : $(\"#shippingCountry\").val(),\r\n            \"postcode\" : $(\"#shippingPostcode\").val(),\r\n            \"province\" : $(\"#shippingProvince\").val(),\r\n            \"line1\" : $(\"#shippingAddress1\").val(),\r\n            \"line2\" : $(\"#shippingAddress2\").val(),\r\n            \"name\" : $(\"#shippingFirstname\").val() + \" \" + $(\"#shippingLastname\").val(),\r\n            \"city\" : $(\"#shippingCity\").val(),\r\n            \"phone\" : $(\"#shippingTel\").val()\r\n        };\r\n    },\r\n\r\n    /**\r\n     * parse the information from a buy button into a readable json format\r\n     *\r\n     * @param item\r\n     * @returns {{product: *, name: *, price: *, thumbnail: *, thumbnail_lg: *, quantity: number}}\r\n     */\r\n    buyButton_to_Json : function(item) {\r\n        return {\r\n            \"product\" : item.data(\"product\"),\r\n            \"name\" : item.data(\"name\"),\r\n            \"price\" : item.data(\"price\"),\r\n            \"thumbnail\" : item.data(\"thumbnail\"),\r\n            \"thumbnail_lg\" : item.data(\"thumbnail_lg\"),\r\n            \"quantity\" : parseInt(item.data(\"quantity\")),\r\n            \"link\" : item.data(\"link\")\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Utility object used to populate a select list (#country) with a list of country (json formatted) in the appropriate language.\r\n     *\r\n     */\r\n    populateCountry : function (lang) {\r\n        var file = \"/js/data/country-list.\" + lang + \".json\",\r\n            listItems = '',\r\n            $country = $(\"#country\");\r\n\r\n        $.getJSON(file, function(data) {\r\n            $.each(data, function(key, val) {\r\n                if (key == \"CA\") {\r\n                    listItems += \"<option value='\" + key + \"' selected>\" + val + \"</option>\";\r\n                }\r\n                else {\r\n                    listItems += \"<option value='\" + key + \"'>\" + val + \"</option>\";\r\n                }\r\n            });\r\n            $country.append(listItems);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Check if the fields passed in the argument are empty or not.\r\n     *\r\n     * @param emptyFields\r\n     * @returns {boolean}\r\n     */\r\n    validateEmptyFields: function(emptyFields) {\r\n        var passed = true;\r\n        for(var i= 0, length = emptyFields.length; i<length; i++) {\r\n            if (emptyFields[i].val() == \"\")\r\n            {\r\n                passed = false;\r\n                break;\r\n            }\r\n        }\r\n        return passed;\r\n    },\r\n\r\n    /**\r\n     * Validate the email address passed as the argument.\r\n     *\r\n     * @param email\r\n     * @returns {boolean}\r\n     */\r\n    validateEmail: function(email) {\r\n        var re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\r\n        return re.test(email);\r\n    },\r\n\r\n    /**\r\n     * Validate a CA or US postal code.\r\n     *\r\n     * @param postcode\r\n     * @param country\r\n     * @returns {boolean}\r\n     */\r\n    validatePostCode: function(postcode, country) {\r\n        if (country == \"CA\")\r\n            return postcode.match(/^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} ?\\d{1}[A-Z]{1}\\d{1}$/i) ? true : false;\r\n        else if (country == \"US\")\r\n            return postcode.match(/^\\d{5}(?:[-\\s]\\d{4})?$/) ? true : false;\r\n        else\r\n            return true;\r\n    },\r\n\r\n    /**\r\n     * Returns true if the cart is empty, false otherwise.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    validateEmptyCart : function () {\r\n        var empty;\r\n        UtilityContainer.getProductsPriceFromLocalStorage() === 0 ?  empty = true : empty = false;\r\n\r\n        return empty;\r\n    },\r\n\r\n    /**\r\n     * Add .has-error to parent class + animate the relevant fields.\r\n     *\r\n     * @param fields\r\n     */\r\n    addErrorClassToFields: function(fields) {\r\n        for(var i= 0, length = fields.length; i<length; i++)\r\n        {\r\n            if (fields[i].val() == \"\")\r\n            {\r\n                fields[i].parent().addClass(\"has-error\");\r\n                fields[i].addClass('animated shake').bind('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\r\n                    $(this).removeClass(\"animated\");\r\n                    $(this).removeClass(\"shake\");\r\n                    $(this).unbind();\r\n                });\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Same as addErrorClassToFields but accept a single input (ie. specific rules have to be applied: email / postal code / ...\r\n     *\r\n     * @param input\r\n     */\r\n    addErrorClassToFieldsWithRules: function(input) {\r\n        input.parent().addClass(\"has-error\");\r\n        input.addClass('animated shake').bind('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\r\n            $(this).removeClass(\"animated\");\r\n            $(this).removeClass(\"shake\");\r\n            $(this).unbind();\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Adds a fadeOutUp class then hide the element passed as an argument.\r\n     *\r\n     * @param $element\r\n     */\r\n    addFadeOutUpClass: function ($element) {\r\n        $element.addClass(\"animated fadeOutUp\").delay(1000).queue(function() {\r\n            $(this).addClass(\"hidden\").clearQueue();\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Remove .has-error from fields\r\n     *\r\n     * @param fields\r\n     */\r\n    removeErrorClassFromFields: function(fields) {\r\n        for(var i= 0, length = fields.length; i<length; i++)\r\n        {\r\n            if (fields[i].val() != \"\" && fields[i].parent().hasClass(\"has-error\"))\r\n            {\r\n                fields[i].parent().removeClass(\"has-error\");\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns the method and the price of the cheapest shipping services.\r\n     *\r\n     * @param data\r\n     * @returns {{fare: *, method: (*|string)}}\r\n     */\r\n    getCheapestShippingMethod : function(data) {\r\n        var availableShipment = data.shipping.services,\r\n            sortedShipmentByPrice = [];\r\n\r\n        for(var i= 0, length = availableShipment.length; i<length; i++)\r\n        {\r\n            sortedShipmentByPrice.push(availableShipment[i]);\r\n        }\r\n\r\n        sortedShipmentByPrice.sort(function(a,b) {\r\n            return a.price - b.price\r\n        });\r\n\r\n        return {\r\n            fare: sortedShipmentByPrice[0].price,\r\n            method: sortedShipmentByPrice[0].method\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Get the total taxes (TPS/TVQ or TVH or TPS or null) + shipping method taxes.\r\n     *\r\n     * @param data\r\n     * @returns {number}\r\n     */\r\n    getTaxes : function(data) {\r\n        var taxes = 0,\r\n            dataTaxesLength = data.taxes.length;\r\n\r\n        if (dataTaxesLength != 0)\r\n        {\r\n            for(var i=0; i<dataTaxesLength; i++)\r\n            {\r\n                taxes += data.taxes[i].amount;\r\n            }\r\n        }\r\n\r\n        return taxes.toFixed(2);\r\n    },\r\n\r\n    /**\r\n     * Get the relevant taxes according to the chosen shipping method.\r\n     *\r\n     * @param serviceCode\r\n     * @param data\r\n     * @returns {string}\r\n     */\r\n    getShipmentTaxes : function(serviceCode, data) {\r\n        var taxes = 0;\r\n        console.log(data);\r\n\r\n        for(var i=0; i<data.shipping.services.length; i++)\r\n        {\r\n            if(data.shipping.services[i].method == serviceCode)\r\n            {\r\n                if (data.shipping.services[i].taxes.length != 0)\r\n                {\r\n                    for(var j=0; j<data.shipping.services[i].taxes.length; j++)\r\n                    {\r\n                        taxes += data.shipping.services[i].taxes[j].amount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return taxes.toFixed(2);\r\n    },\r\n\r\n    /**\r\n     * Returns appropriate taxes according to the shipping method.\r\n     *\r\n     * @param serviceCode\r\n     * @param data\r\n     * @returns {number}\r\n     */\r\n    getCartTaxes : function(serviceCode, data) {\r\n        var taxes = parseFloat(UtilityContainer.getTaxes(data)),\r\n            shippingTaxes = parseFloat(UtilityContainer.getShipmentTaxes(serviceCode, data)),\r\n            totalTaxes = taxes + shippingTaxes;\r\n\r\n        return totalTaxes;\r\n    },\r\n\r\n    /**\r\n     * Returns total price (subtotal + taxes + shipping taxes)\r\n     * Saves total in sessionStorage (for live update)\r\n     *\r\n     * @param data\r\n     * @returns {string}\r\n     */\r\n    getCartTotal : function(serviceCode, data) {\r\n        var taxes = parseFloat(UtilityContainer.getCartTaxes(serviceCode.method, data)),\r\n            shipping = parseFloat(UtilityContainer.getCheapestShippingMethod(data).fare),\r\n            subtotal = parseFloat(UtilityContainer.getProductsPriceFromLocalStorage()),\r\n            total = (taxes + shipping + subtotal).toFixed(2);\r\n\r\n        return total;\r\n    }\r\n}\r\n\r\n","/**\r\n * Container responsible for initializing the checkout page.\r\n * Overall logic is handled in js/dev/actions/checkout/*.js\r\n * View component is handled in js/dev/components/checkout/*.js\r\n *\r\n * @type {{estimateButtonClick: Function, init: Function}}\r\n */\r\nvar checkoutInitContainer = {\r\n\r\n    /**\r\n     * Event triggered when the \"Continue\" button is hit.\r\n     * If the input fields entered are appropriate, make the ajax call to \"/api/estimate\".\r\n     * If they are not, display the relevant error message(s)\r\n     *\r\n     */\r\n    estimateButtonClick : function() {\r\n        $(\"#estimateButton\").on(\"click\", function(e) {\r\n            var email = $(\"#customer_email\"),\r\n                phone = $(\"#customer_phone\"),\r\n                shippingFirstName = $(\"#shippingFirstname\"),\r\n                shippingLastName = $(\"#shippingLastname\"),\r\n                shippingAddress1 = $(\"#shippingAddress1\"),\r\n                shippingCity = $(\"#shippingCity\"),\r\n                shippingCountry = $(\"#shippingCountry\").val(),\r\n                shippingPostcode = $(\"#shippingPostcode\"),\r\n                billingFirstName = $(\"#billingFirstname\"),\r\n                billingLastName = $(\"#billingLastname\"),\r\n                billingAddress1 = $(\"#billingAddress1\"),\r\n                billingCity = $(\"#billingCity\"),\r\n                billingCountry = $(\"#billingCountry\").val(),\r\n                billingPostcode = (\"#billingPostcode\"),\r\n                shippingInformation = {\r\n                    \"country\" : shippingCountry,\r\n                    \"postcode\" : $(\"#shippingPostcode\").val(),\r\n                    \"postcodeInput\" : $(\"#shippingPostcode\")\r\n                },\r\n                fields = [\r\n                    shippingFirstName,\r\n                    shippingLastName,\r\n                    shippingAddress1,\r\n                    shippingCity,\r\n                    billingFirstName,\r\n                    billingLastName,\r\n                    billingAddress1,\r\n                    billingCity,\r\n                    email,\r\n                    phone\r\n                ];\r\n\r\n            e.preventDefault();\r\n\r\n            //Auto fill billing address if checkbox is checked.\r\n            billingContainer.autoFillBillingAddress(fields, shippingInformation.postcodeInput);\r\n\r\n            //Build the billing information object (from auto fill or entered by hand)\r\n            var billingInformation = {\r\n                \"country\" : billingCountry,\r\n                \"postcode\" : $(\"#billingPostcode\").val(),\r\n                \"postcodeInput\" : $(\"#billingPostcode\")\r\n            };\r\n\r\n            //Validate all fields and make the ajax call!\r\n            checkoutValidationContainer.init(fields, email, shippingInformation, billingInformation);\r\n        });\r\n    },\r\n\r\n    init: function () {\r\n        /**\r\n         * Populate select lists and set up billing address container behaviour.\r\n         * Set the form focus on first name field\r\n         *\r\n         */\r\n        locationContainer.init();\r\n        billingContainer.init();\r\n        $(\"#shippingFirstname\").focus();\r\n\r\n        var self = checkoutInitContainer;\r\n        self.estimateButtonClick();\r\n    }\r\n}","/**\r\n * Object responsible for handling the overall logic of the checkout process.\r\n * After clicking on \"Proceed to checkout\", create a cookie and make an ajax call to get all the data before redirecting the user to the payment page.\r\n *\r\n * When a user changes the quantity or deletes an item, fadeOut the shipping estimate and payment panel. Replace the Continue button with \"Update\".\r\n *\r\n * @type {{createOrdersCookie: Function, placeOrderAjaxCall: Function, init: Function}}\r\n */\r\nvar checkoutLogicContainer = {\r\n\r\n    /**\r\n     * Create a localStorage object containing the id and the verification code.\r\n     *\r\n     * @param data\r\n     */\r\n    createOrdersCookie: function(data) {\r\n        var paymentId = data.id,\r\n            paymentVerification = data.verification;\r\n\r\n        Cookies.set(\"_unpaid_orders\", JSON.stringify( {\r\n            id : paymentId,\r\n            verification : paymentVerification\r\n        }));\r\n    },\r\n\r\n    /**\r\n     * Makes an ajax call to api/orders with the values from the form\r\n     *\r\n     * @param self\r\n     */\r\n    placeOrderAjaxCall: function(self) {\r\n        $.ajax({\r\n            method: \"POST\",\r\n            url: ApiEndpoints.placeOrder,\r\n            data: $(\"#cart_form\").serialize(),\r\n            cache: false,\r\n            success: function(data) {\r\n                console.log(data);\r\n\r\n                self.createOrdersCookie(data);\r\n\r\n                //redirect the user to the checkout page if he backs from the payment page\r\n                history.pushState({data: data}, \"Checkout \",\"/dev/cart\");\r\n\r\n                //Redirect to success url\r\n                window.location.replace(data.payment_details.payment_url);\r\n            },\r\n            error: function(xhr, e) {\r\n                console.log(xhr);\r\n                console.log(e);\r\n            }\r\n        })\r\n\r\n    },\r\n\r\n    /**\r\n     * Hide the panels by fading them up then adding a hidden class.\r\n     *\r\n     * @param self\r\n     */\r\n    hidePanels: function (self) {\r\n        $(\".quantity, #shippingPostcode, #shippingCity\").on(\"change\", function () {\r\n            UtilityContainer.addFadeOutUpClass($(\"#estimate\"));\r\n            UtilityContainer.addFadeOutUpClass($(\"#payment\"));\r\n\r\n            self.updateEstimateButtonValue();\r\n        });\r\n\r\n        $(\".close-button\").on(\"click\", function() {\r\n            UtilityContainer.addFadeOutUpClass($(\"#estimate\"));\r\n            UtilityContainer.addFadeOutUpClass($(\"#payment\"));\r\n\r\n            self.updateEstimateButtonValue();\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Updates the estimate button with \"Update\" while making it bouncy ;)\r\n     *\r\n     */\r\n    updateEstimateButtonValue: function() {\r\n        $(\"#estimateButton\")\r\n            .removeClass(\"btn-one animated rubberBand\")\r\n            .addClass(\"animated rubberBand btn-three\")\r\n            .text(Localization.update);\r\n    },\r\n\r\n    /**\r\n     * Register methods for outside calling.\r\n     *\r\n     */\r\n    init: function() {\r\n        var self = checkoutLogicContainer;\r\n\r\n        $(\"#checkoutButton\").on(\"click\", function (e) {\r\n            e.preventDefault();\r\n\r\n            $('#checkoutButton').html('<i class=\"fa fa-spinner fa-spin\"></i>');\r\n\r\n            self.placeOrderAjaxCall(self);\r\n\r\n        });\r\n\r\n        self.hidePanels(self);\r\n    }\r\n}","/**\r\n * Object responsible for validating all the information entered by the user.\r\n * Will trigger the ajax call only when all the inputs entered match their validation rules.\r\n *\r\n * @type {{removeErrorClassFromEmail: Function, removeErrorClassFromPostcode: Function, init: Function}}\r\n */\r\nvar checkoutValidationContainer = {\r\n\r\n    removeErrorClassFromEmail: function(email) {\r\n        if (UtilityContainer.validateEmail(email.val()) && email.parent().hasClass(\"has-error\"))\r\n            email.parent().removeClass(\"has-error\");\r\n    },\r\n\r\n    removeErrorClassFromPostcode: function(postcode, country) {\r\n        if (UtilityContainer.validatePostCode(postcode.val(), country) && postcode.parent().hasClass(\"has-error\"))\r\n            postcode.parent().removeClass(\"has-error\");\r\n    },\r\n\r\n    /**\r\n     * If all validation pass, spin the button, clean the shipment table and trigger the ajax call.\r\n     * If there are errors, warn the users about which inputs is faulty.\r\n     *\r\n     * @param fields\r\n     * @param email\r\n     * @param postcode\r\n     * @param country\r\n     */\r\n    init : function(fields, email, shippingInformation, billingInformation) {\r\n        var self = checkoutValidationContainer;\r\n\r\n        if (UtilityContainer.validateEmptyFields(fields)\r\n            && UtilityContainer.validateEmail(email.val())\r\n            && UtilityContainer.validatePostCode(shippingInformation.postcode, shippingInformation.country)\r\n            && UtilityContainer.validatePostCode(billingInformation.postcode, billingInformation.country))\r\n        {\r\n            $('#estimateButton').html('<i class=\"fa fa-spinner fa-spin\"></i>');\r\n\r\n            //delete previously uploaded shipping method (if any)\r\n            if($(\"#estimate .table-striped\").children().length > 0) {\r\n                $(\"#estimate .table-striped tbody\").empty();\r\n            }\r\n\r\n            estimateContainer.ajaxCall();\r\n        }\r\n        else\r\n        {\r\n            UtilityContainer.addErrorClassToFields(fields);\r\n\r\n            if(!UtilityContainer.validatePostCode(shippingInformation.postcode, shippingInformation.country))\r\n            {\r\n                UtilityContainer.addErrorClassToFieldsWithRules(shippingInformation.postcodeInput);\r\n            }\r\n\r\n            if(!UtilityContainer.validatePostCode(billingInformation.postcode, billingInformation.country))\r\n            {\r\n                UtilityContainer.addErrorClassToFieldsWithRules(billingInformation.postcodeInput);\r\n            }\r\n\r\n            if(!UtilityContainer.validateEmail(email.val()))\r\n            {\r\n                UtilityContainer.addErrorClassToFieldsWithRules(email);\r\n                $(\"#why_email\").removeClass(\"hidden\").addClass(\"animated bounceInRight\").tooltip();\r\n            }\r\n\r\n        }\r\n\r\n        UtilityContainer.removeErrorClassFromFields(fields);\r\n        self.removeErrorClassFromEmail(email);\r\n        self.removeErrorClassFromPostcode(shippingInformation.postcodeInput, shippingInformation.country);\r\n        self.removeErrorClassFromPostcode(billingInformation.postcodeInput, billingInformation.country);\r\n    }\r\n}\r\n","/**\r\n * Object responsible for the overall logic (CRUD) of the cart drawer.\r\n * Layout handled in dev/components/layout/cart-drawer.js\r\n *\r\n * @type {{$el: {$list: (*|jQuery|HTMLElement)}, addItem: Function, storeItem: Function, loadItem: Function, deleteItem: Function, modifyQuantity: Function, modifyQuantityBeforeBuying: Function, setBadgeQuantity: Function, setQuantityCookie: Function, setCartSubtotal: Function, setCartShipping: Function, setCartTaxes: Function, setCartTotal: Function, ajaxCall: Function, updateAjaxCall: Function, init: Function}}\r\n */\r\nvar cartLogicContainer = {\r\n    /**\r\n     * Cache a set of elements commonly used (to be updated)\r\n     */\r\n    $el : {\r\n        $list : $(\".cart-items-list\")\r\n    },\r\n\r\n    /**\r\n     * Add an item in the list.\r\n     *\r\n     * @param item JSON format converted from attributes on the .buybutton\r\n     */\r\n    addItem : function(item) {\r\n        var price = (parseInt(item.quantity) * parseFloat(item.price)).toFixed(2);\r\n\r\n        var sidebarElement = '<li class=\"w-box animated bounceInDown\" data-product=\"' + item.product + '\" data-quantity=1>' +\r\n            '<div class=\"col-xs-3 text-center\"><img src=' + item.thumbnail_lg + ' class=\"img-responsive\"></div>' +\r\n            '<div class=\"col-xs-9 no-padding-left\">' +\r\n            '<div class=\"row\"><div class=\"col-xs-10\"><h3 class=\"product-name\">' + item.name + '</h3></div><div class=\"col-xs-2\"><h4 class=\"text-right\"><i class=\"fa fa-trash fa-1 close-button\"><span class=\"sr-only\">Remove Item</span></i></h4></div></div>' +\r\n            '<div class=\"row\"><div class=\"col-xs-8\">' +\r\n            '<div class=\"input-group\"><label for=\"products[' + item.product + '][quantity]\" class=\"sr-only\">'+ item.name + \":\" + item.price +'</label>' +\r\n            '<input type=\"number\" class=\"quantity form-control input-sm\" min=\"1\" step=\"1\" value=\"' + item.quantity + '\" name=\"products[' + item.product + '][quantity]\">' +\r\n            '<span class=\"input-group-addon update_quantity_indicator\"><i class=\"fa\" hidden><span class=\"sr-only\">' + \"Update quantity\" + '</span></i></span></div></div>' +\r\n            '<div class=\"col-xs-4 product-price text-right\" data-price=\"' + item.price + '\">$' + price  + '<span class=\"sr-only\">' + $ + item.price + '</span></div></div>' +\r\n            '<input type=\"hidden\" name=\"products[' + item.product + '][id]\" value=\"' + item.product + '\"/> ' +\r\n            '</div>' +\r\n            '</li>';\r\n\r\n        if (!$(\".cart-items-list [data-product='\" + item.product + \"']\").length){\r\n            cartLogicContainer.$el.$list.append(sidebarElement);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Store a product in localStorage\r\n     * Update badge quantity\r\n     * Create/update a quantity cookie\r\n     *\r\n     * @param item JSON format converted from attributes on the .buybutton\r\n     */\r\n    storeItem : function(item) {\r\n        localStorage.setItem(\"_product \" + item.product, JSON.stringify(item));\r\n        cartLogicContainer.setBadgeQuantity();\r\n        cartLogicContainer.setQuantityCookie();\r\n        cartLogicContainer.setCartSubtotal();\r\n        cartLogicContainer.setCartTotal();\r\n        cartLogicContainer.updateAjaxCall();\r\n    },\r\n\r\n    /**\r\n     * Load a list of items previously bought into the cart.\r\n     * If there is no item in localStorage starting with the key \"_product\", then nothing is loaded.\r\n     */\r\n    loadItem : function() {\r\n        for(var i = 0, length = localStorage.length; i<length; i++)\r\n        {\r\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\r\n            {\r\n                cartLogicContainer.addItem(JSON.parse(localStorage.getItem(localStorage.key(i))));\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Delete an item from the cart drawer list.\r\n     * Remove it from the DOM.\r\n     * Delete the object on localStorage.\r\n     * Set Badge quantity accordingly.\r\n     * Update Cookie quantity accordingly.\r\n     */\r\n    deleteItem: function() {\r\n        $(document).on('click', \".close-button\", function() {\r\n            $parent = $(this).closest(\".animated\").addClass(\"animated bounceOutLeft\");\r\n            $parent.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\r\n                $(this).remove();\r\n            });\r\n\r\n            localStorage.removeItem(\"_product \" + $(this).closest(\".animated\").data(\"product\"));\r\n\r\n            cartLogicContainer.setBadgeQuantity();\r\n            cartLogicContainer.setQuantityCookie();\r\n            cartLogicContainer.setCartSubtotal();\r\n            cartLogicContainer.setCartTotal();\r\n            cartLogicContainer.updateAjaxCall();\r\n\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Modify the quantity of a product in the cart\r\n     * Update its price label accordingly\r\n     * Update the localStorage\r\n     * Set badge quantity\r\n     * Update Cookie quantity\r\n     */\r\n    modifyQuantity : function() {\r\n        $(\"#cart-items\").on(\"change\", \".quantity\", function() {\r\n            $container = $(this).closest(\"li\");\r\n            $product_price = $container.find(\".product-price\");\r\n\r\n            //update the total value\r\n            $product_price.text(\"$\" + ($product_price.data(\"price\") * $(this).val()).toFixed(2));\r\n\r\n            //retrieve old data from old object then update the quantity and finally update the object\r\n            var oldData = JSON.parse(localStorage.getItem(\"_product \" + $container.data(\"product\")));\r\n            oldData.quantity = parseInt($(this).val());\r\n            localStorage.setItem(\"_product \" + $container.data(\"product\"), JSON.stringify(oldData));\r\n\r\n            cartLogicContainer.setBadgeQuantity();\r\n            cartLogicContainer.setQuantityCookie();\r\n            cartLogicContainer.setCartSubtotal();\r\n            cartLogicContainer.setCartTotal();\r\n            cartLogicContainer.updateAjaxCall();\r\n\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Modify the quantity in a product page before buying\r\n     * Only used in a product page.\r\n     * Assuming the DOM has (and will keep) this structure:\r\n     *      .form-group\r\n     *          #item-quantity\r\n     *      .buybutton\r\n     */\r\n    modifyQuantityBeforeBuying : function() {\r\n        $(\"#item_quantity\").on(\"change\", function() {\r\n            $(this).closest(\".form-group\").next().data(\"quantity\", parseInt($(this).val()));\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Update the value of #cart_badge when adding or deleting elements\r\n     */\r\n    setBadgeQuantity : function() {\r\n        var total = UtilityContainer.getNumberOfProducts();\r\n\r\n        $(\".cart_badge\").text(total);\r\n    },\r\n\r\n    /**\r\n     * Create or Update a cookie with the quantity present in the cart.\r\n     * The value of the cookie is encoded in base64 (btoa)\r\n     */\r\n    setQuantityCookie : function () {\r\n        var number = UtilityContainer.getNumberOfProducts();\r\n\r\n        if (Cookies.get(\"quantityCart\") == undefined || number === 0)\r\n        {\r\n            Cookies.set(\"quantityCart\", btoa(\"0\"));\r\n        }\r\n        else {\r\n            Cookies.set(\"quantityCart\", btoa(number));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Update subtotal when users put something in or out of their cart.\r\n     *\r\n     */\r\n    setCartSubtotal : function () {\r\n        $(\"dd#subtotal\").text(\"$\" + UtilityContainer.getProductsPriceFromLocalStorage().toFixed(2));\r\n    },\r\n\r\n    /**\r\n     * Set shipping field\r\n     *\r\n     * @param data\r\n     */\r\n    setCartShipping : function(data) {\r\n        $(\"dd#shipping\").text(\"$\" + (UtilityContainer.getCheapestShippingMethod(data).fare));\r\n    },\r\n\r\n\r\n    /**\r\n     * Set taxes field\r\n     *\r\n     * @param taxes\r\n     */\r\n    setCartTaxes : function(taxes) {\r\n        $(\"#taxes\").text(\"$\" + taxes.toFixed(2));\r\n    },\r\n\r\n    /**\r\n     * Set total field\r\n     *\r\n     * @param total\r\n     */\r\n    setCartTotal : function (total) {\r\n        $(\".cart-total dl\").show();\r\n        $(\".calculation.total dd\").text(\"$ \" + total);\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * Ajax call to /api/estimate after all verifications have passed.\r\n     *\r\n     */\r\n    ajaxCall : function() {\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \"/api/estimate\",\r\n            data: {\r\n                products: UtilityContainer.getProductsFromLocalStorage(),\r\n                shipping_address: {\r\n                    \"postcode\": $(\"#postcode\").val(),\r\n                    \"country\": $(\".price-estimate #country\").val(),\r\n                    \"province\" : \"QC\"\r\n                }\r\n            },\r\n            success: function(data) {\r\n                cartLogicContainer.setCartShipping(data);\r\n                cartLogicContainer.setCartTaxes(UtilityContainer.getCartTaxes(UtilityContainer.getCheapestShippingMethod(data).method, data));\r\n                cartLogicContainer.setCartTotal(UtilityContainer.getCartTotal(UtilityContainer.getCheapestShippingMethod(data), data));\r\n            },\r\n            error: function(e) {\r\n                console.log(e);\r\n            },\r\n            complete : function() {\r\n                $(\".price-estimate\").fadeOut(300, function() {\r\n                    $(\".calculation.hidden\").fadeIn().removeClass(\"hidden\");\r\n                    $(\".cart-total.hidden\").fadeIn().removeClass(\"hidden\");\r\n                });\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Display an update panel when changes are made to the cart drawer.\r\n     *\r\n     */\r\n    updateAjaxCall : function() {\r\n        //If the total is displayed, it means that there's already been an ajax call: we have to display an update!\r\n        if(!$(\".total\").parent().hasClass(\"hidden\")) {\r\n            $(\".cart-total dl\").hide();\r\n            $(\".price-estimate-update\").fadeIn('fast');\r\n        }\r\n\r\n        $(\".changeLocation\").click(function() {\r\n            $(\"dl.calculation\").addClass(\"hidden\");\r\n            $(\".getEstimate\").html(Localization.calculate);\r\n            $(\".price-estimate-update\").fadeOut();\r\n            $(\".price-estimate\").fadeIn();\r\n\r\n        });\r\n\r\n        //TODO: Refactor the arbitrary xxxxms to an actual end of ajax call.\r\n\r\n        $(\".price-estimate-update .getEstimate\").click(function() {\r\n            if(!UtilityContainer.validateEmptyCart()) {\r\n                setTimeout(function() {\r\n                    $(\".price-estimate-update .getEstimate\").parent().fadeOut(300);\r\n                    $(\".price-estimate-update .getEstimate\").html(Localization.calculate);\r\n                }, 2250);\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n    init : function() {\r\n        cartLogicContainer.setBadgeQuantity();\r\n        cartLogicContainer.loadItem();\r\n        cartLogicContainer.deleteItem();\r\n        cartLogicContainer.modifyQuantity();\r\n        cartLogicContainer.modifyQuantityBeforeBuying();\r\n        cartLogicContainer.setQuantityCookie();\r\n        cartLogicContainer.setCartSubtotal();\r\n    }\r\n};\r\n","/**\r\n * Container responsible for initializing the cart drawer feature.\r\n *\r\n * @type {{buyButtonClick: Function, getEstimateClick: Function, init: Function}}\r\n */\r\nvar cartDrawerInitContainer = {\r\n\r\n    /**\r\n     * Event triggered when a buy button is clicked.\r\n     *\r\n     */\r\n    buyButtonClick : function () {\r\n        $(\"body\").on(\"click\", \".buybutton\", function() {\r\n            cartDisplayContainer.animateIn();\r\n            cartLogicContainer.addItem(UtilityContainer.buyButton_to_Json($(this)));\r\n            cartLogicContainer.storeItem(UtilityContainer.buyButton_to_Json($(this)));\r\n\r\n            //We remove the \"Your cart is empty\" message at the top every time we add an item.\r\n            //TODO : Maybe improve it?\r\n            $(\"#cart-items .empty-cart\").addClass(\"hidden\");\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Event triggered when the Calculate button (to get a price estimate) is clicked.\r\n     *\r\n     */\r\n    getEstimateClick: function () {\r\n        $(\".getEstimate\").on(\"click\", function() {\r\n            //Fields validation + Empty cart validation.\r\n            if(UtilityContainer.validatePostCode($(\"#postcode\").val(), $(\".price-estimate #country\").val())\r\n                && UtilityContainer.validateEmptyFields([$(\"#postcode\")])\r\n                && !UtilityContainer.validateEmptyCart()) {\r\n\r\n                $(this).html('<i class=\"fa fa-spinner fa-spin\"></i>');\r\n\r\n                cartLogicContainer.ajaxCall();\r\n\r\n            }\r\n            else if (UtilityContainer.validateEmptyCart()) {\r\n                $(\"#cart-items .empty-cart\").removeClass(\"hidden\");\r\n            }\r\n            else {\r\n                UtilityContainer.addErrorClassToFieldsWithRules($(\"#postcode\"));\r\n            }\r\n        });\r\n    },\r\n\r\n    init: function () {\r\n        cartDisplayContainer.init();\r\n        cartLogicContainer.init();\r\n        cartDisplayContainer.setCartItemsHeight();\r\n\r\n        var self = cartDrawerInitContainer;\r\n        self.buyButtonClick();\r\n        self.getEstimateClick();\r\n    }\r\n\r\n}\r\n","/**\r\n * Container responsible for handling the logic of the wish list page.\r\n * Layout handled in dev/components/site/wishlist.js\r\n *\r\n * @type {{createWishlistElement: Function, renderWishlist: Function, removeWishlistElement: Function, init: Function}}\r\n */\r\nvar wishlistLogicContainer = {\r\n\r\n    /**\r\n     * Create a list layout element from the information passed as an argument.\r\n     *\r\n     * Rounding to 2 decimals, courtesy of http://stackoverflow.com/a/6134070.\r\n     *\r\n     * @param item\r\n     */\r\n    createWishlistElement: function(item) {\r\n        var self = wishlistLogicContainer,\r\n            element =\r\n            '<div class=\"col-md-12 list-layout-element\">' +\r\n            '<div class=\"col-md-2\">' +\r\n            '<img src=' + item.thumbnail_lg + '>' +\r\n            '</div>' +\r\n            '<div class=\"col-md-10\">' +\r\n            '<button class=\"btn btn-outline btn-danger-outline pull-right btn-lg inline-block padding-side-lg removeFavoriteButton\" data-product=\"' + item.product + '\">Remove from wishlist </button>' +\r\n            '<button class=\"btn btn-success buybutton pull-right btn-lg inline-block padding-side-lg\"' +\r\n            'data-product=\"' + item.product + '\"' +\r\n            'data-price=\"' + item.price + '\"' +\r\n            'data-thumbnail=\"' + item.thumbnail + '\"' +\r\n            'data-thumbnail_lg=\"' + item.thumbnail_lg + '\"' +\r\n            'data-name=\"' + item.name + '\"' +\r\n            'data-quantity=\"' + item.quantity  + '\"' + \">\" +\r\n            'Add to cart </button>' +\r\n            '<a href=' + item.link + '><h4 style=\"margin-top: 5px\">' + item.name + '</h4></a>' +\r\n            '<h5> $ ' + parseFloat(Math.round(item.price * 100) / 100).toFixed(2) + '</h5>'+\r\n            '</div>' +\r\n            '</div>';\r\n\r\n        //Localize button (default in english)\r\n        self.localizeWishlistButton();\r\n\r\n        //Append elements\r\n        $(\".list-layout-element-container\").append(element);\r\n    },\r\n\r\n    /**\r\n     * Populate the wishlist page with elements created on the fly from localStorage that has their key starting with \"_wish_prod {id}\".\r\n     * The creation is handled in createWishlistElement function.\r\n     *\r\n     */\r\n    renderWishlist: function() {\r\n        var self = wishlistLogicContainer;\r\n\r\n        for(var i = 0, length = localStorage.length; i<length; i++)\r\n        {\r\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0)\r\n            {\r\n                self.createWishlistElement(JSON.parse(localStorage.getItem(localStorage.key(i))));\r\n            }\r\n        }\r\n    },\r\n\r\n    localizeWishlistButton: function() {\r\n        $(\".list-layout-element .buybutton\").text(Localization.add_cart);\r\n        $(\".list-layout-element .removeFavoriteButton\").text(Localization.wishlist_remove);\r\n    },\r\n\r\n    /**\r\n     * Remove the element from the wishlist after a subtle animation.\r\n     *\r\n     */\r\n    removeWishlistElement: function () {\r\n        $(\".list-layout-element-container\").on(\"click\", \".removeFavoriteButton\", function() {\r\n            //Animate the element.\r\n            UtilityContainer.addFadeOutUpClass($(this).closest(\".list-layout-element\"));\r\n\r\n            //Delete the element from localStorage.\r\n            localStorage.removeItem(\"_wish_product \" + $(this).data(\"product\"));\r\n\r\n            //Set wishlist header quantity.\r\n            wishlistContainer.setNumberOfProductsInHeader();\r\n\r\n            //Set wishlist badge\r\n            productLayoutFavoriteContainer.setWishlistBadgeQuantity();\r\n        });\r\n    },\r\n\r\n    init: function () {\r\n        var self = wishlistLogicContainer;\r\n\r\n        //Calls the layout container (wishlistContainer).\r\n        wishlistContainer.init();\r\n\r\n        //Initialize the logic.\r\n        self.renderWishlist();\r\n        self.removeWishlistElement();\r\n    }\r\n\r\n}","/**\r\n * Entry point of script.\r\n *\r\n */\r\n$(document).ready(function () {\r\n\r\n    /**\r\n     * Sets up the ajax token for all ajax requests\r\n     *\r\n     */\r\n    $.ajaxSetup({\r\n        headers: {\r\n            'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\r\n            'locale': $('html').attr('lang')\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Initialize checkout logic.\r\n     *\r\n     */\r\n    checkoutInitContainer.init();\r\n\r\n    /**\r\n     * Initialize cart drawer logic.\r\n     *\r\n     */\r\n    cartDrawerInitContainer.init();\r\n\r\n    /**\r\n     * Initialize category container\r\n     *\r\n     */\r\n    categoryContainer.init();\r\n\r\n    /**\r\n     * Initialize overlay plugin.\r\n     *\r\n     */\r\n    paymentOverlayContainer.init();\r\n\r\n    /**\r\n     * Initialize navigation header.\r\n     *\r\n     */\r\n    headerContainer.init();\r\n\r\n    /**\r\n     * Initialize favorite products feature.\r\n     *\r\n     */\r\n    productLayoutFavoriteContainer.init();\r\n\r\n    /**\r\n     * Initialize wishlist page.\r\n     *\r\n     */\r\n    wishlistLogicContainer.init();\r\n\r\n    /**\r\n     * Global initialization of elements.\r\n     *\r\n     */\r\n    //fancy plugin for product page (quantity input)\r\n    $(\".input-qty\").TouchSpin({\r\n        initval: 1\r\n    });\r\n\r\n});"],"sourceRoot":"/source/"}
=======
{"version":3,"sources":["billing.js","estimate.js","location.js","payment.js","cart-drawer.js","header.js","payment-overlay.js","product-layout-favorite.js","category.js","wishlist.js","utility.js","checkout-init.js","checkout-logic.js","checkout-validation.js","cart-drawer-logic.js","cart-drawer-init.js","wishlist-logic.js","init.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACthHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvrvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxhYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxtjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"boukem2.js","sourcesContent":["/**\n * Object responsible for handling billing information.\n *\n * @type {{autoFillBillingAddress: Function, setDifferentBillingAddress: Function, clearBillingAddress: Function, init: Function}}\n */\nvar billingContainer = {\n\n    /**\n     * Fill the billing address with the shipping address.\n     * First parameter is an array of all fields that only need basic validation (empty or not)\n     * Second parameter is an input that requires more advanced verification (postcode)\n     *\n     *\n     * @param fields\n     * @param fieldWithRules\n     */\n    autoFillBillingAddress : function(fields, fieldWithRules) {\n        if($(\".billing-checkbox\").is(\":checked\"))\n        {\n            //We assume here that fieldWithRules is the shipping postcode.\n            $(\"#billing\" + fieldWithRules[0].id.substring(\"shipping\".length, fieldWithRules[0].id.length)).val(fieldWithRules[0].value);\n\n            for(var i= 0, length = fields.length; i<length; i++) {\n                //check if the id has the string \"shipping\".\n                //if it does, delete the shipping prefix and replace it by billing.\n                //Create a new jquery selector and fill it with the value of the shipping one.\n                if (fields[i][0].id.indexOf(\"shipping\") > -1) {\n                    var genericInput = fields[i][0].id.substring(\"shipping\".length, fields[i][0].id.length);\n                    $(\"#billing\" + genericInput).val(fields[i][0].value);\n                }\n            }\n        }\n    },\n\n    /**\n     * Get user's billing address. By default shipping address = billing address.\n     * Set the width of select list at the same time.\n     *\n     */\n    setDifferentBillingAddress : function (self) {\n        $(\".billing-checkbox\").on(\"change\", function() {\n            $(\".form-billing .chosen-container\").width($(\"#customer_email\").outerWidth()-20);\n\n            if (!this.checked) {\n                $(\".form-billing\").hide().removeClass(\"hidden\").fadeIn();\n                self.clearBillingAddress();\n            }\n            else {\n                $(\".form-billing\").fadeOut(function() {\n                    $(this).addClass(\"hidden\");\n                });\n            }\n        })\n    },\n\n    /**\n     * Clear the billing form.\n     *\n     */\n    clearBillingAddress : function() {\n        if ($(\".form-billing input\").val() != \"\") {\n            $(\".form-billing input\").val() == \"\";\n        }\n    },\n\n    init: function() {\n        var self = billingContainer;\n\n        self.setDifferentBillingAddress(self);\n    }\n}","/**\n * Object responsible for handling the estimation of user's purchase.\n *\n * @type {{ajaxCall: Function, getShipmentTaxes: Function, displayEstimatePanel: Function, fetchEstimate: Function, init: Function}}\n */\nvar estimateContainer = {\n\n    /**\n     * Ajax call to /api/estimate after all verifications have passed.\n     *\n     */\n    ajaxCall : function() {\n        $.ajax({\n            type: \"POST\",\n            url: ApiEndpoints.estimate,\n            data: {\n                email: $(\"#customer_email\").val(),\n                shipping: {},\n                products: UtilityContainer.getProductsFromLocalStorage(),\n                shipping_address: UtilityContainer.getShippingFromForm()\n            },\n            success: function(data) {\n                console.log(data);\n                estimateContainer.init(data);\n            },\n            error: function(e, status) {\n                if (e.status == 403){\n                    // TODO: replace with an actual link\n                    window.location.replace(\"/auth/login\");\n                    return;\n                }\n                $('#estimate').html('<div class=\"alert alert-danger\">Une erreur est survenue. Veuillez vérifier les informations fournies.</div>');\n            }\n        });\n    },\n\n    /**\n     * Get the relevant taxes according to the chosen shipping method.\n     *\n     * @param serviceCode\n     * @param data\n     * @returns {string}\n     */\n    getShipmentTaxes : function(serviceCode, data) {\n        var taxes = 0;\n\n        for(var i=0; i<data.shipping.services.length; i++)\n        {\n            if(data.shipping.services[i].method == serviceCode)\n            {\n                if (data.shipping.services[i].taxes.length != 0)\n                {\n                    for(var j=0; j<data.shipping.services[i].taxes.length; j++)\n                    {\n                        taxes += data.shipping.services[i].taxes[j].amount;\n                    }\n                }\n            }\n        }\n        return taxes.toFixed(2);\n    },\n\n    /**\n     * Display the estimate panel\n     *\n     */\n    displayEstimatePanel : function() {\n        $(\"#estimate\").removeClass(\"hidden fadeOutUp\").addClass(\"animated fadeInDown\");\n    },\n\n    /**\n     * Utility function to scroll the body to the estimate table\n     *\n     */\n    scrollTopToEstimate : function() {\n        $('html, body').animate({\n            scrollTop: $(\"#estimate\").offset().top\n        }, 1000);\n    },\n\n    /**\n     * Populate the shipping methods table with the data received after the api call.\n     *\n     * @param data\n     */\n    fetchEstimate : function(data, self) {\n        $(\".has-error\").removeClass(\"has-error\");\n\n        var email_value = $(\"#customer_email\").val();\n        var postcode_value = $(\"#shippingPostcode\").val();\n        var country_value = $(\".country\").val();\n\n        for(var i = 0, shippingLength = data.shipping.services.length; i<shippingLength; i++)\n        {\n            var serviceDOM = \"<tr data-service='\" + data.shipping.services[i].method + \"'>\" +\n                \"<td>\" + data.shipping.services[i].name + \"</td>\" +\n                \"<td>\" + data.shipping.services[i].transit + \"</td>\" +\n                \"<td>\" + data.shipping.services[i].delivery + \"</td>\" +\n                \"<td>\" + data.shipping.services[i].price + \"</td>\" +\n                \"<td>\" +\n                \"<input \" +\n                \"type='radio' \" +\n                \"name='shipping' \" +\n                \"class='shipping_method' \" +\n                \"data-taxes='\" + self.getShipmentTaxes(data.shipping.services[i].method, data) + \"' \" +\n                \"data-cost='\" + data.shipping.services[i].price + \"' \" +\n                \"data-value='\" + data.shipping.services[i].method + \"' \" +\n                \"value='\" + btoa(JSON.stringify(data.shipping.services[i])) + \"' >\" +\n                \"</td>\";\n\n            $(\"#estimate .table-striped\").append(serviceDOM);\n        }\n\n        $(\"#estimateButton\").removeClass(\"btn-three\").addClass(\"btn-one\").text(Localization.continue);\n        self.selectDefaultShipmentMethod();\n\n        self.scrollTopToEstimate();\n\n        paymentContainer.init(data);\n    },\n\n    /**\n     * Select the default shipment method from a predefined list.\n     *\n     */\n    selectDefaultShipmentMethod : function() {\n        var defaultShipment = [\"DOM.EP\", \"USA.TP\", \"INT.TP\"],\n            availableShipment = $(\"input[name=shipping]\");\n\n        for(var i= 0, length = availableShipment.length; i<length; i++)\n        {\n            if (defaultShipment.indexOf(availableShipment[i].dataset.value) != -1)\n            {\n                availableShipment[i].checked = true;\n            }\n        }\n    },\n\n    /**\n     * Registers functions to be called outside of this object.\n     *\n     * @param data\n     */\n    init : function(data) {\n        var self = estimateContainer;\n\n        if (UtilityContainer.getProductsFromLocalStorage().length == 0)\n        {\n            location.reload();\n        }\n        else\n        {\n            self.displayEstimatePanel();\n            self.fetchEstimate(data, self);\n        }\n    }\n\n}","/**\n * Object responsible for building the select list populating countries, provinces and states on checkout page.\n *\n * @type {{populateCountry: Function, populateProvincesAndStates: Function, updateChosenSelects: Function, callUpdateChosenSelects: Function, init: Function}}\n */\nvar locationContainer = {\n\n    /**\n     * Function to populate country list\n     * Activates the chosen plugin on the country select list.\n     *\n     */\n    populateCountry : function (lang) {\n        var file = \"/js/data/country-list.\" + lang + \".json\",\n            listItems = '',\n            $country = $(\".country\");\n\n        $.getJSON(file, function(data) {\n            $.each(data, function(key, val) {\n                if (key == \"CA\") {\n                    listItems += \"<option value='\" + key + \"' selected>\" + val + \"</option>\";\n                }\n                else {\n                    listItems += \"<option value='\" + key + \"'>\" + val + \"</option>\";\n                }\n            });\n            $country.append(listItems);\n        }).done(function() {\n            $(\".country\").chosen();\n        });\n    },\n\n    /**\n     * Function to populate provinces and states\n     * Activates the chosen plugin on the province select list.\n     *\n     * @param country\n     * @param callback\n     */\n    populateProvincesAndStates : function (country, callback) {\n        $.getJSON(\"/js/data/world-states.json\", function(data) {\n            for(var i= 0, length = country.length; i<length; i++) {\n                var listItems = '',\n                    $province = $(\".province\").find(\"[data-country='\" + country[i] +\"']\");\n\n                $.each(data, function(key)\n                {\n                    if (data[key].country === country[i] && data[key].short == \"QC\" ){\n                        listItems += \"<option value='\" + data[key].short + \"' selected>\" + data[key].name + \"</option>\";\n                    }\n                    else if (data[key].country === country[i]){\n                        listItems += \"<option value='\" + data[key].short + \"'>\" + data[key].name + \"</option>\";\n                    }\n                });\n                $province.append(listItems);\n            }\n            callback();\n        });\n    },\n\n    /**\n     * Event function enabling or disabling postcode and province fields according to the chosen country and the provided input (shipping or billing)\n     *\n     * @param chosenCountry\n     * @param input\n     */\n    updateChosenSelects: function(chosenCountry, input) {\n        if (chosenCountry == 'CA' || chosenCountry == 'US' || chosenCountry == \"MX\"){\n            $(input).removeAttr('disabled').trigger(\"chosen:updated\");\n        } else {\n            $(input).attr('disabled','disabled');\n        }\n\n        $(input + ' optgroup').attr('disabled','disabled');\n\n        if (chosenCountry == 'CA' || chosenCountry == 'US' || chosenCountry == 'MX'){\n            $(input + ' [data-country=\"' + chosenCountry + '\"]').removeAttr('disabled');\n\n        }\n\n        $(input).trigger('chosen:updated');\n    },\n\n    /**\n     * Triggers updateChosenSelects($country, $input)\n     * This function will be registered in init().\n     *\n     */\n    callUpdateChosenSelects: function(self) {\n        $(\"#billingCountry\").on(\"change\", function() {\n            self.updateChosenSelects($(this).val(), \"#billingProvince\");\n        });\n\n        $(\"#shippingCountry\").on(\"change\", function() {\n            self.updateChosenSelects($(this).val(), \"#shippingProvince\");\n        });\n    },\n\n    /**\n     * Registering functions to be called outside of this object.\n     *\n     */\n    init : function() {\n        var self = locationContainer;\n\n        self.populateCountry($(\"html\").attr(\"lang\"));\n        self.populateProvincesAndStates([\"CA\", \"US\", \"MX\"], function() {\n            $(\".province\").chosen();\n        });\n        self.callUpdateChosenSelects(self);\n\n    }\n}","/**\n * Object responsible for handling the payment panel.\n *\n * @type {{displayPaymentPanel: Function, initPaymentPanel: Function, updatePaymentPanel: Function, getTaxes: Function, init: Function}}\n */\nvar paymentContainer = {\n    /**\n     * Displays the Payment panel.\n     *\n     */\n    displayPaymentPanel : function() {\n        $(\"#payment\").removeClass(\"hidden fadeOutUp\").addClass(\"animated fadeInDown\");\n        $(\"#checkoutButton\").addClass(\"animated rubberBand\");\n    },\n\n    /**\n     * Populate the payment panel with default values.\n     *\n     * @param data\n     */\n    initPaymentPanel : function(data) {\n        var subtotal = parseFloat(UtilityContainer.getProductsPriceFromLocalStorage()).toFixed(2),\n            priceTransport = $(\"input:radio.shipping_method:checked\").data(\"cost\"),\n            taxes = paymentContainer.getTaxes(data) + parseFloat($(\"input:radio.shipping_method:checked\").data(\"taxes\")),\n            total = parseFloat(subtotal) + parseFloat(priceTransport) + parseFloat(taxes);\n\n        $(\"#price_subtotal\").text(subtotal);\n        $(\"#price_transport\").text(priceTransport);\n        $(\"#price_taxes\").text(taxes.toFixed(2));\n        $(\"#price_total\").text(total.toFixed(2));\n    },\n\n    /**\n     * Update the payment panel with right values (shipping method)\n     *\n     * @param data\n     */\n    updatePaymentPanel : function(data) {\n        var subtotal = parseFloat(UtilityContainer.getProductsPriceFromLocalStorage()).toFixed(2),\n            priceTransport, taxes;\n\n        $(\".shipping_method\").on(\"change\", function() {\n            priceTransport = $(this).data(\"cost\");\n            taxes = paymentContainer.getTaxes(data) + parseFloat($(this).data(\"taxes\"));\n            total = parseFloat(subtotal) + parseFloat(priceTransport) + parseFloat(taxes);\n\n            $(\"#price_subtotal\").text(subtotal);\n            $(\"#price_transport\").text(priceTransport);\n            $(\"#price_taxes\").text(taxes.toFixed(2));\n            $(\"#price_total\").text(total.toFixed(2));\n        });\n    },\n\n    /**\n     * Get the total taxes (TPS/TVQ or TVH or TPS or null) + shipping method taxes.\n     *\n     * @param data\n     * @returns {number}\n     */\n    getTaxes : function(data) {\n        var taxes = 0,\n            dataTaxesLength = data.taxes.length;\n\n        if (dataTaxesLength != 0)\n        {\n            for(var i=0; i<dataTaxesLength; i++)\n            {\n                taxes += data.taxes[i].amount;\n            }\n        }\n        return taxes;\n    },\n\n    /**\n     * Register methods for outside calling.\n     *\n     * @param data\n     */\n    init : function(data) {\n        paymentContainer.displayPaymentPanel();\n        paymentContainer.initPaymentPanel(data);\n        paymentContainer.updatePaymentPanel(data);\n\n        checkoutLogicContainer.init();\n    }\n}","/**\n * Object responsible for displaying the cart drawer.\n * Logic handled in dev/actions/layout/cart-drawer-logic.js\n *\n * @type {{$el: {$back: (*|jQuery|HTMLElement), $proceed: (*|jQuery|HTMLElement), $trigger: (*|jQuery|HTMLElement), $container: (*|jQuery|HTMLElement), $checkout: (*|jQuery|HTMLElement), $body: (*|jQuery|HTMLElement)}, displayOn: Function, displayOff: Function, animateIn: Function, animateOut: Function, setCartItemsHeight: Function, computeCartItemsHeight: Function, init: Function}}\n */\nvar cartDisplayContainer = {\n    $el : {\n        $back : $(\"#back\"),\n        $proceed : $(\"#proceed\"),\n        $trigger : $(\".view-cart\"),\n        $container : $(\"#cart-container\"),\n        $checkout : $(\"#checkout\"),\n        $body : $(\"body\")\n    },\n\n    displayOn: function() {\n        var _width = cartDisplayContainer.$el.$container.width();\n        cartDisplayContainer.$el.$container.css( {\n            \"margin-right\" : -_width\n        });\n\n        cartDisplayContainer.$el.$trigger.click(function() {\n            cartDisplayContainer.animateIn();\n        });\n    },\n\n    displayOff : function() {\n        cartDisplayContainer.$el.$back.click(function() {\n            cartDisplayContainer.animateOut();\n        });\n        cartDisplayContainer.$el.$checkout.click(function() {\n            sessionStorage.isDisplayed = false;\n        });\n    },\n\n    animateIn : function() {\n        cartDisplayContainer.$el.$container.show();\n        cartDisplayContainer.$el.$container.animate( {\n            \"margin-right\" : 0\n        }, 400);\n        sessionStorage.isDisplayed = true;\n    },\n\n    animateOut: function() {\n        var _width = cartDisplayContainer.$el.$container.width();\n        cartDisplayContainer.$el.$container.animate( {\n            \"margin-right\" : -_width\n        }, 400, function() {\n            $(this).hide();\n        });\n        sessionStorage.isDisplayed = false;\n    },\n\n    setCartItemsHeight : function() {\n        cartDisplayContainer.computeCartItemsHeight();\n\n        $(window).on(\"resize\", function() {\n            cartDisplayContainer.computeCartItemsHeight();\n        });\n\n        cartDisplayContainer.$el.$trigger.on(\"click\", function() {\n            cartDisplayContainer.computeCartItemsHeight();\n        })\n    },\n\n    computeCartItemsHeight : function() {\n        var cartItemsHeight = $(\"#cart-container\").height() - ($(\".cart-header\").height() + $(\".cart-footer\").height());\n\n        $(\"#cart-items\").css(\"height\", cartItemsHeight);\n    },\n\n    init : function() {\n        cartDisplayContainer.displayOn();\n        cartDisplayContainer.displayOff();\n        UtilityContainer.populateCountry($(\"html\").attr(\"lang\"));\n\n        if (sessionStorage.isDisplayed == \"true\")\n        {\n            cartDisplayContainer.$el.$container.css(\"margin-right\", 0);\n            cartDisplayContainer.$el.$container.show();\n        }\n\n    }\n};","/**\n * Object responsible for displaying the navigation header.\n *\n * @type {{md: {removeCartDescription: Function}, sm: {btnTransform_sm: Function}, init: Function}}\n */\nvar headerContainer = {\n    /**\n     * Desktop size\n     *\n     */\n    md: {\n        removeCartDescription : function() {\n            if ($(window).width() <= 1195) {\n                $(\"#nav-right #cart-description\").text(\"\");\n                $(\"#nav-right\").css(\"padding-bottom\", \"18px\");\n            }\n        }\n    },\n\n    /**\n     * Tablet size\n     *\n     */\n    sm : {\n        btnTransform_sm : function() {\n            if ($(window).width() <= 934 && ($(window).width() >= 769)) {\n                $(\".row:first .btn\").addClass(\"btn-sm\");\n                $(\"#searchBar\").addClass(\"input-sm\");\n                $(\"#view-cart-wrapper\").addClass(\"btn-xs btn-xs-btn-sm-height\");\n            }\n        }\n    },\n\n    /**\n     * Changes text from dropdown button within the parent node passed in the argument\n     *\n     * @param $elem\n     */\n    changeTextFromDropdown : function($elem) {\n        $($elem + \" .dropdown-menu li a\").click(function(){\n\n            $($elem + \" .btn:first-child\").html($(this).text() + '<span class=\\\"caret\\\"></span>');\n            $($elem + \" .btn:first-child\").val($(this).text());\n\n        });\n    },\n\n    /**\n     * Object responsible for handling all semantic ui modules (to be refactored eventually into its own object).\n     *\n     */\n    semanticUI: {\n\n        /**\n         * Initialize dropdown module.\n         *\n         */\n        initDropdownModule : function() {\n            //Enable selection on clicked items\n            $(\".ui.dropdown-select\").dropdown();\n\n            //Prevent selection on clicked items\n            $(\".ui.dropdown-no-select\").dropdown({\n                    action: \"select\"\n                }\n            );\n        }\n    },\n\n    /**\n     * Register functions in event handler (onload, onresize) to be called outside of this object.\n     *\n     */\n    init: function () {\n        var self = headerContainer;\n\n        $(window).on(\"load resize\", function() {\n            self.md.removeCartDescription();\n            self.sm.btnTransform_sm();\n        });\n\n        self.changeTextFromDropdown(\".search-filter\");\n\n        //Initialize Semantic UI component\n        self.semanticUI.initDropdownModule();\n    }\n}\n","/**\n * Object responsible for handling the payment overlay behaviour.\n *\n * @type {{cancelOrder: Function, init: Function}}\n */\nvar paymentOverlayContainer = {\n\n    /**\n     * Cancels an order.\n     * If the user clicks the cancel button, remove the cookie, flush the card, fadeOut the jumbotron then redirect to homepage.\n     *\n     */\n    cancelOrder : function() {\n        $(\"body\").on(\"click\", \"#cancelOrder\", function() {\n            Cookies.remove(\"_unpaid_orders\");\n\n            $(\"#cancelledOrder .jumbotron\").fadeOut();\n\n            window.location.replace(\"/\");\n\n            UtilityContainer.removeAllProductsFromLocalStorage();\n\n        });\n    },\n\n    /**\n     * Checks whether the user has any unpaid orders, and displays a message if that's the case.\n     *\n     */\n    checkPendingOrders : function() {\n\n        if (Cookies.get('_unpaid_orders')) {\n\n            // Retrieve order details.\n            var order = JSON.parse(Cookies.get('_unpaid_orders'));\n\n            // Check whether current order has been paid.\n            $.ajax({\n                type: 'GET',\n                url: ApiEndpoints.orders.view.replace(':id', order.id).replace(':verification', order.verification),\n                success: function(data) {\n                    if (data.status == 'pending')\n                        paymentOverlayContainer.showPaymentNotice();\n                    else\n                        Cookies.remove('_unpaid_orders');\n                }\n            });\n        }\n\n    },\n\n    /**\n     * Shows payment notice.\n     *\n     */\n    showPaymentNotice : function() {\n\n        // Retrieve order details.\n        var order = JSON.parse(Cookies.get('_unpaid_orders'));\n\n        // Display notice.\n        $('body').prepend(\n            '<div class=\"container overlay fullScreen\" id=\"cancelledOrder\">'+\n            '<div class=\"jumbotron vertical-align color-one\">'+\n            '<div class=\"text-center\">'+\n            '<h2>'+\n            Localization.pending_order.replace(':command', order.id) +\n            '</h2>'+\n            '<h4>'+ Localization.what_to_do +'</h4>'+\n            '<br />'+\n            '<ul class=\"list-inline\">' +\n            '<li>' +\n            '<a href=\"'+\n            ApiEndpoints.orders.pay.replace(':id', order.id)\n                .replace(':verification', order.verification) +'\">'+\n            '<button class=\"btn btn-success\" id=\"payOrder\">'+ Localization.pay_now +'</button>'+\n            '</a>'+\n            '</li>' +\n            '<li>' +\n            '<button class=\"btn btn-danger\" id=\"cancelOrder\">'+\n            Localization.cancel_order +\n            '</button>'+\n            '</li>'+\n            '</ul>'+\n            '</div>'+\n            '</div>'+\n            '</div>'\n        );\n    },\n\n    /**\n     * Register functions to be called outside paymentOverlayContainer.\n     *\n     */\n    init : function() {\n        var self = paymentOverlayContainer;\n\n        self.cancelOrder();\n        self.checkPendingOrders();\n    }\n}\n","/**\n * Object responsible for adding products to a user's wishlist.\n *\n * @type {{fadeInFavoriteIcon: Function, setWishlistBadgeQuantity: Function, createWishlistElement: Function, renderWishlist: Function, localizeWishlistButton: Function, removeWishlistElement: Function, init: Function}}\n */\nvar productLayoutFavoriteContainer = {\n    /**\n     * Fade in the favorite icon (heart icon) when hovering on a product tile.\n     *\n     */\n    fadeInFavoriteIcon: function() {\n        $(\".dense_product\").hover(function() {\n            $(this).children(\".favorite-wrapper\").fadeIn();\n        }, function () {\n            $(this).children(\".favorite-wrapper\").hide();\n        });\n    },\n\n    /**\n     * Update the value of .wishlist_badge when adding or deleting elements.\n     *\n     */\n    setWishlistBadgeQuantity : function() {\n        var total = UtilityContainer.getNumberOfProductsInWishlist();\n\n        $(\".wishlist_badge\").text(total);\n    },\n\n    /**\n     * Add the clicked product to the wish list.\n     *\n     */\n    addToFavorite: function() {\n        var self = productLayoutFavoriteContainer,\n            item;\n\n        $(\".favorite-wrapper\").on(\"click\", function() {\n            //No favorited class.\n            if (!$(this).hasClass(\"favorited\")) {\n                item = UtilityContainer.buyButton_to_Json($(this).parent().find(\".buybutton\"));\n                localStorage.setItem(\"_wish_product \" + item.product, JSON.stringify(item));\n\n                $(this).addClass(\"favorited\");\n\n                self.setWishlistBadgeQuantity();\n            }\n            else\n            //Has a favorited class. We remove it, then delete the element from local Storage.\n            {\n                self.removeFromFavorite($(this), self);\n            }\n        });\n    },\n\n    /**\n     * Persist the heart icon next to products already marked as wished.\n     *\n     */\n    persistFavorite: function() {\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0) {\n                for(var j = 0; j<$(\".favorite-wrapper\").length; j++)\n                {\n                    if(JSON.parse(localStorage.getItem(localStorage.key(i))).product === parseInt($(\".favorite-wrapper\")[j].dataset.product))\n                    {\n                        $(\".favorite-wrapper\")[j].className += \" favorited\";\n                    }\n                }\n            }\n        };\n    },\n\n    /**\n     * Delete the clicked element from the wish list.\n     *\n     * @param context\n     */\n    removeFromFavorite: function (element, context) {\n        element.removeClass(\"favorited\");\n        localStorage.removeItem(\"_wish_product \" + element.data(\"product\"));\n        context.setWishlistBadgeQuantity();\n    },\n\n    init: function () {\n        var self = productLayoutFavoriteContainer;\n\n\n        self.addToFavorite();\n        self.persistFavorite();\n        self.fadeInFavoriteIcon();\n        self.setWishlistBadgeQuantity();\n    }\n}","/**\n * Object responsible for the view component of each category page.\n *\n * @type {{blurBackground: Function, init: Function}}\n */\nvar categoryContainer = {\n\n    /**\n     * Blurs the background of each category's page header.\n     *\n     */\n    blurBackground: function () {\n        $(\".category-header\").blurjs({\n            source: \".category-header\"\n        });\n    },\n\n\n    // SORTING FEATURE\n    /**\n     * TODO: REFACTOR ALL LOGIC INTO ITS OWN CONTAINER\n     *\n     */\n    itemsPerPage: function () {\n        $(\".items-per-page .item\").on(\"click\", function() {\n            categoryContainer.URL_add_parameter(\"per_page\", $(this).data(\"sort\"));\n        });\n    },\n\n    sortBy: function () {\n        $(\".sort-by .item\").on(\"click\", function() {\n            categoryContainer.URL_add_parameter(\"order\", $(this).data(\"sort\"));\n        })\n    },\n\n\n    // FILTERING FEATURE\n    priceUpdate: function() {\n\n    },\n\n    toggleLayout: function () {\n        var $container = $(\".layout-toggle-container\"),\n            $product = $(\".dense_product\"),\n            $product_img = $(\".product-image\"),\n            $product_buybutton = $(\".dense_product .buybutton\");\n\n        $(\"#list-layout, #grid-layout\").on(\"click\", function () {\n\n            if($container.hasClass(\"grid-layout\"))\n            {\n                // List layout\n                $container.removeClass(\"grid-layout\").addClass(\"list-layout\");\n\n                $product.removeClass(\"col-xs-6 col-sm-4 col-md-3 text-center no-border\")\n                    .addClass(\"col-xs-12 col-sm-12 col-md-12 border-bottom padding-1\");\n\n                $product_img.removeClass(\"img-responsive center-block\").addClass(\"pull-left\").css(\"margin-right\", \"5%\");\n\n                $product_buybutton.css(\"margin-top\", \"3%\");\n\n\n                $(this).toggleClass(\"active\");\n            }\n            else if ($container.hasClass(\"list-layout\"))\n            {\n                // Grid layout\n                $container.removeClass(\"list-layout\").addClass(\"grid-layout\");\n\n                $product.removeClass(\"col-xs-12 col-sm-12 col-md-12 border-bottom padding-1\").\n                    addClass(\"col-xs-6 col-sm-4 col-md-3 text-center no-border\");\n\n                $product_img.addClass(\"img-responsive center-block\").removeClass(\"pull-left\").css(\"margin-right\", \"0\");\n\n                $product_buybutton.css(\"margin-top\", \"0\");\n\n                $(this).toggleClass(\"active\");\n            }\n        })\n    },\n\n\n    // HELPER FUNCTION : TO BE MOVED IN UTILITYCONTAINER\n    // Courtesy of http://stackoverflow.com/a/1917916\n    URL_add_parameter: function(key, value){\n        key = escape(key); value = escape(value);\n\n        var kvp = document.location.search.substr(1).split('&');\n        if (kvp == '') {\n            document.location.search = '?' + key + '=' + value;\n        }\n        else {\n\n            var i = kvp.length; var x; while (i--) {\n                x = kvp[i].split('=');\n\n                if (x[0] == key) {\n                    x[1] = value;\n                    kvp[i] = x.join('=');\n                    break;\n                }\n            }\n\n            if (i < 0) { kvp[kvp.length] = [key, value].join('='); }\n\n            //this will reload the page, it's likely better to store this until finished\n            document.location.search = kvp.join('&');\n        }\n    },\n\n    init: function () {\n        var self = categoryContainer;\n\n        self.blurBackground();\n        self.itemsPerPage();\n        self.sortBy();\n        self.toggleLayout();\n    }\n\n}","/**\n * Object responsible for the view component of the wish list page.\n * Logic handled in dev/actions/site/wishlist-logic.js\n *\n * @type {{setNumberOfProductsInHeader: Function, init: Function}}\n */\nvar wishlistContainer = {\n\n    /**\n     * Sets the number of products in the header (singular / plural).\n     *\n     */\n    setNumberOfProductsInHeader: function() {\n        var quantity = \"\";\n        UtilityContainer.getNumberOfProductsInWishlist() == 0 || UtilityContainer.getNumberOfProductsInWishlist() == 1 ? quantity+= (UtilityContainer.getNumberOfProductsInWishlist() + \"  item \") : quantity += (UtilityContainer.getNumberOfProductsInWishlist() + \"  items \");\n        $(\"#quantity-wishlist\").text(quantity);\n    },\n\n\n    init: function() {\n        var self = wishlistContainer;\n\n        self.setNumberOfProductsInHeader();\n    }\n}","/**\n * Utility object containing various utility functions...\n * Self Explanatory duh.\n *\n * @type {{getProductsFromLocalStorage: Function, getNumberOfProductsInWishlist: Function, getNumberOfProducts: Function, getProductsPriceFromLocalStorage: Function, removeAllProductsFromLocalStorage: Function, getShippingFromForm: Function, buyButton_to_Json: Function, populateCountry: Function, validateEmptyFields: Function, validateEmail: Function, validatePostCode: Function, validateEmptyCart: Function, addErrorClassToFields: Function, addErrorClassToFieldsWithRules: Function, addFadeOutUpClass: Function, removeErrorClassFromFields: Function, getCheapestShippingMethod: Function, getTaxes: Function, getShipmentTaxes: Function, getCartTaxes: Function, getCartTotal: Function}}\n */\nvar UtilityContainer = {\n    /**\n     * Utility function for getting all the products in localStorage.\n     * Returns an array containing their id, their quantity and their price.\n     *\n     * @returns {Array}\n     */\n    getProductsFromLocalStorage : function() {\n        var res = [];\n\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\n            {\n                var product = JSON.parse(localStorage.getItem(localStorage.key(i))),\n                    productId = product.product,\n                    productQuantity = product.quantity,\n                    productPrice = product.price;\n\n                res.push({\n                    id: productId,\n                    quantity: productQuantity,\n                    price : productPrice\n                });\n            }\n        }\n\n        return res;\n    },\n\n    /**\n     * Utility function returning the number of products present in the wish list.\n     *\n     * @returns {number}\n     */\n    getNumberOfProductsInWishlist : function() {\n        var total = 0;\n\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0)\n            {\n                total += JSON.parse(localStorage.getItem(localStorage.key(i))).quantity;\n            }\n        }\n\n        return total;\n    },\n\n    /**\n     * Utility function returning the number of products present in the cart.\n     *\n     * @returns {number}\n     */\n    getNumberOfProducts : function() {\n        var total = 0;\n\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\n            {\n                total += JSON.parse(localStorage.getItem(localStorage.key(i))).quantity;\n            }\n        }\n\n        return total;\n    },\n\n    /**\n     * Utility function to get the total price from all products present in localStorage.\n     *\n     * @returns {number}\n     */\n    getProductsPriceFromLocalStorage : function() {\n        var total = 0,\n            products = UtilityContainer.getProductsFromLocalStorage();\n\n        for(var i= 0, length = products.length; i<length; i++)\n        {\n            total += (products[i].price * products[i].quantity);\n        }\n\n        return total;\n    },\n\n    /**\n     * Utility function to delete all products from localStorage.\n     *\n     */\n    removeAllProductsFromLocalStorage : function() {\n        for(var i= 0, length = localStorage.length; i<length; i++) {\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\n            {\n                localStorage.removeItem(localStorage.key(i));\n            }\n        }\n    },\n\n    /**\n     * Utility function fo getting the country, the postal code and the province (if any) of the user.\n     *\n     * @returns {{country: (*|jQuery), postcode: (*|jQuery), province: (*|jQuery)}}\n     */\n    getShippingFromForm : function() {\n        return res = {\n            \"country\" : $(\"#shippingCountry\").val(),\n            \"postcode\" : $(\"#shippingPostcode\").val(),\n            \"province\" : $(\"#shippingProvince\").val(),\n            \"line1\" : $(\"#shippingAddress1\").val(),\n            \"line2\" : $(\"#shippingAddress2\").val(),\n            \"name\" : $(\"#shippingFirstname\").val() + \" \" + $(\"#shippingLastname\").val(),\n            \"city\" : $(\"#shippingCity\").val(),\n            \"phone\" : $(\"#shippingTel\").val()\n        };\n    },\n\n    /**\n     * parse the information from a buy button into a readable json format\n     *\n     * @param item\n     * @returns {{product: *, name: *, price: *, thumbnail: *, thumbnail_lg: *, quantity: number}}\n     */\n    buyButton_to_Json : function(item) {\n        return {\n            \"product\" : item.data(\"product\"),\n            \"name\" : item.data(\"name\"),\n            \"price\" : item.data(\"price\"),\n            \"thumbnail\" : item.data(\"thumbnail\"),\n            \"thumbnail_lg\" : item.data(\"thumbnail_lg\"),\n            \"quantity\" : parseInt(item.data(\"quantity\")),\n            \"link\" : item.data(\"link\")\n        }\n    },\n\n    /**\n     * Utility object used to populate a select list (#country) with a list of country (json formatted) in the appropriate language.\n     *\n     */\n    populateCountry : function (lang) {\n        var file = \"/js/data/country-list.\" + lang + \".json\",\n            listItems = '',\n            $country = $(\"#country\");\n\n        $.getJSON(file, function(data) {\n            $.each(data, function(key, val) {\n                if (key == \"CA\") {\n                    listItems += \"<option value='\" + key + \"' selected>\" + val + \"</option>\";\n                }\n                else {\n                    listItems += \"<option value='\" + key + \"'>\" + val + \"</option>\";\n                }\n            });\n            $country.append(listItems);\n        });\n    },\n\n    /**\n     * Check if the fields passed in the argument are empty or not.\n     *\n     * @param emptyFields\n     * @returns {boolean}\n     */\n    validateEmptyFields: function(emptyFields) {\n        var passed = true;\n        for(var i= 0, length = emptyFields.length; i<length; i++) {\n            if (emptyFields[i].val() == \"\")\n            {\n                passed = false;\n                break;\n            }\n        }\n        return passed;\n    },\n\n    /**\n     * Validate the email address passed as the argument.\n     *\n     * @param email\n     * @returns {boolean}\n     */\n    validateEmail: function(email) {\n        var re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n        return re.test(email);\n    },\n\n    /**\n     * Validate a CA or US postal code.\n     *\n     * @param postcode\n     * @param country\n     * @returns {boolean}\n     */\n    validatePostCode: function(postcode, country) {\n        if (country == \"CA\")\n            return postcode.match(/^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} ?\\d{1}[A-Z]{1}\\d{1}$/i) ? true : false;\n        else if (country == \"US\")\n            return postcode.match(/^\\d{5}(?:[-\\s]\\d{4})?$/) ? true : false;\n        else\n            return true;\n    },\n\n    /**\n     * Returns true if the cart is empty, false otherwise.\n     *\n     * @returns {*}\n     */\n    validateEmptyCart : function () {\n        var empty;\n        UtilityContainer.getProductsPriceFromLocalStorage() === 0 ?  empty = true : empty = false;\n\n        return empty;\n    },\n\n    /**\n     * Add .has-error to parent class + animate the relevant fields.\n     *\n     * @param fields\n     */\n    addErrorClassToFields: function(fields) {\n        for(var i= 0, length = fields.length; i<length; i++)\n        {\n            if (fields[i].val() == \"\")\n            {\n                fields[i].parent().addClass(\"has-error\");\n                fields[i].addClass('animated shake').bind('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\n                    $(this).removeClass(\"animated\");\n                    $(this).removeClass(\"shake\");\n                    $(this).unbind();\n                });\n            }\n        }\n    },\n\n    /**\n     * Same as addErrorClassToFields but accept a single input (ie. specific rules have to be applied: email / postal code / ...\n     *\n     * @param input\n     */\n    addErrorClassToFieldsWithRules: function(input) {\n        input.parent().addClass(\"has-error\");\n        input.addClass('animated shake').bind('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\n            $(this).removeClass(\"animated\");\n            $(this).removeClass(\"shake\");\n            $(this).unbind();\n        });\n    },\n\n    /**\n     * Adds a fadeOutUp class then hide the element passed as an argument.\n     *\n     * @param $element\n     */\n    addFadeOutUpClass: function ($element) {\n        $element.addClass(\"animated fadeOutUp\").delay(1000).queue(function() {\n            $(this).addClass(\"hidden\").clearQueue();\n        });\n    },\n\n    /**\n     * Remove .has-error from fields\n     *\n     * @param fields\n     */\n    removeErrorClassFromFields: function(fields) {\n        for(var i= 0, length = fields.length; i<length; i++)\n        {\n            if (fields[i].val() != \"\" && fields[i].parent().hasClass(\"has-error\"))\n            {\n                fields[i].parent().removeClass(\"has-error\");\n            }\n        }\n    },\n\n    /**\n     * Returns the method and the price of the cheapest shipping services.\n     *\n     * @param data\n     * @returns {{fare: *, method: (*|string)}}\n     */\n    getCheapestShippingMethod : function(data) {\n        var availableShipment = data.shipping.services,\n            sortedShipmentByPrice = [];\n\n        for(var i= 0, length = availableShipment.length; i<length; i++)\n        {\n            sortedShipmentByPrice.push(availableShipment[i]);\n        }\n\n        sortedShipmentByPrice.sort(function(a,b) {\n            return a.price - b.price\n        });\n\n        return {\n            fare: sortedShipmentByPrice[0].price,\n            method: sortedShipmentByPrice[0].method\n        }\n    },\n\n    /**\n     * Get the total taxes (TPS/TVQ or TVH or TPS or null) + shipping method taxes.\n     *\n     * @param data\n     * @returns {number}\n     */\n    getTaxes : function(data) {\n        var taxes = 0,\n            dataTaxesLength = data.taxes.length;\n\n        if (dataTaxesLength != 0)\n        {\n            for(var i=0; i<dataTaxesLength; i++)\n            {\n                taxes += data.taxes[i].amount;\n            }\n        }\n\n        return taxes.toFixed(2);\n    },\n\n    /**\n     * Get the relevant taxes according to the chosen shipping method.\n     *\n     * @param serviceCode\n     * @param data\n     * @returns {string}\n     */\n    getShipmentTaxes : function(serviceCode, data) {\n        var taxes = 0;\n        console.log(data);\n\n        for(var i=0; i<data.shipping.services.length; i++)\n        {\n            if(data.shipping.services[i].method == serviceCode)\n            {\n                if (data.shipping.services[i].taxes.length != 0)\n                {\n                    for(var j=0; j<data.shipping.services[i].taxes.length; j++)\n                    {\n                        taxes += data.shipping.services[i].taxes[j].amount;\n                    }\n                }\n            }\n        }\n        return taxes.toFixed(2);\n    },\n\n    /**\n     * Returns appropriate taxes according to the shipping method.\n     *\n     * @param serviceCode\n     * @param data\n     * @returns {number}\n     */\n    getCartTaxes : function(serviceCode, data) {\n        var taxes = parseFloat(UtilityContainer.getTaxes(data)),\n            shippingTaxes = parseFloat(UtilityContainer.getShipmentTaxes(serviceCode, data)),\n            totalTaxes = taxes + shippingTaxes;\n\n        return totalTaxes;\n    },\n\n    /**\n     * Returns total price (subtotal + taxes + shipping taxes)\n     * Saves total in sessionStorage (for live update)\n     *\n     * @param data\n     * @returns {string}\n     */\n    getCartTotal : function(serviceCode, data) {\n        var taxes = parseFloat(UtilityContainer.getCartTaxes(serviceCode.method, data)),\n            shipping = parseFloat(UtilityContainer.getCheapestShippingMethod(data).fare),\n            subtotal = parseFloat(UtilityContainer.getProductsPriceFromLocalStorage()),\n            total = (taxes + shipping + subtotal).toFixed(2);\n\n        return total;\n    }\n}\n\n","/**\n * Container responsible for initializing the checkout page.\n * Overall logic is handled in js/dev/actions/checkout/*.js\n * View component is handled in js/dev/components/checkout/*.js\n *\n * @type {{estimateButtonClick: Function, init: Function}}\n */\nvar checkoutInitContainer = {\n\n    /**\n     * Event triggered when the \"Continue\" button is hit.\n     * If the input fields entered are appropriate, make the ajax call to \"/api/estimate\".\n     * If they are not, display the relevant error message(s)\n     *\n     */\n    estimateButtonClick : function() {\n        $(\"#estimateButton\").on(\"click\", function(e) {\n            var email = $(\"#customer_email\"),\n                phone = $(\"#customer_phone\"),\n                shippingFirstName = $(\"#shippingFirstname\"),\n                shippingLastName = $(\"#shippingLastname\"),\n                shippingAddress1 = $(\"#shippingAddress1\"),\n                shippingCity = $(\"#shippingCity\"),\n                shippingCountry = $(\"#shippingCountry\").val(),\n                shippingPostcode = $(\"#shippingPostcode\"),\n                billingFirstName = $(\"#billingFirstname\"),\n                billingLastName = $(\"#billingLastname\"),\n                billingAddress1 = $(\"#billingAddress1\"),\n                billingCity = $(\"#billingCity\"),\n                billingCountry = $(\"#billingCountry\").val(),\n                billingPostcode = (\"#billingPostcode\"),\n                shippingInformation = {\n                    \"country\" : shippingCountry,\n                    \"postcode\" : $(\"#shippingPostcode\").val(),\n                    \"postcodeInput\" : $(\"#shippingPostcode\")\n                },\n                fields = [\n                    shippingFirstName,\n                    shippingLastName,\n                    shippingAddress1,\n                    shippingCity,\n                    billingFirstName,\n                    billingLastName,\n                    billingAddress1,\n                    billingCity,\n                    email,\n                    phone\n                ];\n\n            e.preventDefault();\n\n            //Auto fill billing address if checkbox is checked.\n            billingContainer.autoFillBillingAddress(fields, shippingInformation.postcodeInput);\n\n            //Build the billing information object (from auto fill or entered by hand)\n            var billingInformation = {\n                \"country\" : billingCountry,\n                \"postcode\" : $(\"#billingPostcode\").val(),\n                \"postcodeInput\" : $(\"#billingPostcode\")\n            };\n\n            //Validate all fields and make the ajax call!\n            checkoutValidationContainer.init(fields, email, shippingInformation, billingInformation);\n        });\n    },\n\n    init: function () {\n        /**\n         * Populate select lists and set up billing address container behaviour.\n         * Set the form focus on first name field\n         *\n         */\n        locationContainer.init();\n        billingContainer.init();\n        $(\"#shippingFirstname\").focus();\n\n        var self = checkoutInitContainer;\n        self.estimateButtonClick();\n    }\n}","/**\n * Object responsible for handling the overall logic of the checkout process.\n * After clicking on \"Proceed to checkout\", create a cookie and make an ajax call to get all the data before redirecting the user to the payment page.\n *\n * When a user changes the quantity or deletes an item, fadeOut the shipping estimate and payment panel. Replace the Continue button with \"Update\".\n *\n * @type {{createOrdersCookie: Function, placeOrderAjaxCall: Function, init: Function}}\n */\nvar checkoutLogicContainer = {\n\n    /**\n     * Create a localStorage object containing the id and the verification code.\n     *\n     * @param data\n     */\n    createOrdersCookie: function(data) {\n        var paymentId = data.id,\n            paymentVerification = data.verification;\n\n        Cookies.set(\"_unpaid_orders\", JSON.stringify( {\n            id : paymentId,\n            verification : paymentVerification\n        }));\n    },\n\n    /**\n     * Makes an ajax call to api/orders with the values from the form\n     *\n     * @param self\n     */\n    placeOrderAjaxCall: function(self) {\n        $.ajax({\n            method: \"POST\",\n            url: ApiEndpoints.placeOrder,\n            data: $(\"#cart_form\").serialize(),\n            cache: false,\n            success: function(data) {\n                console.log(data);\n\n                self.createOrdersCookie(data);\n\n                //redirect the user to the checkout page if he backs from the payment page\n                history.pushState({data: data}, \"Checkout \",\"/dev/cart\");\n\n                //Redirect to success url\n                window.location.replace(data.payment_details.payment_url);\n            },\n            error: function(xhr, e) {\n                console.log(xhr);\n                console.log(e);\n            }\n        })\n\n    },\n\n    /**\n     * Hide the panels by fading them up then adding a hidden class.\n     *\n     * @param self\n     */\n    hidePanels: function (self) {\n        $(\".quantity, #shippingPostcode, #shippingCity\").on(\"change\", function () {\n            UtilityContainer.addFadeOutUpClass($(\"#estimate\"));\n            UtilityContainer.addFadeOutUpClass($(\"#payment\"));\n\n            self.updateEstimateButtonValue();\n        });\n\n        $(\".close-button\").on(\"click\", function() {\n            UtilityContainer.addFadeOutUpClass($(\"#estimate\"));\n            UtilityContainer.addFadeOutUpClass($(\"#payment\"));\n\n            self.updateEstimateButtonValue();\n        });\n    },\n\n    /**\n     * Updates the estimate button with \"Update\" while making it bouncy ;)\n     *\n     */\n    updateEstimateButtonValue: function() {\n        $(\"#estimateButton\")\n            .removeClass(\"btn-one animated rubberBand\")\n            .addClass(\"animated rubberBand btn-three\")\n            .text(Localization.update);\n    },\n\n    /**\n     * Register methods for outside calling.\n     *\n     */\n    init: function() {\n        var self = checkoutLogicContainer;\n\n        $(\"#checkoutButton\").on(\"click\", function (e) {\n            e.preventDefault();\n\n            $('#checkoutButton').html('<i class=\"fa fa-spinner fa-spin\"></i>');\n\n            self.placeOrderAjaxCall(self);\n\n        });\n\n        self.hidePanels(self);\n    }\n}","/**\n * Object responsible for validating all the information entered by the user.\n * Will trigger the ajax call only when all the inputs entered match their validation rules.\n *\n * @type {{removeErrorClassFromEmail: Function, removeErrorClassFromPostcode: Function, init: Function}}\n */\nvar checkoutValidationContainer = {\n\n    removeErrorClassFromEmail: function(email) {\n        if (UtilityContainer.validateEmail(email.val()) && email.parent().hasClass(\"has-error\"))\n            email.parent().removeClass(\"has-error\");\n    },\n\n    removeErrorClassFromPostcode: function(postcode, country) {\n        if (UtilityContainer.validatePostCode(postcode.val(), country) && postcode.parent().hasClass(\"has-error\"))\n            postcode.parent().removeClass(\"has-error\");\n    },\n\n    /**\n     * If all validation pass, spin the button, clean the shipment table and trigger the ajax call.\n     * If there are errors, warn the users about which inputs is faulty.\n     *\n     * @param fields\n     * @param email\n     * @param postcode\n     * @param country\n     */\n    init : function(fields, email, shippingInformation, billingInformation) {\n        var self = checkoutValidationContainer;\n\n        if (UtilityContainer.validateEmptyFields(fields)\n            && UtilityContainer.validateEmail(email.val())\n            && UtilityContainer.validatePostCode(shippingInformation.postcode, shippingInformation.country)\n            && UtilityContainer.validatePostCode(billingInformation.postcode, billingInformation.country))\n        {\n            $('#estimateButton').html('<i class=\"fa fa-spinner fa-spin\"></i>');\n\n            //delete previously uploaded shipping method (if any)\n            if($(\"#estimate .table-striped\").children().length > 0) {\n                $(\"#estimate .table-striped tbody\").empty();\n            }\n\n            estimateContainer.ajaxCall();\n        }\n        else\n        {\n            UtilityContainer.addErrorClassToFields(fields);\n\n            if(!UtilityContainer.validatePostCode(shippingInformation.postcode, shippingInformation.country))\n            {\n                UtilityContainer.addErrorClassToFieldsWithRules(shippingInformation.postcodeInput);\n            }\n\n            if(!UtilityContainer.validatePostCode(billingInformation.postcode, billingInformation.country))\n            {\n                UtilityContainer.addErrorClassToFieldsWithRules(billingInformation.postcodeInput);\n            }\n\n            if(!UtilityContainer.validateEmail(email.val()))\n            {\n                UtilityContainer.addErrorClassToFieldsWithRules(email);\n                $(\"#why_email\").removeClass(\"hidden\").addClass(\"animated bounceInRight\").tooltip();\n            }\n\n        }\n\n        UtilityContainer.removeErrorClassFromFields(fields);\n        self.removeErrorClassFromEmail(email);\n        self.removeErrorClassFromPostcode(shippingInformation.postcodeInput, shippingInformation.country);\n        self.removeErrorClassFromPostcode(billingInformation.postcodeInput, billingInformation.country);\n    }\n}\n","/**\n * Object responsible for the overall logic (CRUD) of the cart drawer.\n * Layout handled in dev/components/layout/cart-drawer.js\n *\n * @type {{$el: {$list: (*|jQuery|HTMLElement)}, addItem: Function, storeItem: Function, loadItem: Function, deleteItem: Function, modifyQuantity: Function, modifyQuantityBeforeBuying: Function, setBadgeQuantity: Function, setQuantityCookie: Function, setCartSubtotal: Function, setCartShipping: Function, setCartTaxes: Function, setCartTotal: Function, ajaxCall: Function, updateAjaxCall: Function, init: Function}}\n */\nvar cartLogicContainer = {\n    /**\n     * Cache a set of elements commonly used (to be updated)\n     */\n    $el : {\n        $list : $(\".cart-items-list\")\n    },\n\n    /**\n     * Add an item in the list.\n     *\n     * @param item JSON format converted from attributes on the .buybutton\n     */\n    addItem : function(item) {\n        var price = (parseInt(item.quantity) * parseFloat(item.price)).toFixed(2);\n\n        var sidebarElement = '<li class=\"w-box animated bounceInDown\" data-product=\"' + item.product + '\" data-quantity=1>' +\n            '<div class=\"col-xs-3 text-center\"><img src=' + item.thumbnail_lg + ' class=\"img-responsive\"></div>' +\n            '<div class=\"col-xs-9 no-padding-left\">' +\n            '<div class=\"row\"><div class=\"col-xs-10\"><h3 class=\"product-name\">' + item.name + '</h3></div><div class=\"col-xs-2\"><h4 class=\"text-right\"><i class=\"fa fa-trash fa-1 close-button\"><span class=\"sr-only\">Remove Item</span></i></h4></div></div>' +\n            '<div class=\"row\"><div class=\"col-xs-8\">' +\n            '<div class=\"input-group\"><label for=\"products[' + item.product + '][quantity]\" class=\"sr-only\">'+ item.name + \":\" + item.price +'</label>' +\n            '<input type=\"number\" class=\"quantity form-control input-sm\" min=\"1\" step=\"1\" value=\"' + item.quantity + '\" name=\"products[' + item.product + '][quantity]\">' +\n            '<span class=\"input-group-addon update_quantity_indicator\"><i class=\"fa\" hidden><span class=\"sr-only\">' + \"Update quantity\" + '</span></i></span></div></div>' +\n            '<div class=\"col-xs-4 product-price text-right\" data-price=\"' + item.price + '\">$' + price  + '<span class=\"sr-only\">' + $ + item.price + '</span></div></div>' +\n            '<input type=\"hidden\" name=\"products[' + item.product + '][id]\" value=\"' + item.product + '\"/> ' +\n            '</div>' +\n            '</li>';\n\n        if (!$(\".cart-items-list [data-product='\" + item.product + \"']\").length){\n            cartLogicContainer.$el.$list.append(sidebarElement);\n        }\n\n    },\n\n    /**\n     * Store a product in localStorage\n     * Update badge quantity\n     * Create/update a quantity cookie\n     *\n     * @param item JSON format converted from attributes on the .buybutton\n     */\n    storeItem : function(item) {\n        localStorage.setItem(\"_product \" + item.product, JSON.stringify(item));\n        cartLogicContainer.setBadgeQuantity();\n        cartLogicContainer.setQuantityCookie();\n        cartLogicContainer.setCartSubtotal();\n        cartLogicContainer.setCartTotal();\n        cartLogicContainer.updateAjaxCall();\n    },\n\n    /**\n     * Load a list of items previously bought into the cart.\n     * If there is no item in localStorage starting with the key \"_product\", then nothing is loaded.\n     */\n    loadItem : function() {\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\n            {\n                cartLogicContainer.addItem(JSON.parse(localStorage.getItem(localStorage.key(i))));\n            }\n        }\n    },\n\n    /**\n     * Delete an item from the cart drawer list.\n     * Remove it from the DOM.\n     * Delete the object on localStorage.\n     * Set Badge quantity accordingly.\n     * Update Cookie quantity accordingly.\n     */\n    deleteItem: function() {\n        $(document).on('click', \".close-button\", function() {\n            $parent = $(this).closest(\".animated\").addClass(\"animated bounceOutLeft\");\n            $parent.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\n                $(this).remove();\n            });\n\n            localStorage.removeItem(\"_product \" + $(this).closest(\".animated\").data(\"product\"));\n\n            cartLogicContainer.setBadgeQuantity();\n            cartLogicContainer.setQuantityCookie();\n            cartLogicContainer.setCartSubtotal();\n            cartLogicContainer.setCartTotal();\n            cartLogicContainer.updateAjaxCall();\n\n        });\n    },\n\n    /**\n     * Modify the quantity of a product in the cart\n     * Update its price label accordingly\n     * Update the localStorage\n     * Set badge quantity\n     * Update Cookie quantity\n     */\n    modifyQuantity : function() {\n        $(\"#cart-items\").on(\"change\", \".quantity\", function() {\n            $container = $(this).closest(\"li\");\n            $product_price = $container.find(\".product-price\");\n\n            //update the total value\n            $product_price.text(\"$\" + ($product_price.data(\"price\") * $(this).val()).toFixed(2));\n\n            //retrieve old data from old object then update the quantity and finally update the object\n            var oldData = JSON.parse(localStorage.getItem(\"_product \" + $container.data(\"product\")));\n            oldData.quantity = parseInt($(this).val());\n            localStorage.setItem(\"_product \" + $container.data(\"product\"), JSON.stringify(oldData));\n\n            cartLogicContainer.setBadgeQuantity();\n            cartLogicContainer.setQuantityCookie();\n            cartLogicContainer.setCartSubtotal();\n            cartLogicContainer.setCartTotal();\n            cartLogicContainer.updateAjaxCall();\n\n        });\n    },\n\n    /**\n     * Modify the quantity in a product page before buying\n     * Only used in a product page.\n     * Assuming the DOM has (and will keep) this structure:\n     *      .form-group\n     *          #item-quantity\n     *      .buybutton\n     */\n    modifyQuantityBeforeBuying : function() {\n        $(\"#item_quantity\").on(\"change\", function() {\n            $(this).closest(\".form-group\").next().data(\"quantity\", parseInt($(this).val()));\n        });\n    },\n\n    /**\n     * Update the value of #cart_badge when adding or deleting elements\n     */\n    setBadgeQuantity : function() {\n        var total = UtilityContainer.getNumberOfProducts();\n\n        $(\".cart_badge\").text(total);\n    },\n\n    /**\n     * Create or Update a cookie with the quantity present in the cart.\n     * The value of the cookie is encoded in base64 (btoa)\n     */\n    setQuantityCookie : function () {\n        var number = UtilityContainer.getNumberOfProducts();\n\n        if (Cookies.get(\"quantityCart\") == undefined || number === 0)\n        {\n            Cookies.set(\"quantityCart\", btoa(\"0\"));\n        }\n        else {\n            Cookies.set(\"quantityCart\", btoa(number));\n        }\n    },\n\n    /**\n     * Update subtotal when users put something in or out of their cart.\n     *\n     */\n    setCartSubtotal : function () {\n        $(\"dd#subtotal\").text(\"$\" + UtilityContainer.getProductsPriceFromLocalStorage().toFixed(2));\n    },\n\n    /**\n     * Set shipping field\n     *\n     * @param data\n     */\n    setCartShipping : function(data) {\n        $(\"dd#shipping\").text(\"$\" + (UtilityContainer.getCheapestShippingMethod(data).fare));\n    },\n\n\n    /**\n     * Set taxes field\n     *\n     * @param taxes\n     */\n    setCartTaxes : function(taxes) {\n        $(\"#taxes\").text(\"$\" + taxes.toFixed(2));\n    },\n\n    /**\n     * Set total field\n     *\n     * @param total\n     */\n    setCartTotal : function (total) {\n        $(\".cart-total dl\").show();\n        $(\".calculation.total dd\").text(\"$ \" + total);\n    },\n\n\n\n    /**\n     * Ajax call to /api/estimate after all verifications have passed.\n     *\n     */\n    ajaxCall : function() {\n        $.ajax({\n            type: \"POST\",\n            url: \"/api/estimate\",\n            data: {\n                products: UtilityContainer.getProductsFromLocalStorage(),\n                shipping_address: {\n                    \"postcode\": $(\"#postcode\").val(),\n                    \"country\": $(\".price-estimate #country\").val(),\n                    \"province\" : \"QC\"\n                }\n            },\n            success: function(data) {\n                cartLogicContainer.setCartShipping(data);\n                cartLogicContainer.setCartTaxes(UtilityContainer.getCartTaxes(UtilityContainer.getCheapestShippingMethod(data).method, data));\n                cartLogicContainer.setCartTotal(UtilityContainer.getCartTotal(UtilityContainer.getCheapestShippingMethod(data), data));\n            },\n            error: function(e) {\n                console.log(e);\n            },\n            complete : function() {\n                $(\".price-estimate\").fadeOut(300, function() {\n                    $(\".calculation.hidden\").fadeIn().removeClass(\"hidden\");\n                    $(\".cart-total.hidden\").fadeIn().removeClass(\"hidden\");\n                });\n            }\n        });\n    },\n\n    /**\n     * Display an update panel when changes are made to the cart drawer.\n     *\n     */\n    updateAjaxCall : function() {\n        //If the total is displayed, it means that there's already been an ajax call: we have to display an update!\n        if(!$(\".total\").parent().hasClass(\"hidden\")) {\n            $(\".cart-total dl\").hide();\n            $(\".price-estimate-update\").fadeIn('fast');\n        }\n\n        $(\".changeLocation\").click(function() {\n            $(\"dl.calculation\").addClass(\"hidden\");\n            $(\".getEstimate\").html(Localization.calculate);\n            $(\".price-estimate-update\").fadeOut();\n            $(\".price-estimate\").fadeIn();\n\n        });\n\n        //TODO: Refactor the arbitrary xxxxms to an actual end of ajax call.\n\n        $(\".price-estimate-update .getEstimate\").click(function() {\n            if(!UtilityContainer.validateEmptyCart()) {\n                setTimeout(function() {\n                    $(\".price-estimate-update .getEstimate\").parent().fadeOut(300);\n                    $(\".price-estimate-update .getEstimate\").html(Localization.calculate);\n                }, 2250);\n            }\n        });\n\n    },\n\n    init : function() {\n        cartLogicContainer.setBadgeQuantity();\n        cartLogicContainer.loadItem();\n        cartLogicContainer.deleteItem();\n        cartLogicContainer.modifyQuantity();\n        cartLogicContainer.modifyQuantityBeforeBuying();\n        cartLogicContainer.setQuantityCookie();\n        cartLogicContainer.setCartSubtotal();\n    }\n};\n","/**\n * Container responsible for initializing the cart drawer feature.\n *\n * @type {{buyButtonClick: Function, getEstimateClick: Function, init: Function}}\n */\nvar cartDrawerInitContainer = {\n\n    /**\n     * Event triggered when a buy button is clicked.\n     *\n     */\n    buyButtonClick : function () {\n        $(\"body\").on(\"click\", \".buybutton\", function() {\n            cartDisplayContainer.animateIn();\n            cartLogicContainer.addItem(UtilityContainer.buyButton_to_Json($(this)));\n            cartLogicContainer.storeItem(UtilityContainer.buyButton_to_Json($(this)));\n\n            //We remove the \"Your cart is empty\" message at the top every time we add an item.\n            //TODO : Maybe improve it?\n            $(\"#cart-items .empty-cart\").addClass(\"hidden\");\n        });\n    },\n\n    /**\n     * Event triggered when the Calculate button (to get a price estimate) is clicked.\n     *\n     */\n    getEstimateClick: function () {\n        $(\".getEstimate\").on(\"click\", function() {\n            //Fields validation + Empty cart validation.\n            if(UtilityContainer.validatePostCode($(\"#postcode\").val(), $(\".price-estimate #country\").val())\n                && UtilityContainer.validateEmptyFields([$(\"#postcode\")])\n                && !UtilityContainer.validateEmptyCart()) {\n\n                $(this).html('<i class=\"fa fa-spinner fa-spin\"></i>');\n\n                cartLogicContainer.ajaxCall();\n\n            }\n            else if (UtilityContainer.validateEmptyCart()) {\n                $(\"#cart-items .empty-cart\").removeClass(\"hidden\");\n            }\n            else {\n                UtilityContainer.addErrorClassToFieldsWithRules($(\"#postcode\"));\n            }\n        });\n    },\n\n    init: function () {\n        cartDisplayContainer.init();\n        cartLogicContainer.init();\n        cartDisplayContainer.setCartItemsHeight();\n\n        var self = cartDrawerInitContainer;\n        self.buyButtonClick();\n        self.getEstimateClick();\n    }\n\n}\n","/**\n * Container responsible for handling the logic of the wish list page.\n * Layout handled in dev/components/site/wishlist.js\n *\n * @type {{createWishlistElement: Function, renderWishlist: Function, removeWishlistElement: Function, init: Function}}\n */\nvar wishlistLogicContainer = {\n\n    /**\n     * Create a list layout element from the information passed as an argument.\n     *\n     * Rounding to 2 decimals, courtesy of http://stackoverflow.com/a/6134070.\n     *\n     * @param item\n     */\n    createWishlistElement: function(item) {\n        var self = wishlistLogicContainer,\n            element =\n            '<div class=\"col-md-12 list-layout-element\">' +\n            '<div class=\"col-md-2\">' +\n            '<img src=' + item.thumbnail_lg + '>' +\n            '</div>' +\n            '<div class=\"col-md-10\">' +\n            '<button class=\"btn btn-outline btn-danger-outline pull-right btn-lg inline-block padding-side-lg removeFavoriteButton\" data-product=\"' + item.product + '\">Remove from wishlist </button>' +\n            '<button class=\"btn btn-success buybutton pull-right btn-lg inline-block padding-side-lg\"' +\n            'data-product=\"' + item.product + '\"' +\n            'data-price=\"' + item.price + '\"' +\n            'data-thumbnail=\"' + item.thumbnail + '\"' +\n            'data-thumbnail_lg=\"' + item.thumbnail_lg + '\"' +\n            'data-name=\"' + item.name + '\"' +\n            'data-quantity=\"' + item.quantity  + '\"' + \">\" +\n            'Add to cart </button>' +\n            '<a href=' + item.link + '><h4 style=\"margin-top: 5px\">' + item.name + '</h4></a>' +\n            '<h5> $ ' + parseFloat(Math.round(item.price * 100) / 100).toFixed(2) + '</h5>'+\n            '</div>' +\n            '</div>';\n\n        //Localize button (default in english)\n        self.localizeWishlistButton();\n\n        //Append elements\n        $(\".list-layout-element-container\").append(element);\n    },\n\n    /**\n     * Populate the wishlist page with elements created on the fly from localStorage that has their key starting with \"_wish_prod {id}\".\n     * The creation is handled in createWishlistElement function.\n     *\n     */\n    renderWishlist: function() {\n        var self = wishlistLogicContainer;\n\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0)\n            {\n                self.createWishlistElement(JSON.parse(localStorage.getItem(localStorage.key(i))));\n            }\n        }\n    },\n\n    localizeWishlistButton: function() {\n        $(\".list-layout-element .buybutton\").text(Localization.add_cart);\n        $(\".list-layout-element .removeFavoriteButton\").text(Localization.wishlist_remove);\n    },\n\n    /**\n     * Remove the element from the wishlist after a subtle animation.\n     *\n     */\n    removeWishlistElement: function () {\n        $(\".list-layout-element-container\").on(\"click\", \".removeFavoriteButton\", function() {\n            //Animate the element.\n            UtilityContainer.addFadeOutUpClass($(this).closest(\".list-layout-element\"));\n\n            //Delete the element from localStorage.\n            localStorage.removeItem(\"_wish_product \" + $(this).data(\"product\"));\n\n            //Set wishlist header quantity.\n            wishlistContainer.setNumberOfProductsInHeader();\n\n            //Set wishlist badge\n            productLayoutFavoriteContainer.setWishlistBadgeQuantity();\n        });\n    },\n\n    init: function () {\n        var self = wishlistLogicContainer;\n\n        //Calls the layout container (wishlistContainer).\n        wishlistContainer.init();\n\n        //Initialize the logic.\n        self.renderWishlist();\n        self.removeWishlistElement();\n    }\n\n}","/**\n * Entry point of script.\n *\n */\n$(document).ready(function () {\n\n    /**\n     * Sets up the ajax token for all ajax requests\n     *\n     */\n    $.ajaxSetup({\n        headers: {\n            'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\n            'locale': $('html').attr('lang')\n        }\n    });\n\n    /**\n     * Initialize checkout logic.\n     *\n     */\n    checkoutInitContainer.init();\n\n    /**\n     * Initialize cart drawer logic.\n     *\n     */\n    cartDrawerInitContainer.init();\n\n    /**\n     * Initialize category container\n     *\n     */\n    categoryContainer.init();\n\n    /**\n     * Initialize overlay plugin.\n     *\n     */\n    paymentOverlayContainer.init();\n\n    /**\n     * Initialize navigation header.\n     *\n     */\n    headerContainer.init();\n\n    /**\n     * Initialize favorite products feature.\n     *\n     */\n    productLayoutFavoriteContainer.init();\n\n    /**\n     * Initialize wishlist page.\n     *\n     */\n    wishlistLogicContainer.init();\n\n    /**\n     * Global initialization of elements.\n     *\n     */\n    //fancy plugin for product page (quantity input)\n    $(\".input-qty\").TouchSpin({\n        initval: 1\n    });\n\n});"],"sourceRoot":"/source/"}
>>>>>>> Finished v1 of category page
=======
{"version":3,"sources":["billing.js","estimate.js","location.js","payment.js","cart-drawer.js","header.js","payment-overlay.js","product-layout-favorite.js","category.js","wishlist.js","utility.js","checkout-init.js","checkout-logic.js","checkout-validation.js","cart-drawer-logic.js","cart-drawer-init.js","wishlist-logic.js","init.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACthHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvrvMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxhYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxtjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"boukem2.js","sourcesContent":["/**\n * Object responsible for handling billing information.\n *\n * @type {{autoFillBillingAddress: Function, setDifferentBillingAddress: Function, clearBillingAddress: Function, init: Function}}\n */\nvar billingContainer = {\n\n    /**\n     * Fill the billing address with the shipping address.\n     * First parameter is an array of all fields that only need basic validation (empty or not)\n     * Second parameter is an input that requires more advanced verification (postcode)\n     *\n     *\n     * @param fields\n     * @param fieldWithRules\n     */\n    autoFillBillingAddress : function(fields, fieldWithRules) {\n        if($(\".billing-checkbox\").is(\":checked\"))\n        {\n            //We assume here that fieldWithRules is the shipping postcode.\n            $(\"#billing\" + fieldWithRules[0].id.substring(\"shipping\".length, fieldWithRules[0].id.length)).val(fieldWithRules[0].value);\n\n            for(var i= 0, length = fields.length; i<length; i++) {\n                //check if the id has the string \"shipping\".\n                //if it does, delete the shipping prefix and replace it by billing.\n                //Create a new jquery selector and fill it with the value of the shipping one.\n                if (fields[i][0].id.indexOf(\"shipping\") > -1) {\n                    var genericInput = fields[i][0].id.substring(\"shipping\".length, fields[i][0].id.length);\n                    $(\"#billing\" + genericInput).val(fields[i][0].value);\n                }\n            }\n        }\n    },\n\n    /**\n     * Get user's billing address. By default shipping address = billing address.\n     * Set the width of select list at the same time.\n     *\n     */\n    setDifferentBillingAddress : function (self) {\n        $(\".billing-checkbox\").on(\"change\", function() {\n            $(\".form-billing .chosen-container\").width($(\"#customer_email\").outerWidth()-20);\n\n            if (!this.checked) {\n                $(\".form-billing\").hide().removeClass(\"hidden\").fadeIn();\n                self.clearBillingAddress();\n            }\n            else {\n                $(\".form-billing\").fadeOut(function() {\n                    $(this).addClass(\"hidden\");\n                });\n            }\n        })\n    },\n\n    /**\n     * Clear the billing form.\n     *\n     */\n    clearBillingAddress : function() {\n        if ($(\".form-billing input\").val() != \"\") {\n            $(\".form-billing input\").val() == \"\";\n        }\n    },\n\n    init: function() {\n        var self = billingContainer;\n\n        self.setDifferentBillingAddress(self);\n    }\n}","/**\n * Object responsible for handling the estimation of user's purchase.\n *\n * @type {{ajaxCall: Function, getShipmentTaxes: Function, displayEstimatePanel: Function, fetchEstimate: Function, init: Function}}\n */\nvar estimateContainer = {\n\n    /**\n     * Ajax call to /api/estimate after all verifications have passed.\n     *\n     */\n    ajaxCall : function() {\n        $.ajax({\n            type: \"POST\",\n            url: ApiEndpoints.estimate,\n            data: {\n                email: $(\"#customer_email\").val(),\n                shipping: {},\n                products: UtilityContainer.getProductsFromLocalStorage(),\n                shipping_address: UtilityContainer.getShippingFromForm()\n            },\n            success: function(data) {\n                console.log(data);\n                estimateContainer.init(data);\n            },\n            error: function(e, status) {\n                if (e.status == 403){\n                    // TODO: replace with an actual link\n                    window.location.replace(\"/auth/login\");\n                    return;\n                }\n                $('#estimate').html('<div class=\"alert alert-danger\">Une erreur est survenue. Veuillez vérifier les informations fournies.</div>');\n            }\n        });\n    },\n\n    /**\n     * Get the relevant taxes according to the chosen shipping method.\n     *\n     * @param serviceCode\n     * @param data\n     * @returns {string}\n     */\n    getShipmentTaxes : function(serviceCode, data) {\n        var taxes = 0;\n\n        for(var i=0; i<data.shipping.services.length; i++)\n        {\n            if(data.shipping.services[i].method == serviceCode)\n            {\n                if (data.shipping.services[i].taxes.length != 0)\n                {\n                    for(var j=0; j<data.shipping.services[i].taxes.length; j++)\n                    {\n                        taxes += data.shipping.services[i].taxes[j].amount;\n                    }\n                }\n            }\n        }\n        return taxes.toFixed(2);\n    },\n\n    /**\n     * Display the estimate panel\n     *\n     */\n    displayEstimatePanel : function() {\n        $(\"#estimate\").removeClass(\"hidden fadeOutUp\").addClass(\"animated fadeInDown\");\n    },\n\n    /**\n     * Utility function to scroll the body to the estimate table\n     *\n     */\n    scrollTopToEstimate : function() {\n        $('html, body').animate({\n            scrollTop: $(\"#estimate\").offset().top\n        }, 1000);\n    },\n\n    /**\n     * Populate the shipping methods table with the data received after the api call.\n     *\n     * @param data\n     */\n    fetchEstimate : function(data, self) {\n        $(\".has-error\").removeClass(\"has-error\");\n\n        var email_value = $(\"#customer_email\").val();\n        var postcode_value = $(\"#shippingPostcode\").val();\n        var country_value = $(\".country\").val();\n\n        for(var i = 0, shippingLength = data.shipping.services.length; i<shippingLength; i++)\n        {\n            var serviceDOM = \"<tr data-service='\" + data.shipping.services[i].method + \"'>\" +\n                \"<td>\" + data.shipping.services[i].name + \"</td>\" +\n                \"<td>\" + data.shipping.services[i].transit + \"</td>\" +\n                \"<td>\" + data.shipping.services[i].delivery + \"</td>\" +\n                \"<td>\" + data.shipping.services[i].price + \"</td>\" +\n                \"<td>\" +\n                \"<input \" +\n                \"type='radio' \" +\n                \"name='shipping' \" +\n                \"class='shipping_method' \" +\n                \"data-taxes='\" + self.getShipmentTaxes(data.shipping.services[i].method, data) + \"' \" +\n                \"data-cost='\" + data.shipping.services[i].price + \"' \" +\n                \"data-value='\" + data.shipping.services[i].method + \"' \" +\n                \"value='\" + btoa(JSON.stringify(data.shipping.services[i])) + \"' >\" +\n                \"</td>\";\n\n            $(\"#estimate .table-striped\").append(serviceDOM);\n        }\n\n        $(\"#estimateButton\").removeClass(\"btn-three\").addClass(\"btn-one\").text(Localization.continue);\n        self.selectDefaultShipmentMethod();\n\n        self.scrollTopToEstimate();\n\n        paymentContainer.init(data);\n    },\n\n    /**\n     * Select the default shipment method from a predefined list.\n     *\n     */\n    selectDefaultShipmentMethod : function() {\n        var defaultShipment = [\"DOM.EP\", \"USA.TP\", \"INT.TP\"],\n            availableShipment = $(\"input[name=shipping]\");\n\n        for(var i= 0, length = availableShipment.length; i<length; i++)\n        {\n            if (defaultShipment.indexOf(availableShipment[i].dataset.value) != -1)\n            {\n                availableShipment[i].checked = true;\n            }\n        }\n    },\n\n    /**\n     * Registers functions to be called outside of this object.\n     *\n     * @param data\n     */\n    init : function(data) {\n        var self = estimateContainer;\n\n        if (UtilityContainer.getProductsFromLocalStorage().length == 0)\n        {\n            location.reload();\n        }\n        else\n        {\n            self.displayEstimatePanel();\n            self.fetchEstimate(data, self);\n        }\n    }\n\n}","/**\n * Object responsible for building the select list populating countries, provinces and states on checkout page.\n *\n * @type {{populateCountry: Function, populateProvincesAndStates: Function, updateChosenSelects: Function, callUpdateChosenSelects: Function, init: Function}}\n */\nvar locationContainer = {\n\n    /**\n     * Function to populate country list\n     * Activates the chosen plugin on the country select list.\n     *\n     */\n    populateCountry : function (lang) {\n        var file = \"/js/data/country-list.\" + lang + \".json\",\n            listItems = '',\n            $country = $(\".country\");\n\n        $.getJSON(file, function(data) {\n            $.each(data, function(key, val) {\n                if (key == \"CA\") {\n                    listItems += \"<option value='\" + key + \"' selected>\" + val + \"</option>\";\n                }\n                else {\n                    listItems += \"<option value='\" + key + \"'>\" + val + \"</option>\";\n                }\n            });\n            $country.append(listItems);\n        }).done(function() {\n            $(\".country\").chosen();\n        });\n    },\n\n    /**\n     * Function to populate provinces and states\n     * Activates the chosen plugin on the province select list.\n     *\n     * @param country\n     * @param callback\n     */\n    populateProvincesAndStates : function (country, callback) {\n        $.getJSON(\"/js/data/world-states.json\", function(data) {\n            for(var i= 0, length = country.length; i<length; i++) {\n                var listItems = '',\n                    $province = $(\".province\").find(\"[data-country='\" + country[i] +\"']\");\n\n                $.each(data, function(key)\n                {\n                    if (data[key].country === country[i] && data[key].short == \"QC\" ){\n                        listItems += \"<option value='\" + data[key].short + \"' selected>\" + data[key].name + \"</option>\";\n                    }\n                    else if (data[key].country === country[i]){\n                        listItems += \"<option value='\" + data[key].short + \"'>\" + data[key].name + \"</option>\";\n                    }\n                });\n                $province.append(listItems);\n            }\n            callback();\n        });\n    },\n\n    /**\n     * Event function enabling or disabling postcode and province fields according to the chosen country and the provided input (shipping or billing)\n     *\n     * @param chosenCountry\n     * @param input\n     */\n    updateChosenSelects: function(chosenCountry, input) {\n        if (chosenCountry == 'CA' || chosenCountry == 'US' || chosenCountry == \"MX\"){\n            $(input).removeAttr('disabled').trigger(\"chosen:updated\");\n        } else {\n            $(input).attr('disabled','disabled');\n        }\n\n        $(input + ' optgroup').attr('disabled','disabled');\n\n        if (chosenCountry == 'CA' || chosenCountry == 'US' || chosenCountry == 'MX'){\n            $(input + ' [data-country=\"' + chosenCountry + '\"]').removeAttr('disabled');\n\n        }\n\n        $(input).trigger('chosen:updated');\n    },\n\n    /**\n     * Triggers updateChosenSelects($country, $input)\n     * This function will be registered in init().\n     *\n     */\n    callUpdateChosenSelects: function(self) {\n        $(\"#billingCountry\").on(\"change\", function() {\n            self.updateChosenSelects($(this).val(), \"#billingProvince\");\n        });\n\n        $(\"#shippingCountry\").on(\"change\", function() {\n            self.updateChosenSelects($(this).val(), \"#shippingProvince\");\n        });\n    },\n\n    /**\n     * Registering functions to be called outside of this object.\n     *\n     */\n    init : function() {\n        var self = locationContainer;\n\n        self.populateCountry($(\"html\").attr(\"lang\"));\n        self.populateProvincesAndStates([\"CA\", \"US\", \"MX\"], function() {\n            $(\".province\").chosen();\n        });\n        self.callUpdateChosenSelects(self);\n\n    }\n}","/**\n * Object responsible for handling the payment panel.\n *\n * @type {{displayPaymentPanel: Function, initPaymentPanel: Function, updatePaymentPanel: Function, getTaxes: Function, init: Function}}\n */\nvar paymentContainer = {\n    /**\n     * Displays the Payment panel.\n     *\n     */\n    displayPaymentPanel : function() {\n        $(\"#payment\").removeClass(\"hidden fadeOutUp\").addClass(\"animated fadeInDown\");\n        $(\"#checkoutButton\").addClass(\"animated rubberBand\");\n    },\n\n    /**\n     * Populate the payment panel with default values.\n     *\n     * @param data\n     */\n    initPaymentPanel : function(data) {\n        var subtotal = parseFloat(UtilityContainer.getProductsPriceFromLocalStorage()).toFixed(2),\n            priceTransport = $(\"input:radio.shipping_method:checked\").data(\"cost\"),\n            taxes = paymentContainer.getTaxes(data) + parseFloat($(\"input:radio.shipping_method:checked\").data(\"taxes\")),\n            total = parseFloat(subtotal) + parseFloat(priceTransport) + parseFloat(taxes);\n\n        $(\"#price_subtotal\").text(subtotal);\n        $(\"#price_transport\").text(priceTransport);\n        $(\"#price_taxes\").text(taxes.toFixed(2));\n        $(\"#price_total\").text(total.toFixed(2));\n    },\n\n    /**\n     * Update the payment panel with right values (shipping method)\n     *\n     * @param data\n     */\n    updatePaymentPanel : function(data) {\n        var subtotal = parseFloat(UtilityContainer.getProductsPriceFromLocalStorage()).toFixed(2),\n            priceTransport, taxes;\n\n        $(\".shipping_method\").on(\"change\", function() {\n            priceTransport = $(this).data(\"cost\");\n            taxes = paymentContainer.getTaxes(data) + parseFloat($(this).data(\"taxes\"));\n            total = parseFloat(subtotal) + parseFloat(priceTransport) + parseFloat(taxes);\n\n            $(\"#price_subtotal\").text(subtotal);\n            $(\"#price_transport\").text(priceTransport);\n            $(\"#price_taxes\").text(taxes.toFixed(2));\n            $(\"#price_total\").text(total.toFixed(2));\n        });\n    },\n\n    /**\n     * Get the total taxes (TPS/TVQ or TVH or TPS or null) + shipping method taxes.\n     *\n     * @param data\n     * @returns {number}\n     */\n    getTaxes : function(data) {\n        var taxes = 0,\n            dataTaxesLength = data.taxes.length;\n\n        if (dataTaxesLength != 0)\n        {\n            for(var i=0; i<dataTaxesLength; i++)\n            {\n                taxes += data.taxes[i].amount;\n            }\n        }\n        return taxes;\n    },\n\n    /**\n     * Register methods for outside calling.\n     *\n     * @param data\n     */\n    init : function(data) {\n        paymentContainer.displayPaymentPanel();\n        paymentContainer.initPaymentPanel(data);\n        paymentContainer.updatePaymentPanel(data);\n\n        checkoutLogicContainer.init();\n    }\n}","/**\n * Object responsible for displaying the cart drawer.\n * Logic handled in dev/actions/layout/cart-drawer-logic.js\n *\n * @type {{$el: {$back: (*|jQuery|HTMLElement), $proceed: (*|jQuery|HTMLElement), $trigger: (*|jQuery|HTMLElement), $container: (*|jQuery|HTMLElement), $checkout: (*|jQuery|HTMLElement), $body: (*|jQuery|HTMLElement)}, displayOn: Function, displayOff: Function, animateIn: Function, animateOut: Function, setCartItemsHeight: Function, computeCartItemsHeight: Function, init: Function}}\n */\nvar cartDisplayContainer = {\n    $el : {\n        $back : $(\"#back\"),\n        $proceed : $(\"#proceed\"),\n        $trigger : $(\".view-cart\"),\n        $container : $(\"#cart-container\"),\n        $checkout : $(\"#checkout\"),\n        $body : $(\"body\")\n    },\n\n    displayOn: function() {\n        var _width = cartDisplayContainer.$el.$container.width();\n        cartDisplayContainer.$el.$container.css( {\n            \"margin-right\" : -_width\n        });\n\n        cartDisplayContainer.$el.$trigger.click(function() {\n            cartDisplayContainer.animateIn();\n        });\n    },\n\n    displayOff : function() {\n        cartDisplayContainer.$el.$back.click(function() {\n            cartDisplayContainer.animateOut();\n        });\n        cartDisplayContainer.$el.$checkout.click(function() {\n            sessionStorage.isDisplayed = false;\n        });\n    },\n\n    animateIn : function() {\n        cartDisplayContainer.$el.$container.show();\n        cartDisplayContainer.$el.$container.animate( {\n            \"margin-right\" : 0\n        }, 400);\n        sessionStorage.isDisplayed = true;\n    },\n\n    animateOut: function() {\n        var _width = cartDisplayContainer.$el.$container.width();\n        cartDisplayContainer.$el.$container.animate( {\n            \"margin-right\" : -_width\n        }, 400, function() {\n            $(this).hide();\n        });\n        sessionStorage.isDisplayed = false;\n    },\n\n    setCartItemsHeight : function() {\n        cartDisplayContainer.computeCartItemsHeight();\n\n        $(window).on(\"resize\", function() {\n            cartDisplayContainer.computeCartItemsHeight();\n        });\n\n        cartDisplayContainer.$el.$trigger.on(\"click\", function() {\n            cartDisplayContainer.computeCartItemsHeight();\n        })\n    },\n\n    computeCartItemsHeight : function() {\n        var cartItemsHeight = $(\"#cart-container\").height() - ($(\".cart-header\").height() + $(\".cart-footer\").height());\n\n        $(\"#cart-items\").css(\"height\", cartItemsHeight);\n    },\n\n    init : function() {\n        cartDisplayContainer.displayOn();\n        cartDisplayContainer.displayOff();\n        UtilityContainer.populateCountry($(\"html\").attr(\"lang\"));\n\n        if (sessionStorage.isDisplayed == \"true\")\n        {\n            cartDisplayContainer.$el.$container.css(\"margin-right\", 0);\n            cartDisplayContainer.$el.$container.show();\n        }\n\n    }\n};","/**\n * Object responsible for displaying the navigation header.\n *\n * @type {{md: {removeCartDescription: Function}, sm: {btnTransform_sm: Function}, init: Function}}\n */\nvar headerContainer = {\n    /**\n     * Desktop size\n     *\n     */\n    md: {\n        removeCartDescription : function() {\n            if ($(window).width() <= 1195) {\n                $(\"#nav-right #cart-description\").text(\"\");\n                $(\"#nav-right\").css(\"padding-bottom\", \"18px\");\n            }\n        }\n    },\n\n    /**\n     * Tablet size\n     *\n     */\n    sm : {\n        btnTransform_sm : function() {\n            if ($(window).width() <= 934 && ($(window).width() >= 769)) {\n                $(\".row:first .btn\").addClass(\"btn-sm\");\n                $(\"#searchBar\").addClass(\"input-sm\");\n                $(\"#view-cart-wrapper\").addClass(\"btn-xs btn-xs-btn-sm-height\");\n            }\n        }\n    },\n\n    /**\n     * Changes text from dropdown button within the parent node passed in the argument\n     *\n     * @param $elem\n     */\n    changeTextFromDropdown : function($elem) {\n        $($elem + \" .dropdown-menu li a\").click(function(){\n\n            $($elem + \" .btn:first-child\").html($(this).text() + '<span class=\\\"caret\\\"></span>');\n            $($elem + \" .btn:first-child\").val($(this).text());\n\n        });\n    },\n\n    /**\n     * Object responsible for handling all semantic ui modules (to be refactored eventually into its own object).\n     *\n     */\n    semanticUI: {\n\n        /**\n         * Initialize dropdown module.\n         *\n         */\n        initDropdownModule : function() {\n            //Enable selection on clicked items\n            $(\".ui.dropdown-select\").dropdown();\n\n            //Prevent selection on clicked items\n            $(\".ui.dropdown-no-select\").dropdown({\n                    action: \"select\"\n                }\n            );\n        }\n    },\n\n    /**\n     * Register functions in event handler (onload, onresize) to be called outside of this object.\n     *\n     */\n    init: function () {\n        var self = headerContainer;\n\n        $(window).on(\"load resize\", function() {\n            self.md.removeCartDescription();\n            self.sm.btnTransform_sm();\n        });\n\n        self.changeTextFromDropdown(\".search-filter\");\n\n        //Initialize Semantic UI component\n        self.semanticUI.initDropdownModule();\n    }\n}\n","/**\n * Object responsible for handling the payment overlay behaviour.\n *\n * @type {{cancelOrder: Function, init: Function}}\n */\nvar paymentOverlayContainer = {\n\n    /**\n     * Cancels an order.\n     * If the user clicks the cancel button, remove the cookie, flush the card, fadeOut the jumbotron then redirect to homepage.\n     *\n     */\n    cancelOrder : function() {\n        $(\"body\").on(\"click\", \"#cancelOrder\", function() {\n            Cookies.remove(\"_unpaid_orders\");\n\n            $(\"#cancelledOrder .jumbotron\").fadeOut();\n\n            window.location.replace(\"/\");\n\n            UtilityContainer.removeAllProductsFromLocalStorage();\n\n        });\n    },\n\n    /**\n     * Checks whether the user has any unpaid orders, and displays a message if that's the case.\n     *\n     */\n    checkPendingOrders : function() {\n\n        if (Cookies.get('_unpaid_orders')) {\n\n            // Retrieve order details.\n            var order = JSON.parse(Cookies.get('_unpaid_orders'));\n\n            // Check whether current order has been paid.\n            $.ajax({\n                type: 'GET',\n                url: ApiEndpoints.orders.view.replace(':id', order.id).replace(':verification', order.verification),\n                success: function(data) {\n                    if (data.status == 'pending')\n                        paymentOverlayContainer.showPaymentNotice();\n                    else\n                        Cookies.remove('_unpaid_orders');\n                }\n            });\n        }\n\n    },\n\n    /**\n     * Shows payment notice.\n     *\n     */\n    showPaymentNotice : function() {\n\n        // Retrieve order details.\n        var order = JSON.parse(Cookies.get('_unpaid_orders'));\n\n        // Display notice.\n        $('body').prepend(\n            '<div class=\"container overlay fullScreen\" id=\"cancelledOrder\">'+\n            '<div class=\"jumbotron vertical-align color-one\">'+\n            '<div class=\"text-center\">'+\n            '<h2>'+\n            Localization.pending_order.replace(':command', order.id) +\n            '</h2>'+\n            '<h4>'+ Localization.what_to_do +'</h4>'+\n            '<br />'+\n            '<ul class=\"list-inline\">' +\n            '<li>' +\n            '<a href=\"'+\n            ApiEndpoints.orders.pay.replace(':id', order.id)\n                .replace(':verification', order.verification) +'\">'+\n            '<button class=\"btn btn-success\" id=\"payOrder\">'+ Localization.pay_now +'</button>'+\n            '</a>'+\n            '</li>' +\n            '<li>' +\n            '<button class=\"btn btn-danger\" id=\"cancelOrder\">'+\n            Localization.cancel_order +\n            '</button>'+\n            '</li>'+\n            '</ul>'+\n            '</div>'+\n            '</div>'+\n            '</div>'\n        );\n    },\n\n    /**\n     * Register functions to be called outside paymentOverlayContainer.\n     *\n     */\n    init : function() {\n        var self = paymentOverlayContainer;\n\n        self.cancelOrder();\n        self.checkPendingOrders();\n    }\n}\n","/**\n * Object responsible for adding products to a user's wishlist.\n *\n * @type {{fadeInFavoriteIcon: Function, setWishlistBadgeQuantity: Function, createWishlistElement: Function, renderWishlist: Function, localizeWishlistButton: Function, removeWishlistElement: Function, init: Function}}\n */\nvar productLayoutFavoriteContainer = {\n    /**\n     * Fade in the favorite icon (heart icon) when hovering on a product tile.\n     *\n     */\n    fadeInFavoriteIcon: function() {\n        $(\".dense_product\").hover(function() {\n            $(this).children(\".favorite-wrapper\").fadeIn();\n        }, function () {\n            $(this).children(\".favorite-wrapper\").hide();\n        });\n    },\n\n    /**\n     * Update the value of .wishlist_badge when adding or deleting elements.\n     *\n     */\n    setWishlistBadgeQuantity : function() {\n        var total = UtilityContainer.getNumberOfProductsInWishlist();\n\n        $(\".wishlist_badge\").text(total);\n    },\n\n    /**\n     * Add the clicked product to the wish list.\n     *\n     */\n    addToFavorite: function() {\n        var self = productLayoutFavoriteContainer,\n            item;\n\n        $(\".favorite-wrapper\").on(\"click\", function() {\n            //No favorited class.\n            if (!$(this).hasClass(\"favorited\")) {\n                item = UtilityContainer.buyButton_to_Json($(this).parent().find(\".buybutton\"));\n                localStorage.setItem(\"_wish_product \" + item.product, JSON.stringify(item));\n\n                $(this).addClass(\"favorited\");\n\n                self.setWishlistBadgeQuantity();\n            }\n            else\n            //Has a favorited class. We remove it, then delete the element from local Storage.\n            {\n                self.removeFromFavorite($(this), self);\n            }\n        });\n    },\n\n    /**\n     * Persist the heart icon next to products already marked as wished.\n     *\n     */\n    persistFavorite: function() {\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0) {\n                for(var j = 0; j<$(\".favorite-wrapper\").length; j++)\n                {\n                    if(JSON.parse(localStorage.getItem(localStorage.key(i))).product === parseInt($(\".favorite-wrapper\")[j].dataset.product))\n                    {\n                        $(\".favorite-wrapper\")[j].className += \" favorited\";\n                    }\n                }\n            }\n        };\n    },\n\n    /**\n     * Delete the clicked element from the wish list.\n     *\n     * @param context\n     */\n    removeFromFavorite: function (element, context) {\n        element.removeClass(\"favorited\");\n        localStorage.removeItem(\"_wish_product \" + element.data(\"product\"));\n        context.setWishlistBadgeQuantity();\n    },\n\n    init: function () {\n        var self = productLayoutFavoriteContainer;\n\n\n        self.addToFavorite();\n        self.persistFavorite();\n        self.fadeInFavoriteIcon();\n        self.setWishlistBadgeQuantity();\n    }\n}","/**\n * Object responsible for the view component of each category page.\n *\n * @type {{blurBackground: Function, init: Function}}\n */\nvar categoryContainer = {\n\n    /**\n     * Contains the updated URL parameters,\n     *\n     */\n    searchParameters: {\n        page: 1,\n        per_page: 8,\n        order: 'relevance',\n        min_price: null,\n        max_price: null,\n        brands: '',\n        categories: ''\n    },\n\n    /**\n     * Blurs the background of each category's page header.\n     *\n     */\n    blurBackground: function () {\n        $(\".category-header\").blurjs({\n            source: \".category-header\"\n        });\n    },\n\n\n    // SORTING FEATURE\n    /**\n     * TODO: REFACTOR ALL LOGIC INTO ITS OWN CONTAINER\n     *\n     */\n    itemsPerPage: function () {\n        $(\".items-per-page .item\").on(\"click\", function() {\n            categoryContainer.URL_add_parameter(\"per_page\", $(this).data(\"sort\"));\n        });\n\n        // Set the selected option.\n        $('#items-per-page-box').dropdown('set selected', this.searchParameters.per_page);\n    },\n\n    sortBy: function () {\n        $(\".sort-by .item\").on(\"click\", function() {\n            categoryContainer.URL_add_parameter(\"order\", $(this).data(\"sort\"));\n        });\n\n        // Set the selected option.\n        $('#sort-by-box').dropdown('set selected', this.searchParameters.order);\n    },\n\n\n    // FILTERING FEATURE.\n    priceUpdate: function() {\n        $(\"#price-update\").on(\"click\", function() {\n            categoryContainer.URL_add_parameter(\"min_price\", $(\"#min-price\").val());\n            categoryContainer.URL_add_parameter(\"max_price\", $(\"#max-price\").val());\n        });\n\n        // Set the specified price range.\n        if (this.searchParameters.min_price) {\n            $('#min-price').val(this.searchParameters.min_price);\n        }\n        if (this.searchParameters.max_price) {\n            $('#max-price').val(this.searchParameters.max_price);\n        }\n    },\n\n    categoriesUpdate: function() {\n\n    },\n\n    brandsUpdate: function() {\n\n    },\n\n    toggleLayout: function () {\n        var $container = $(\".layout-toggle-container\"),\n            $product = $(\".dense_product\"),\n            $product_img = $(\".product-image\"),\n            $product_buybutton = $(\".dense_product .buybutton\");\n\n\n        $(\"#list-layout, #grid-layout\").on(\"click\", function () {\n\n            if($container.hasClass(\"grid-layout\"))\n            {\n                // List layout\n                $container.removeClass(\"grid-layout\").addClass(\"list-layout\");\n\n                $product.removeClass(\"col-xs-6 col-sm-4 col-md-3 text-center no-border\")\n                    .addClass(\"col-xs-12 col-sm-12 col-md-12 border-bottom padding-1\");\n\n                $product_img.removeClass(\"img-responsive center-block\").addClass(\"pull-left\").css(\"margin-right\", \"5%\");\n\n                $product_buybutton.css(\"margin-top\", \"3%\");\n\n\n                $(this).toggleClass(\"active\");\n            }\n            else if ($container.hasClass(\"list-layout\"))\n            {\n                // Grid layout\n                $container.removeClass(\"list-layout\").addClass(\"grid-layout\");\n\n                $product.removeClass(\"col-xs-12 col-sm-12 col-md-12 border-bottom padding-1\").\n                    addClass(\"col-xs-6 col-sm-4 col-md-3 text-center no-border\");\n\n                $product_img.addClass(\"img-responsive center-block\").removeClass(\"pull-left\").css(\"margin-right\", \"0\");\n\n                $product_buybutton.css(\"margin-top\", \"0\");\n\n                $(this).toggleClass(\"active\");\n            }\n        })\n    },\n\n    // HELPER FUNCTION : TO BE MOVED IN UTILITYCONTAINER\n    // Courtesy of http://stackoverflow.com/a/1917916\n    URL_add_parameter: function(key, value){\n        key = escape(key); value = escape(value);\n\n        var kvp = document.location.search.substr(1).split('&');\n        if (kvp == '') {\n            document.location.search = '?' + key + '=' + value;\n        }\n        else {\n\n            var i = kvp.length; var x; while (i--) {\n                x = kvp[i].split('=');\n\n                if (x[0] == key) {\n                    x[1] = value;\n                    kvp[i] = x.join('=');\n                    break;\n                }\n            }\n\n            if (i < 0) { kvp[kvp.length] = [key, value].join('='); }\n\n            //this will reload the page, it's likely better to store this until finished\n            document.location.search = kvp.join('&');\n        }\n    },\n\n    /**\n     * Retrieves the query parameters from the URL and stores them locally.\n     * Inspired by http://stackoverflow.com/a/1917916\n     *\n     */\n    retrieveSearchParameters: function() {\n\n        // Performance check.\n        var query = document.location.search.substr(1);\n        if (query.length < 1) {\n            return;\n        }\n\n        // Loop through query elements.\n        var kvp = query.split('&'), index, pair, key, value;\n        for (index in kvp)\n        {\n            // Skip parameters without any values.\n            if (kvp[index].indexOf('=') < 1) {\n                continue;\n            }\n\n            pair = kvp[index].split('=');\n            key = pair[0];\n            value = pair[1];\n\n            // Save the search parameter if it's valid.\n            if (typeof this.searchParameters[key] != 'undefined') {\n                this.searchParameters[key] = value;\n                //this.searchParameters[key] = ['brands', 'categories'].includes(key) ?\n                //    value.split(';') :\n                //    value;\n            }\n        }\n    },\n\n    init: function () {\n        var self = categoryContainer;\n\n        self.retrieveSearchParameters();\n        self.blurBackground();\n        self.itemsPerPage();\n        self.sortBy();\n        self.toggleLayout();\n        self.priceUpdate();\n        self.categoriesUpdate();\n        self.brandsUpdate();\n    }\n\n};\n","/**\n * Object responsible for the view component of the wish list page.\n * Logic handled in dev/actions/site/wishlist-logic.js\n *\n * @type {{setNumberOfProductsInHeader: Function, init: Function}}\n */\nvar wishlistContainer = {\n\n    /**\n     * Sets the number of products in the header (singular / plural).\n     *\n     */\n    setNumberOfProductsInHeader: function() {\n        var quantity = \"\";\n        UtilityContainer.getNumberOfProductsInWishlist() == 0 || UtilityContainer.getNumberOfProductsInWishlist() == 1 ? quantity+= (UtilityContainer.getNumberOfProductsInWishlist() + \"  item \") : quantity += (UtilityContainer.getNumberOfProductsInWishlist() + \"  items \");\n        $(\"#quantity-wishlist\").text(quantity);\n    },\n\n\n    init: function() {\n        var self = wishlistContainer;\n\n        self.setNumberOfProductsInHeader();\n    }\n}","/**\n * Utility object containing various utility functions...\n * Self Explanatory duh.\n *\n * @type {{getProductsFromLocalStorage: Function, getNumberOfProductsInWishlist: Function, getNumberOfProducts: Function, getProductsPriceFromLocalStorage: Function, removeAllProductsFromLocalStorage: Function, getShippingFromForm: Function, buyButton_to_Json: Function, populateCountry: Function, validateEmptyFields: Function, validateEmail: Function, validatePostCode: Function, validateEmptyCart: Function, addErrorClassToFields: Function, addErrorClassToFieldsWithRules: Function, addFadeOutUpClass: Function, removeErrorClassFromFields: Function, getCheapestShippingMethod: Function, getTaxes: Function, getShipmentTaxes: Function, getCartTaxes: Function, getCartTotal: Function}}\n */\nvar UtilityContainer = {\n    /**\n     * Utility function for getting all the products in localStorage.\n     * Returns an array containing their id, their quantity and their price.\n     *\n     * @returns {Array}\n     */\n    getProductsFromLocalStorage : function() {\n        var res = [];\n\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\n            {\n                var product = JSON.parse(localStorage.getItem(localStorage.key(i))),\n                    productId = product.product,\n                    productQuantity = product.quantity,\n                    productPrice = product.price;\n\n                res.push({\n                    id: productId,\n                    quantity: productQuantity,\n                    price : productPrice\n                });\n            }\n        }\n\n        return res;\n    },\n\n    /**\n     * Utility function returning the number of products present in the wish list.\n     *\n     * @returns {number}\n     */\n    getNumberOfProductsInWishlist : function() {\n        var total = 0;\n\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0)\n            {\n                total += JSON.parse(localStorage.getItem(localStorage.key(i))).quantity;\n            }\n        }\n\n        return total;\n    },\n\n    /**\n     * Utility function returning the number of products present in the cart.\n     *\n     * @returns {number}\n     */\n    getNumberOfProducts : function() {\n        var total = 0;\n\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\n            {\n                total += JSON.parse(localStorage.getItem(localStorage.key(i))).quantity;\n            }\n        }\n\n        return total;\n    },\n\n    /**\n     * Utility function to get the total price from all products present in localStorage.\n     *\n     * @returns {number}\n     */\n    getProductsPriceFromLocalStorage : function() {\n        var total = 0,\n            products = UtilityContainer.getProductsFromLocalStorage();\n\n        for(var i= 0, length = products.length; i<length; i++)\n        {\n            total += (products[i].price * products[i].quantity);\n        }\n\n        return total;\n    },\n\n    /**\n     * Utility function to delete all products from localStorage.\n     *\n     */\n    removeAllProductsFromLocalStorage : function() {\n        for(var i= 0, length = localStorage.length; i<length; i++) {\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\n            {\n                localStorage.removeItem(localStorage.key(i));\n            }\n        }\n    },\n\n    /**\n     * Utility function fo getting the country, the postal code and the province (if any) of the user.\n     *\n     * @returns {{country: (*|jQuery), postcode: (*|jQuery), province: (*|jQuery)}}\n     */\n    getShippingFromForm : function() {\n        return res = {\n            \"country\" : $(\"#shippingCountry\").val(),\n            \"postcode\" : $(\"#shippingPostcode\").val(),\n            \"province\" : $(\"#shippingProvince\").val(),\n            \"line1\" : $(\"#shippingAddress1\").val(),\n            \"line2\" : $(\"#shippingAddress2\").val(),\n            \"name\" : $(\"#shippingFirstname\").val() + \" \" + $(\"#shippingLastname\").val(),\n            \"city\" : $(\"#shippingCity\").val(),\n            \"phone\" : $(\"#shippingTel\").val()\n        };\n    },\n\n    /**\n     * parse the information from a buy button into a readable json format\n     *\n     * @param item\n     * @returns {{product: *, name: *, price: *, thumbnail: *, thumbnail_lg: *, quantity: number}}\n     */\n    buyButton_to_Json : function(item) {\n        return {\n            \"product\" : item.data(\"product\"),\n            \"name\" : item.data(\"name\"),\n            \"price\" : item.data(\"price\"),\n            \"thumbnail\" : item.data(\"thumbnail\"),\n            \"thumbnail_lg\" : item.data(\"thumbnail_lg\"),\n            \"quantity\" : parseInt(item.data(\"quantity\")),\n            \"link\" : item.data(\"link\")\n        }\n    },\n\n    /**\n     * Utility object used to populate a select list (#country) with a list of country (json formatted) in the appropriate language.\n     *\n     */\n    populateCountry : function (lang) {\n        var file = \"/js/data/country-list.\" + lang + \".json\",\n            listItems = '',\n            $country = $(\"#country\");\n\n        $.getJSON(file, function(data) {\n            $.each(data, function(key, val) {\n                if (key == \"CA\") {\n                    listItems += \"<option value='\" + key + \"' selected>\" + val + \"</option>\";\n                }\n                else {\n                    listItems += \"<option value='\" + key + \"'>\" + val + \"</option>\";\n                }\n            });\n            $country.append(listItems);\n        });\n    },\n\n    /**\n     * Check if the fields passed in the argument are empty or not.\n     *\n     * @param emptyFields\n     * @returns {boolean}\n     */\n    validateEmptyFields: function(emptyFields) {\n        var passed = true;\n        for(var i= 0, length = emptyFields.length; i<length; i++) {\n            if (emptyFields[i].val() == \"\")\n            {\n                passed = false;\n                break;\n            }\n        }\n        return passed;\n    },\n\n    /**\n     * Validate the email address passed as the argument.\n     *\n     * @param email\n     * @returns {boolean}\n     */\n    validateEmail: function(email) {\n        var re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n        return re.test(email);\n    },\n\n    /**\n     * Validate a CA or US postal code.\n     *\n     * @param postcode\n     * @param country\n     * @returns {boolean}\n     */\n    validatePostCode: function(postcode, country) {\n        if (country == \"CA\")\n            return postcode.match(/^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} ?\\d{1}[A-Z]{1}\\d{1}$/i) ? true : false;\n        else if (country == \"US\")\n            return postcode.match(/^\\d{5}(?:[-\\s]\\d{4})?$/) ? true : false;\n        else\n            return true;\n    },\n\n    /**\n     * Returns true if the cart is empty, false otherwise.\n     *\n     * @returns {*}\n     */\n    validateEmptyCart : function () {\n        var empty;\n        UtilityContainer.getProductsPriceFromLocalStorage() === 0 ?  empty = true : empty = false;\n\n        return empty;\n    },\n\n    /**\n     * Add .has-error to parent class + animate the relevant fields.\n     *\n     * @param fields\n     */\n    addErrorClassToFields: function(fields) {\n        for(var i= 0, length = fields.length; i<length; i++)\n        {\n            if (fields[i].val() == \"\")\n            {\n                fields[i].parent().addClass(\"has-error\");\n                fields[i].addClass('animated shake').bind('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\n                    $(this).removeClass(\"animated\");\n                    $(this).removeClass(\"shake\");\n                    $(this).unbind();\n                });\n            }\n        }\n    },\n\n    /**\n     * Same as addErrorClassToFields but accept a single input (ie. specific rules have to be applied: email / postal code / ...\n     *\n     * @param input\n     */\n    addErrorClassToFieldsWithRules: function(input) {\n        input.parent().addClass(\"has-error\");\n        input.addClass('animated shake').bind('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\n            $(this).removeClass(\"animated\");\n            $(this).removeClass(\"shake\");\n            $(this).unbind();\n        });\n    },\n\n    /**\n     * Adds a fadeOutUp class then hide the element passed as an argument.\n     *\n     * @param $element\n     */\n    addFadeOutUpClass: function ($element) {\n        $element.addClass(\"animated fadeOutUp\").delay(1000).queue(function() {\n            $(this).addClass(\"hidden\").clearQueue();\n        });\n    },\n\n    /**\n     * Remove .has-error from fields\n     *\n     * @param fields\n     */\n    removeErrorClassFromFields: function(fields) {\n        for(var i= 0, length = fields.length; i<length; i++)\n        {\n            if (fields[i].val() != \"\" && fields[i].parent().hasClass(\"has-error\"))\n            {\n                fields[i].parent().removeClass(\"has-error\");\n            }\n        }\n    },\n\n    /**\n     * Returns the method and the price of the cheapest shipping services.\n     *\n     * @param data\n     * @returns {{fare: *, method: (*|string)}}\n     */\n    getCheapestShippingMethod : function(data) {\n        var availableShipment = data.shipping.services,\n            sortedShipmentByPrice = [];\n\n        for(var i= 0, length = availableShipment.length; i<length; i++)\n        {\n            sortedShipmentByPrice.push(availableShipment[i]);\n        }\n\n        sortedShipmentByPrice.sort(function(a,b) {\n            return a.price - b.price\n        });\n\n        return {\n            fare: sortedShipmentByPrice[0].price,\n            method: sortedShipmentByPrice[0].method\n        }\n    },\n\n    /**\n     * Get the total taxes (TPS/TVQ or TVH or TPS or null) + shipping method taxes.\n     *\n     * @param data\n     * @returns {number}\n     */\n    getTaxes : function(data) {\n        var taxes = 0,\n            dataTaxesLength = data.taxes.length;\n\n        if (dataTaxesLength != 0)\n        {\n            for(var i=0; i<dataTaxesLength; i++)\n            {\n                taxes += data.taxes[i].amount;\n            }\n        }\n\n        return taxes.toFixed(2);\n    },\n\n    /**\n     * Get the relevant taxes according to the chosen shipping method.\n     *\n     * @param serviceCode\n     * @param data\n     * @returns {string}\n     */\n    getShipmentTaxes : function(serviceCode, data) {\n        var taxes = 0;\n        console.log(data);\n\n        for(var i=0; i<data.shipping.services.length; i++)\n        {\n            if(data.shipping.services[i].method == serviceCode)\n            {\n                if (data.shipping.services[i].taxes.length != 0)\n                {\n                    for(var j=0; j<data.shipping.services[i].taxes.length; j++)\n                    {\n                        taxes += data.shipping.services[i].taxes[j].amount;\n                    }\n                }\n            }\n        }\n        return taxes.toFixed(2);\n    },\n\n    /**\n     * Returns appropriate taxes according to the shipping method.\n     *\n     * @param serviceCode\n     * @param data\n     * @returns {number}\n     */\n    getCartTaxes : function(serviceCode, data) {\n        var taxes = parseFloat(UtilityContainer.getTaxes(data)),\n            shippingTaxes = parseFloat(UtilityContainer.getShipmentTaxes(serviceCode, data)),\n            totalTaxes = taxes + shippingTaxes;\n\n        return totalTaxes;\n    },\n\n    /**\n     * Returns total price (subtotal + taxes + shipping taxes)\n     * Saves total in sessionStorage (for live update)\n     *\n     * @param data\n     * @returns {string}\n     */\n    getCartTotal : function(serviceCode, data) {\n        var taxes = parseFloat(UtilityContainer.getCartTaxes(serviceCode.method, data)),\n            shipping = parseFloat(UtilityContainer.getCheapestShippingMethod(data).fare),\n            subtotal = parseFloat(UtilityContainer.getProductsPriceFromLocalStorage()),\n            total = (taxes + shipping + subtotal).toFixed(2);\n\n        return total;\n    }\n}\n\n","/**\n * Container responsible for initializing the checkout page.\n * Overall logic is handled in js/dev/actions/checkout/*.js\n * View component is handled in js/dev/components/checkout/*.js\n *\n * @type {{estimateButtonClick: Function, init: Function}}\n */\nvar checkoutInitContainer = {\n\n    /**\n     * Event triggered when the \"Continue\" button is hit.\n     * If the input fields entered are appropriate, make the ajax call to \"/api/estimate\".\n     * If they are not, display the relevant error message(s)\n     *\n     */\n    estimateButtonClick : function() {\n        $(\"#estimateButton\").on(\"click\", function(e) {\n            var email = $(\"#customer_email\"),\n                phone = $(\"#customer_phone\"),\n                shippingFirstName = $(\"#shippingFirstname\"),\n                shippingLastName = $(\"#shippingLastname\"),\n                shippingAddress1 = $(\"#shippingAddress1\"),\n                shippingCity = $(\"#shippingCity\"),\n                shippingCountry = $(\"#shippingCountry\").val(),\n                shippingPostcode = $(\"#shippingPostcode\"),\n                billingFirstName = $(\"#billingFirstname\"),\n                billingLastName = $(\"#billingLastname\"),\n                billingAddress1 = $(\"#billingAddress1\"),\n                billingCity = $(\"#billingCity\"),\n                billingCountry = $(\"#billingCountry\").val(),\n                billingPostcode = (\"#billingPostcode\"),\n                shippingInformation = {\n                    \"country\" : shippingCountry,\n                    \"postcode\" : $(\"#shippingPostcode\").val(),\n                    \"postcodeInput\" : $(\"#shippingPostcode\")\n                },\n                fields = [\n                    shippingFirstName,\n                    shippingLastName,\n                    shippingAddress1,\n                    shippingCity,\n                    billingFirstName,\n                    billingLastName,\n                    billingAddress1,\n                    billingCity,\n                    email,\n                    phone\n                ];\n\n            e.preventDefault();\n\n            //Auto fill billing address if checkbox is checked.\n            billingContainer.autoFillBillingAddress(fields, shippingInformation.postcodeInput);\n\n            //Build the billing information object (from auto fill or entered by hand)\n            var billingInformation = {\n                \"country\" : billingCountry,\n                \"postcode\" : $(\"#billingPostcode\").val(),\n                \"postcodeInput\" : $(\"#billingPostcode\")\n            };\n\n            //Validate all fields and make the ajax call!\n            checkoutValidationContainer.init(fields, email, shippingInformation, billingInformation);\n        });\n    },\n\n    init: function () {\n        /**\n         * Populate select lists and set up billing address container behaviour.\n         * Set the form focus on first name field\n         *\n         */\n        locationContainer.init();\n        billingContainer.init();\n        $(\"#shippingFirstname\").focus();\n\n        var self = checkoutInitContainer;\n        self.estimateButtonClick();\n    }\n}","/**\n * Object responsible for handling the overall logic of the checkout process.\n * After clicking on \"Proceed to checkout\", create a cookie and make an ajax call to get all the data before redirecting the user to the payment page.\n *\n * When a user changes the quantity or deletes an item, fadeOut the shipping estimate and payment panel. Replace the Continue button with \"Update\".\n *\n * @type {{createOrdersCookie: Function, placeOrderAjaxCall: Function, init: Function}}\n */\nvar checkoutLogicContainer = {\n\n    /**\n     * Create a localStorage object containing the id and the verification code.\n     *\n     * @param data\n     */\n    createOrdersCookie: function(data) {\n        var paymentId = data.id,\n            paymentVerification = data.verification;\n\n        Cookies.set(\"_unpaid_orders\", JSON.stringify( {\n            id : paymentId,\n            verification : paymentVerification\n        }));\n    },\n\n    /**\n     * Makes an ajax call to api/orders with the values from the form\n     *\n     * @param self\n     */\n    placeOrderAjaxCall: function(self) {\n        $.ajax({\n            method: \"POST\",\n            url: ApiEndpoints.placeOrder,\n            data: $(\"#cart_form\").serialize(),\n            cache: false,\n            success: function(data) {\n                console.log(data);\n\n                self.createOrdersCookie(data);\n\n                //redirect the user to the checkout page if he backs from the payment page\n                history.pushState({data: data}, \"Checkout \",\"/dev/cart\");\n\n                //Redirect to success url\n                window.location.replace(data.payment_details.payment_url);\n            },\n            error: function(xhr, e) {\n                console.log(xhr);\n                console.log(e);\n            }\n        })\n\n    },\n\n    /**\n     * Hide the panels by fading them up then adding a hidden class.\n     *\n     * @param self\n     */\n    hidePanels: function (self) {\n        $(\".quantity, #shippingPostcode, #shippingCity\").on(\"change\", function () {\n            UtilityContainer.addFadeOutUpClass($(\"#estimate\"));\n            UtilityContainer.addFadeOutUpClass($(\"#payment\"));\n\n            self.updateEstimateButtonValue();\n        });\n\n        $(\".close-button\").on(\"click\", function() {\n            UtilityContainer.addFadeOutUpClass($(\"#estimate\"));\n            UtilityContainer.addFadeOutUpClass($(\"#payment\"));\n\n            self.updateEstimateButtonValue();\n        });\n    },\n\n    /**\n     * Updates the estimate button with \"Update\" while making it bouncy ;)\n     *\n     */\n    updateEstimateButtonValue: function() {\n        $(\"#estimateButton\")\n            .removeClass(\"btn-one animated rubberBand\")\n            .addClass(\"animated rubberBand btn-three\")\n            .text(Localization.update);\n    },\n\n    /**\n     * Register methods for outside calling.\n     *\n     */\n    init: function() {\n        var self = checkoutLogicContainer;\n\n        $(\"#checkoutButton\").on(\"click\", function (e) {\n            e.preventDefault();\n\n            $('#checkoutButton').html('<i class=\"fa fa-spinner fa-spin\"></i>');\n\n            self.placeOrderAjaxCall(self);\n\n        });\n\n        self.hidePanels(self);\n    }\n}","/**\n * Object responsible for validating all the information entered by the user.\n * Will trigger the ajax call only when all the inputs entered match their validation rules.\n *\n * @type {{removeErrorClassFromEmail: Function, removeErrorClassFromPostcode: Function, init: Function}}\n */\nvar checkoutValidationContainer = {\n\n    removeErrorClassFromEmail: function(email) {\n        if (UtilityContainer.validateEmail(email.val()) && email.parent().hasClass(\"has-error\"))\n            email.parent().removeClass(\"has-error\");\n    },\n\n    removeErrorClassFromPostcode: function(postcode, country) {\n        if (UtilityContainer.validatePostCode(postcode.val(), country) && postcode.parent().hasClass(\"has-error\"))\n            postcode.parent().removeClass(\"has-error\");\n    },\n\n    /**\n     * If all validation pass, spin the button, clean the shipment table and trigger the ajax call.\n     * If there are errors, warn the users about which inputs is faulty.\n     *\n     * @param fields\n     * @param email\n     * @param postcode\n     * @param country\n     */\n    init : function(fields, email, shippingInformation, billingInformation) {\n        var self = checkoutValidationContainer;\n\n        if (UtilityContainer.validateEmptyFields(fields)\n            && UtilityContainer.validateEmail(email.val())\n            && UtilityContainer.validatePostCode(shippingInformation.postcode, shippingInformation.country)\n            && UtilityContainer.validatePostCode(billingInformation.postcode, billingInformation.country))\n        {\n            $('#estimateButton').html('<i class=\"fa fa-spinner fa-spin\"></i>');\n\n            //delete previously uploaded shipping method (if any)\n            if($(\"#estimate .table-striped\").children().length > 0) {\n                $(\"#estimate .table-striped tbody\").empty();\n            }\n\n            estimateContainer.ajaxCall();\n        }\n        else\n        {\n            UtilityContainer.addErrorClassToFields(fields);\n\n            if(!UtilityContainer.validatePostCode(shippingInformation.postcode, shippingInformation.country))\n            {\n                UtilityContainer.addErrorClassToFieldsWithRules(shippingInformation.postcodeInput);\n            }\n\n            if(!UtilityContainer.validatePostCode(billingInformation.postcode, billingInformation.country))\n            {\n                UtilityContainer.addErrorClassToFieldsWithRules(billingInformation.postcodeInput);\n            }\n\n            if(!UtilityContainer.validateEmail(email.val()))\n            {\n                UtilityContainer.addErrorClassToFieldsWithRules(email);\n                $(\"#why_email\").removeClass(\"hidden\").addClass(\"animated bounceInRight\").tooltip();\n            }\n\n        }\n\n        UtilityContainer.removeErrorClassFromFields(fields);\n        self.removeErrorClassFromEmail(email);\n        self.removeErrorClassFromPostcode(shippingInformation.postcodeInput, shippingInformation.country);\n        self.removeErrorClassFromPostcode(billingInformation.postcodeInput, billingInformation.country);\n    }\n}\n","/**\n * Object responsible for the overall logic (CRUD) of the cart drawer.\n * Layout handled in dev/components/layout/cart-drawer.js\n *\n * @type {{$el: {$list: (*|jQuery|HTMLElement)}, addItem: Function, storeItem: Function, loadItem: Function, deleteItem: Function, modifyQuantity: Function, modifyQuantityBeforeBuying: Function, setBadgeQuantity: Function, setQuantityCookie: Function, setCartSubtotal: Function, setCartShipping: Function, setCartTaxes: Function, setCartTotal: Function, ajaxCall: Function, updateAjaxCall: Function, init: Function}}\n */\nvar cartLogicContainer = {\n    /**\n     * Cache a set of elements commonly used (to be updated)\n     */\n    $el : {\n        $list : $(\".cart-items-list\")\n    },\n\n    /**\n     * Add an item in the list.\n     *\n     * @param item JSON format converted from attributes on the .buybutton\n     */\n    addItem : function(item) {\n        var price = (parseInt(item.quantity) * parseFloat(item.price)).toFixed(2);\n\n        var sidebarElement = '<li class=\"w-box animated bounceInDown\" data-product=\"' + item.product + '\" data-quantity=1>' +\n            '<div class=\"col-xs-3 text-center\"><img src=' + item.thumbnail_lg + ' class=\"img-responsive\"></div>' +\n            '<div class=\"col-xs-9 no-padding-left\">' +\n            '<div class=\"row\"><div class=\"col-xs-10\"><h3 class=\"product-name\">' + item.name + '</h3></div><div class=\"col-xs-2\"><h4 class=\"text-right\"><i class=\"fa fa-trash fa-1 close-button\"><span class=\"sr-only\">Remove Item</span></i></h4></div></div>' +\n            '<div class=\"row\"><div class=\"col-xs-8\">' +\n            '<div class=\"input-group\"><label for=\"products[' + item.product + '][quantity]\" class=\"sr-only\">'+ item.name + \":\" + item.price +'</label>' +\n            '<input type=\"number\" class=\"quantity form-control input-sm\" min=\"1\" step=\"1\" value=\"' + item.quantity + '\" name=\"products[' + item.product + '][quantity]\">' +\n            '<span class=\"input-group-addon update_quantity_indicator\"><i class=\"fa\" hidden><span class=\"sr-only\">' + \"Update quantity\" + '</span></i></span></div></div>' +\n            '<div class=\"col-xs-4 product-price text-right\" data-price=\"' + item.price + '\">$' + price  + '<span class=\"sr-only\">' + $ + item.price + '</span></div></div>' +\n            '<input type=\"hidden\" name=\"products[' + item.product + '][id]\" value=\"' + item.product + '\"/> ' +\n            '</div>' +\n            '</li>';\n\n        if (!$(\".cart-items-list [data-product='\" + item.product + \"']\").length){\n            cartLogicContainer.$el.$list.append(sidebarElement);\n        }\n\n    },\n\n    /**\n     * Store a product in localStorage\n     * Update badge quantity\n     * Create/update a quantity cookie\n     *\n     * @param item JSON format converted from attributes on the .buybutton\n     */\n    storeItem : function(item) {\n        localStorage.setItem(\"_product \" + item.product, JSON.stringify(item));\n        cartLogicContainer.setBadgeQuantity();\n        cartLogicContainer.setQuantityCookie();\n        cartLogicContainer.setCartSubtotal();\n        cartLogicContainer.setCartTotal();\n        cartLogicContainer.updateAjaxCall();\n    },\n\n    /**\n     * Load a list of items previously bought into the cart.\n     * If there is no item in localStorage starting with the key \"_product\", then nothing is loaded.\n     */\n    loadItem : function() {\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_product\", 0) === 0)\n            {\n                cartLogicContainer.addItem(JSON.parse(localStorage.getItem(localStorage.key(i))));\n            }\n        }\n    },\n\n    /**\n     * Delete an item from the cart drawer list.\n     * Remove it from the DOM.\n     * Delete the object on localStorage.\n     * Set Badge quantity accordingly.\n     * Update Cookie quantity accordingly.\n     */\n    deleteItem: function() {\n        $(document).on('click', \".close-button\", function() {\n            $parent = $(this).closest(\".animated\").addClass(\"animated bounceOutLeft\");\n            $parent.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\n                $(this).remove();\n            });\n\n            localStorage.removeItem(\"_product \" + $(this).closest(\".animated\").data(\"product\"));\n\n            cartLogicContainer.setBadgeQuantity();\n            cartLogicContainer.setQuantityCookie();\n            cartLogicContainer.setCartSubtotal();\n            cartLogicContainer.setCartTotal();\n            cartLogicContainer.updateAjaxCall();\n\n        });\n    },\n\n    /**\n     * Modify the quantity of a product in the cart\n     * Update its price label accordingly\n     * Update the localStorage\n     * Set badge quantity\n     * Update Cookie quantity\n     */\n    modifyQuantity : function() {\n        $(\"#cart-items\").on(\"change\", \".quantity\", function() {\n            $container = $(this).closest(\"li\");\n            $product_price = $container.find(\".product-price\");\n\n            //update the total value\n            $product_price.text(\"$\" + ($product_price.data(\"price\") * $(this).val()).toFixed(2));\n\n            //retrieve old data from old object then update the quantity and finally update the object\n            var oldData = JSON.parse(localStorage.getItem(\"_product \" + $container.data(\"product\")));\n            oldData.quantity = parseInt($(this).val());\n            localStorage.setItem(\"_product \" + $container.data(\"product\"), JSON.stringify(oldData));\n\n            cartLogicContainer.setBadgeQuantity();\n            cartLogicContainer.setQuantityCookie();\n            cartLogicContainer.setCartSubtotal();\n            cartLogicContainer.setCartTotal();\n            cartLogicContainer.updateAjaxCall();\n\n        });\n    },\n\n    /**\n     * Modify the quantity in a product page before buying\n     * Only used in a product page.\n     * Assuming the DOM has (and will keep) this structure:\n     *      .form-group\n     *          #item-quantity\n     *      .buybutton\n     */\n    modifyQuantityBeforeBuying : function() {\n        $(\"#item_quantity\").on(\"change\", function() {\n            $(this).closest(\".form-group\").next().data(\"quantity\", parseInt($(this).val()));\n        });\n    },\n\n    /**\n     * Update the value of #cart_badge when adding or deleting elements\n     */\n    setBadgeQuantity : function() {\n        var total = UtilityContainer.getNumberOfProducts();\n\n        $(\".cart_badge\").text(total);\n    },\n\n    /**\n     * Create or Update a cookie with the quantity present in the cart.\n     * The value of the cookie is encoded in base64 (btoa)\n     */\n    setQuantityCookie : function () {\n        var number = UtilityContainer.getNumberOfProducts();\n\n        if (Cookies.get(\"quantityCart\") == undefined || number === 0)\n        {\n            Cookies.set(\"quantityCart\", btoa(\"0\"));\n        }\n        else {\n            Cookies.set(\"quantityCart\", btoa(number));\n        }\n    },\n\n    /**\n     * Update subtotal when users put something in or out of their cart.\n     *\n     */\n    setCartSubtotal : function () {\n        $(\"dd#subtotal\").text(\"$\" + UtilityContainer.getProductsPriceFromLocalStorage().toFixed(2));\n    },\n\n    /**\n     * Set shipping field\n     *\n     * @param data\n     */\n    setCartShipping : function(data) {\n        $(\"dd#shipping\").text(\"$\" + (UtilityContainer.getCheapestShippingMethod(data).fare));\n    },\n\n\n    /**\n     * Set taxes field\n     *\n     * @param taxes\n     */\n    setCartTaxes : function(taxes) {\n        $(\"#taxes\").text(\"$\" + taxes.toFixed(2));\n    },\n\n    /**\n     * Set total field\n     *\n     * @param total\n     */\n    setCartTotal : function (total) {\n        $(\".cart-total dl\").show();\n        $(\".calculation.total dd\").text(\"$ \" + total);\n    },\n\n\n\n    /**\n     * Ajax call to /api/estimate after all verifications have passed.\n     *\n     */\n    ajaxCall : function() {\n        $.ajax({\n            type: \"POST\",\n            url: \"/api/estimate\",\n            data: {\n                products: UtilityContainer.getProductsFromLocalStorage(),\n                shipping_address: {\n                    \"postcode\": $(\"#postcode\").val(),\n                    \"country\": $(\".price-estimate #country\").val(),\n                    \"province\" : \"QC\"\n                }\n            },\n            success: function(data) {\n                cartLogicContainer.setCartShipping(data);\n                cartLogicContainer.setCartTaxes(UtilityContainer.getCartTaxes(UtilityContainer.getCheapestShippingMethod(data).method, data));\n                cartLogicContainer.setCartTotal(UtilityContainer.getCartTotal(UtilityContainer.getCheapestShippingMethod(data), data));\n            },\n            error: function(e) {\n                console.log(e);\n            },\n            complete : function() {\n                $(\".price-estimate\").fadeOut(300, function() {\n                    $(\".calculation.hidden\").fadeIn().removeClass(\"hidden\");\n                    $(\".cart-total.hidden\").fadeIn().removeClass(\"hidden\");\n                });\n            }\n        });\n    },\n\n    /**\n     * Display an update panel when changes are made to the cart drawer.\n     *\n     */\n    updateAjaxCall : function() {\n        //If the total is displayed, it means that there's already been an ajax call: we have to display an update!\n        if(!$(\".total\").parent().hasClass(\"hidden\")) {\n            $(\".cart-total dl\").hide();\n            $(\".price-estimate-update\").fadeIn('fast');\n        }\n\n        $(\".changeLocation\").click(function() {\n            $(\"dl.calculation\").addClass(\"hidden\");\n            $(\".getEstimate\").html(Localization.calculate);\n            $(\".price-estimate-update\").fadeOut();\n            $(\".price-estimate\").fadeIn();\n\n        });\n\n        //TODO: Refactor the arbitrary xxxxms to an actual end of ajax call.\n\n        $(\".price-estimate-update .getEstimate\").click(function() {\n            if(!UtilityContainer.validateEmptyCart()) {\n                setTimeout(function() {\n                    $(\".price-estimate-update .getEstimate\").parent().fadeOut(300);\n                    $(\".price-estimate-update .getEstimate\").html(Localization.calculate);\n                }, 2250);\n            }\n        });\n\n    },\n\n    init : function() {\n        cartLogicContainer.setBadgeQuantity();\n        cartLogicContainer.loadItem();\n        cartLogicContainer.deleteItem();\n        cartLogicContainer.modifyQuantity();\n        cartLogicContainer.modifyQuantityBeforeBuying();\n        cartLogicContainer.setQuantityCookie();\n        cartLogicContainer.setCartSubtotal();\n    }\n};\n","/**\n * Container responsible for initializing the cart drawer feature.\n *\n * @type {{buyButtonClick: Function, getEstimateClick: Function, init: Function}}\n */\nvar cartDrawerInitContainer = {\n\n    /**\n     * Event triggered when a buy button is clicked.\n     *\n     */\n    buyButtonClick : function () {\n        $(\"body\").on(\"click\", \".buybutton\", function() {\n            cartDisplayContainer.animateIn();\n            cartLogicContainer.addItem(UtilityContainer.buyButton_to_Json($(this)));\n            cartLogicContainer.storeItem(UtilityContainer.buyButton_to_Json($(this)));\n\n            //We remove the \"Your cart is empty\" message at the top every time we add an item.\n            //TODO : Maybe improve it?\n            $(\"#cart-items .empty-cart\").addClass(\"hidden\");\n        });\n    },\n\n    /**\n     * Event triggered when the Calculate button (to get a price estimate) is clicked.\n     *\n     */\n    getEstimateClick: function () {\n        $(\".getEstimate\").on(\"click\", function() {\n            //Fields validation + Empty cart validation.\n            if(UtilityContainer.validatePostCode($(\"#postcode\").val(), $(\".price-estimate #country\").val())\n                && UtilityContainer.validateEmptyFields([$(\"#postcode\")])\n                && !UtilityContainer.validateEmptyCart()) {\n\n                $(this).html('<i class=\"fa fa-spinner fa-spin\"></i>');\n\n                cartLogicContainer.ajaxCall();\n\n            }\n            else if (UtilityContainer.validateEmptyCart()) {\n                $(\"#cart-items .empty-cart\").removeClass(\"hidden\");\n            }\n            else {\n                UtilityContainer.addErrorClassToFieldsWithRules($(\"#postcode\"));\n            }\n        });\n    },\n\n    init: function () {\n        cartDisplayContainer.init();\n        cartLogicContainer.init();\n        cartDisplayContainer.setCartItemsHeight();\n\n        var self = cartDrawerInitContainer;\n        self.buyButtonClick();\n        self.getEstimateClick();\n    }\n\n}\n","/**\n * Container responsible for handling the logic of the wish list page.\n * Layout handled in dev/components/site/wishlist.js\n *\n * @type {{createWishlistElement: Function, renderWishlist: Function, removeWishlistElement: Function, init: Function}}\n */\nvar wishlistLogicContainer = {\n\n    /**\n     * Create a list layout element from the information passed as an argument.\n     *\n     * Rounding to 2 decimals, courtesy of http://stackoverflow.com/a/6134070.\n     *\n     * @param item\n     */\n    createWishlistElement: function(item) {\n        var self = wishlistLogicContainer,\n            element =\n            '<div class=\"col-md-12 list-layout-element\">' +\n            '<div class=\"col-md-2\">' +\n            '<img src=' + item.thumbnail_lg + '>' +\n            '</div>' +\n            '<div class=\"col-md-10\">' +\n            '<button class=\"btn btn-outline btn-danger-outline pull-right btn-lg inline-block padding-side-lg removeFavoriteButton\" data-product=\"' + item.product + '\">Remove from wishlist </button>' +\n            '<button class=\"btn btn-success buybutton pull-right btn-lg inline-block padding-side-lg\"' +\n            'data-product=\"' + item.product + '\"' +\n            'data-price=\"' + item.price + '\"' +\n            'data-thumbnail=\"' + item.thumbnail + '\"' +\n            'data-thumbnail_lg=\"' + item.thumbnail_lg + '\"' +\n            'data-name=\"' + item.name + '\"' +\n            'data-quantity=\"' + item.quantity  + '\"' + \">\" +\n            'Add to cart </button>' +\n            '<a href=' + item.link + '><h4 style=\"margin-top: 5px\">' + item.name + '</h4></a>' +\n            '<h5> $ ' + parseFloat(Math.round(item.price * 100) / 100).toFixed(2) + '</h5>'+\n            '</div>' +\n            '</div>';\n\n        //Localize button (default in english)\n        self.localizeWishlistButton();\n\n        //Append elements\n        $(\".list-layout-element-container\").append(element);\n    },\n\n    /**\n     * Populate the wishlist page with elements created on the fly from localStorage that has their key starting with \"_wish_prod {id}\".\n     * The creation is handled in createWishlistElement function.\n     *\n     */\n    renderWishlist: function() {\n        var self = wishlistLogicContainer;\n\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0)\n            {\n                self.createWishlistElement(JSON.parse(localStorage.getItem(localStorage.key(i))));\n            }\n        }\n    },\n\n    localizeWishlistButton: function() {\n        $(\".list-layout-element .buybutton\").text(Localization.add_cart);\n        $(\".list-layout-element .removeFavoriteButton\").text(Localization.wishlist_remove);\n    },\n\n    /**\n     * Remove the element from the wishlist after a subtle animation.\n     *\n     */\n    removeWishlistElement: function () {\n        $(\".list-layout-element-container\").on(\"click\", \".removeFavoriteButton\", function() {\n            //Animate the element.\n            UtilityContainer.addFadeOutUpClass($(this).closest(\".list-layout-element\"));\n\n            //Delete the element from localStorage.\n            localStorage.removeItem(\"_wish_product \" + $(this).data(\"product\"));\n\n            //Set wishlist header quantity.\n            wishlistContainer.setNumberOfProductsInHeader();\n\n            //Set wishlist badge\n            productLayoutFavoriteContainer.setWishlistBadgeQuantity();\n        });\n    },\n\n    init: function () {\n        var self = wishlistLogicContainer;\n\n        //Calls the layout container (wishlistContainer).\n        wishlistContainer.init();\n\n        //Initialize the logic.\n        self.renderWishlist();\n        self.removeWishlistElement();\n    }\n\n}","/**\n * Entry point of script.\n *\n */\n$(document).ready(function () {\n\n    /**\n     * Sets up the ajax token for all ajax requests\n     *\n     */\n    $.ajaxSetup({\n        headers: {\n            'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\n            'locale': $('html').attr('lang')\n        }\n    });\n\n    /**\n     * Initialize checkout logic.\n     *\n     */\n    checkoutInitContainer.init();\n\n    /**\n     * Initialize cart drawer logic.\n     *\n     */\n    cartDrawerInitContainer.init();\n\n    /**\n     * Initialize category container\n     *\n     */\n    categoryContainer.init();\n\n    /**\n     * Initialize overlay plugin.\n     *\n     */\n    paymentOverlayContainer.init();\n\n    /**\n     * Initialize navigation header.\n     *\n     */\n    headerContainer.init();\n\n    /**\n     * Initialize favorite products feature.\n     *\n     */\n    productLayoutFavoriteContainer.init();\n\n    /**\n     * Initialize wishlist page.\n     *\n     */\n    wishlistLogicContainer.init();\n\n    /**\n     * Global initialization of elements.\n     *\n     */\n    //fancy plugin for product page (quantity input)\n    $(\".input-qty\").TouchSpin({\n        initval: 1\n    });\n\n});"],"sourceRoot":"/source/"}
>>>>>>> Resolved merge conflict !
