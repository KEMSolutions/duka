{"version":3,"sources":["utility.js","layout/cart-slider.js","layout/payment-overlay.js","product/product-card-format.js","product/product-format.js","product/product-layout-favorite.js","product/product-quantity.js","checkout/checkout.js","semantic/semantic-init.js","site/category.js","site/wishlist/wishlist-logic.js","site/wishlist/wishlist.js","init.js"],"names":[],"mappingshhxzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpzolxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"duka.js","sourcesContent":["/**\n * Utility object containing various utility functions...\n * Self Explanatory duh.\n *\n * @type {{ getLocalizationAndEndpointUrl: Function,\n *          getAllProducts: Function,\n *          getNumberOfProductsInWishlist: Function,\n *          getNumberOfProducts: Function,\n *          getProductsPrice: Function,\n *          removeAllProducts: Function,\n *          getShippingFromForm: Function,\n *          buyButton_to_Json: Function,\n *          populateCountry: Function,\n *          validateEmptyFields: Function,\n *          validateEmail: Function,\n *          validatePostCode: Function,\n *          validateEmptyCart: Function,\n *          addErrorClassToFields: Function,\n *          addErrorClassToFieldsWithRules: Function,\n *          addFadeOutUpClass: Function,\n *          removeErrorClassFromFields: Function,\n *          getCheapestShippingMethod: Function,\n *          getTaxes: Function,\n *          getShipmentTaxes: Function,\n *          getCartTaxes: Function,\n *          getCartTotal: Function,\n *          urlGetParameters: Function,\n *          urlAddParameters: Function,\n *          urlRemoveParameters: Function,\n *          urlBuildQuery: Function\n *  }}\n */\nvar UtilityContainer = {\n\n    /**\n     * Utility function to get all Localization and Enpoint URLs.\n     *\n     */\n    getLocalizationAndEndpointUrl: function () {\n        return $.ajax({\n            url: $(\"meta[name=duka-localizations-and-endpoints-url]\").attr(\"content\"),\n            cache: true,\n            async: false\n        });\n    },\n\n\n    /**\n     * Utility function for getting all the products in cookies.\n     * Returns an array containing their id, their quantity and their price.\n     *\n     * @returns {Array}\n     */\n    getAllProducts : function() {\n        var res = [];\n\n        for (var item in Cookies.toObject()) {\n            if (item.indexOf(\"_product_\", 0) === 0) {\n                var product = JSON.parse(Cookies.get(item)),\n                    productId = product.product,\n                    productQuantity = product.quantity,\n                    productPrice = product.price;\n\n                res.push({\n                    id: productId,\n                    quantity: productQuantity,\n                    price : productPrice\n                });\n            }\n        }\n        return res;\n    },\n\n    /**\n     * Utility function returning the number of products present in the wish list.\n     *\n     * @returns {number}\n     */\n    getNumberOfProductsInWishlist : function() {\n        var total = 0;\n\n        for (var item in Cookies.toObject()) {\n            if (item.indexOf(\"_wish_product_\", 0) === 0) {\n                total += JSON.parse(Cookies.get(item)).quantity;\n            }\n        }\n\n        return total;\n    },\n\n    /**\n     * Utility function returning the number of products present in the cart.\n     *\n     * @returns {number}\n     */\n    getNumberOfProducts : function() {\n        var total = 0;\n\n        for (var item in Cookies.toObject()) {\n            if (item.indexOf(\"_product_\", 0) === 0) {\n                total += JSON.parse(Cookies.get(item)).quantity;\n            }\n        }\n\n        return total;\n    },\n\n    /**\n     * Utility function to get the total price from all products present in cookies.\n     *\n     * @returns {number}\n     */\n    getProductsPrice : function() {\n        var total = 0,\n            products = UtilityContainer.getAllProducts();\n\n        for(var i= 0, length = products.length; i<length; i++)\n        {\n            total += (products[i].price * products[i].quantity);\n        }\n\n        return total;\n    },\n\n    /**\n     * Utility function to delete all products from cookies.\n     *\n     */\n    removeAllProducts : function() {\n        for (var item in Cookies.toObject()) {\n            if (item.indexOf(\"_product_\", 0) === 0) {\n                Cookies.remove(item);\n            }\n        }\n    },\n\n    /**\n     * Utility function fo getting the country, the postal code and the province (if any) of the user.\n     *\n     * @returns {{country: (*|jQuery), postcode: (*|jQuery), province: (*|jQuery)}}\n     */\n    getShippingFromForm : function() {\n        return {\n            \"country\" : $(\"#shippingCountry\").val(),\n            \"postcode\" : $(\"#shippingPostcode\").val(),\n            \"province\" : $(\"#shippingProvince\").val(),\n            \"line1\" : $(\"#shippingAddress1\").val(),\n            \"line2\" : $(\"#shippingAddress2\").val(),\n            \"name\" : $(\"#shippingFirstname\").val() + \" \" + $(\"#shippingLastname\").val(),\n            \"city\" : $(\"#shippingCity\").val(),\n            \"phone\" : $(\"#shippingTel\").val()\n        };\n    },\n\n    /**\n     * parse the information from a buy button into a readable json format\n     *\n     * @param item\n     * @returns {{product: *, name: *, price: *, thumbnail: *, thumbnail_lg: *, quantity: number}}\n     */\n    buyButton_to_Json : function(item) {\n        return {\n            \"product\" : item.attr(\"data-product\"),\n            \"name\" : item.attr(\"data-name\"),\n            \"price\" : item.attr(\"data-price\"),\n            \"thumbnail\" : item.attr(\"data-thumbnail\"),\n            \"thumbnail_lg\" : item.attr(\"data-thumbnail_lg\"),\n            \"quantity\" : parseInt(item.attr(\"data-quantity\")),\n            \"link\" : item.attr(\"data-link\"),\n            \"description\" : item.attr(\"data-description\") ? item.attr(\"data-description\") : \"\"\n        }\n    },\n\n    /**\n     * Utility object used to populate a select list (#country) with a list of country (json formatted) in the appropriate language.\n     *\n     */\n    populateCountry : function (lang) {\n        var file = \"/js/data/country-list.\" + lang + \".json\",\n            listItems = '',\n            $country = $(\"#country\");\n\n        $.getJSON(file, function(data) {\n            $.each(data, function(key, val) {\n                if (key == \"CA\") {\n                    listItems += \"<option value='\" + key + \"' selected>\" + val + \"</option>\";\n                }\n                else {\n                    listItems += \"<option value='\" + key + \"'>\" + val + \"</option>\";\n                }\n            });\n            $country.append(listItems);\n        });\n    },\n\n    /**\n     * Check if the fields passed in the argument are empty or not.\n     *\n     * @param emptyFields\n     * @returns {boolean}\n     */\n    validateEmptyFields: function(emptyFields) {\n        var passed = true;\n        for(var i= 0, length = emptyFields.length; i<length; i++) {\n            if (emptyFields[i].val() == \"\")\n            {\n                passed = false;\n                break;\n            }\n        }\n        return passed;\n    },\n\n    /**\n     * Validate the email address passed as the argument.\n     *\n     * @param email\n     * @returns {boolean}\n     */\n    validateEmail: function(email) {\n        var re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n        return re.test(email);\n    },\n\n    /**\n     * Validate a CA or US postal code.\n     *\n     * @param postcode\n     * @param country\n     * @returns {boolean}\n     */\n    validatePostCode: function(postcode, country) {\n        if (country == \"CA\")\n            return postcode.match(/^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} ?\\d{1}[A-Z]{1}\\d{1}$/i) ? true : false;\n        else if (country == \"US\")\n            return postcode.match(/^\\d{5}(?:[-\\s]\\d{4})?$/) ? true : false;\n        else\n            return true;\n    },\n\n    /**\n     * Returns true if the cart is empty, false otherwise.\n     *\n     * @returns {*}\n     */\n    validateEmptyCart : function () {\n        var empty;\n        UtilityContainer.getProductsPrice() === 0 ?  empty = true : empty = false;\n\n        return empty;\n    },\n\n    /**\n     * Add .has-error to parent class + animate the relevant fields.\n     *\n     * @param fields\n     */\n    addErrorClassToFields: function(fields) {\n        for(var i= 0, length = fields.length; i<length; i++)\n        {\n            if (fields[i].val() == \"\")\n            {\n                fields[i].parent().addClass(\"has-error\");\n                fields[i].addClass('animated shake').bind('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\n                    $(this).removeClass(\"animated\");\n                    $(this).removeClass(\"shake\");\n                    $(this).unbind();\n                });\n            }\n        }\n    },\n\n    /**\n     * Same as addErrorClassToFields but accept a single input (ie. specific rules have to be applied: email / postal code / ...\n     *\n     * @param input\n     */\n    addErrorClassToFieldsWithRules: function(input) {\n        input.parent().addClass(\"has-error\");\n        input.addClass('animated shake').bind('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\n            $(this).removeClass(\"animated\");\n            $(this).removeClass(\"shake\");\n            $(this).unbind();\n        });\n    },\n\n    /**\n     * Adds a fadeOutUp class then hide the element passed as an argument.\n     *\n     * @param $element\n     */\n    addFadeOutUpClass: function ($element) {\n        $element.addClass(\"animated fadeOutUp\").delay(1000).queue(function() {\n            $(this).addClass(\"hidden\").clearQueue();\n        });\n    },\n\n    /**\n     * Remove .has-error from fields\n     *\n     * @param fields\n     */\n    removeErrorClassFromFields: function(fields) {\n        for(var i= 0, length = fields.length; i<length; i++)\n        {\n            if (fields[i].val() != \"\" && fields[i].parent().hasClass(\"has-error\"))\n            {\n                fields[i].parent().removeClass(\"has-error\");\n            }\n        }\n    },\n\n    /**\n     * Returns the method and the price of the cheapest shipping services.\n     *\n     * @param data\n     * @returns {{fare: *, method: (*|string)}}\n     */\n    getCheapestShippingMethod : function(data) {\n        var availableShipment = data.shipping.services,\n            sortedShipmentByPrice = [];\n\n        for(var i= 0, length = availableShipment.length; i<length; i++)\n        {\n            sortedShipmentByPrice.push(availableShipment[i]);\n        }\n\n        sortedShipmentByPrice.sort(function(a,b) {\n            return a.price - b.price\n        });\n\n        return {\n            fare: sortedShipmentByPrice[0].price,\n            method: sortedShipmentByPrice[0].method\n        }\n    },\n\n    /**\n     * Get the total taxes (TPS/TVQ or TVH or TPS or null) + shipping method taxes.\n     *\n     * @param data\n     * @returns {number}\n     */\n    getTaxes : function(data) {\n        var taxes = 0,\n            dataTaxesLength = data.taxes.length;\n\n        if (dataTaxesLength != 0)\n        {\n            for(var i=0; i<dataTaxesLength; i++)\n            {\n                taxes += data.taxes[i].amount;\n            }\n        }\n\n        return taxes.toFixed(2);\n    },\n\n    /**\n     * Get the relevant taxes according to the chosen shipping method.\n     *\n     * @param serviceCode\n     * @param data\n     * @returns {string}\n     */\n    getShipmentTaxes : function(serviceCode, data) {\n        var taxes = 0;\n\n        for(var i=0; i<data.shipping.services.length; i++)\n        {\n            if(data.shipping.services[i].method == serviceCode)\n            {\n                if (data.shipping.services[i].taxes.length != 0)\n                {\n                    for(var j=0; j<data.shipping.services[i].taxes.length; j++)\n                    {\n                        taxes += data.shipping.services[i].taxes[j].amount;\n                    }\n                }\n            }\n        }\n        return taxes.toFixed(2);\n    },\n\n    /**\n     * Returns appropriate taxes according to the shipping method.\n     *\n     * @param serviceCode\n     * @param data\n     * @returns {number}\n     */\n    getCartTaxes : function(serviceCode, data) {\n        var taxes = parseFloat(UtilityContainer.getTaxes(data)),\n            shippingTaxes = parseFloat(UtilityContainer.getShipmentTaxes(serviceCode, data)),\n            totalTaxes = taxes + shippingTaxes;\n\n        return totalTaxes;\n    },\n\n    /**\n     * Returns total price (subtotal + taxes + shipping taxes)\n     * Saves total in sessionStorage (for live update)\n     *\n     * @param data\n     * @returns {string}\n     */\n    getCartTotal : function(serviceCode, data) {\n        var taxes = parseFloat(UtilityContainer.getCartTaxes(serviceCode.method, data)),\n            shipping = parseFloat(UtilityContainer.getCheapestShippingMethod(data).fare),\n            subtotal = parseFloat(UtilityContainer.getProductsPrice()),\n            total = (taxes + shipping + subtotal).toFixed(2);\n\n        return total;\n    },\n\n    /**\n     * Update the value of #cart_badge when adding or deleting elements.\n     *\n     */\n    setBadgeQuantity : function() {\n        $(\".cart_badge\").text(UtilityContainer.getNumberOfProducts());\n    },\n\n    /**\n     * Retrieves the query parameters from the URL.\n     * Courtesy of http://stackoverflow.com/a/1917916\n     *\n     * @returns object\n     */\n    urlGetParameters : function() {\n\n        // Performance check.\n        var query = document.location.search.substr(1);\n        if (query.length < 1) {\n            return {};\n        }\n\n        // Loop through query elements.\n        var kvp = query.split('&'), index, pair, key, value, pairs = {};\n        for (index in kvp)\n        {\n            // Skip parameters without any values.\n            if (kvp[index].indexOf('=') < 1) {\n                continue;\n            }\n\n            // Save query value.\n            pair = kvp[index].split('=');\n            key = decodeURIComponent(pair[0]), value = decodeURIComponent(pair[1]);\n            pairs[key] = value;\n\n            // Split up queries with a \";\" in the value.\n            if (value.indexOf(';') > -1) {\n                pairs[key] = value.split(';');\n            }\n        }\n\n        return pairs;\n    },\n\n    /**\n     * Adds one or more query parameters to the URL and reloads the page.\n     * Courtesy of http://stackoverflow.com/a/1917916\n     *\n     * @param mixed key     Either a query key, or an object representing all the key-pair values to be added.\n     * @param mixed value   Query value, or null if key is an object.\n     * @constructor\n     */\n    urlAddParameters : function(key, value) {\n\n        // We either accept a key-value pair, or a query object.\n        var params = {};\n        if (typeof key == \"object\") {\n            params = key;\n        } else if (typeof key == \"string\" && typeof value != \"undefined\") {\n            params[key] = value;\n        } else {\n            return console.log(\"Invalid query parameters.\");\n        }\n\n        // Add query parameters to existing ones.\n        var query = this.urlGetParameters(), index;\n        for (index in params) {\n            query[index] = params[index];\n        }\n\n        // Build query string and reload the page.\n        document.location.search = this.urlBuildQuery(query);\n    },\n\n    urlRemoveParameters : function(key) {\n\n        key = typeof key == \"string\" ? [key] : key;\n\n        // Try to remove one or more query parameters.\n        var query = this.urlGetParameters();\n        key.forEach(function(param, index, keys)\n        {\n            if (typeof query[param] != \"undefined\") {\n                delete query[param];\n            }\n        });\n\n        // Update the URL query.\n        document.location.search = this.urlBuildQuery(query);\n    },\n\n    urlBuildQuery : function(query) {\n\n        // Build query string.\n        // We use encodeURIComponent() instead of the deprecated escape() function.\n        var newQuery = [];\n        for (var index in query) {\n            if (typeof query[index] != \"undefined\" && query[index] != null)\n            {\n                // Concatenate arrays.\n                if (typeof query[index] == 'object') {\n                    query[index] = query[index].join(';');\n                }\n\n                newQuery.push(encodeURIComponent(index) +'='+ encodeURIComponent(query[index]));\n            }\n        }\n\n        return \"?\"+ (newQuery.length > 1 ? newQuery.join('&') : newQuery[0]);\n    }\n};\n\n","var cartSliderContainer = {\n\n    /**\n     * Responsible for the logic.\n     * CRUD.\n     *\n     */\n    behaviour: {\n        /**\n         * Event triggered when a buy button is clicked.\n         *\n         */\n        buyButtonClick : function () {\n            $(\"body\").on(\"click\", \".buybutton\", function() {\n\n                cartSliderContainer.behaviour.addItem(UtilityContainer.buyButton_to_Json($(this)));\n                cartSliderContainer.behaviour.storeItem(UtilityContainer.buyButton_to_Json($(this)));\n\n                // We remove the \"Your cart is empty\" message at the top every time we add an item.\n                $(\"#empty-cart\").addClass(\"hidden\");\n            });\n        },\n\n\n        /**\n         * Add an item in the list.\n         *\n         * @param item JSON format converted from attributes on the .buybutton\n         */\n        addItem : function(item) {\n            var price = (parseInt(item.quantity) * parseFloat(item.price)).toFixed(2);\n\n            var productItem =\n                '<div class=\"very padded item animated fadeInUp\" style=\"margin: 1rem auto;\" data-product=\"' + item.product + '\"data-quantity=1>' +\n                '<div class=\"ui tiny left floated image\">' +\n                '<img src=\"' + item.thumbnail_lg + '\"/>' +\n                '</div>' +\n                '<div class=\"middle aligned content\">' +\n                '<h4 class=\"ui header\">' + item.name + '</h4>' +\n                '<div class=\"meta\">' +\n                '<span class=\"price\" data-price=\"' + item.price + '\">$' + price  + '</span>' +\n                '<i class=\"trash icon large pull-right close-button\"></i>' +\n                '</div>' +\n                '<div class=\"content cart-content\">' +\n                '<span>'+ Localization.quantity + '</span>' +\n                '<div class=\"ui input small\">' +\n                '<input type=\"number\" class=\"quantity\" min=\"1\" step=\"1\" value=\"' + item.quantity + '\" name=\"products[' + item.product + '][quantity]\">' +\n                '<input type=\"hidden\" name=\"products[' + item.product + '][id]\" value=\"' + item.product + '\"/> ' +\n                '</div>' +\n                '</div>' +\n                '</div>' +\n                '</div>';\n\n            if (!$(\".cart-items-list [data-product='\" + item.product + \"']\").length){\n                $(\".cart-items-list\").append(productItem);\n            }\n\n        },\n\n\n        /**\n         * Store a product in Cookies.\n         * Update badge quantity.\n         * Create/update a quantity cookie.\n         *\n         * @param item JSON format converted from attributes on the .buybutton\n         */\n        storeItem : function(item) {\n            if(Cookies.get(\"_product_\" + item.product) != undefined)\n            {\n                // Update the Cookie value of an already existing product.\n                var quantity_updated = JSON.parse(Cookies.get(\"_product_\" + item.product)).quantity + 1;\n\n                // Update the input value already displayed in the cart drawer.\n                $(\"input[name='products[\" + item.product + \"][quantity]']\").attr(\"value\", quantity_updated);\n\n                // Set the item.\n                Cookies.set(\"_product_\" + item.product,\n                    {\n                        product : item.product,\n                        name : item.name,\n                        price : item.price,\n                        thumbnail : item.thumbnail,\n                        thumbnail_lg : item.thumbnail_lg,\n                        quantity : quantity_updated,\n                        link : item.link,\n                        description : item.description\n                    }\n                );\n            }\n            else {\n                Cookies.set(\"_product_\" + item.product, item);\n            }\n            UtilityContainer.setBadgeQuantity();\n            cartSliderContainer.behaviour.setQuantityCookie();\n            cartSliderContainer.view.setSubtotal();\n        },\n\n\n        /**\n         * Load a list of items previously bought into the cart.\n         * If there is no item in Cookies starting with the key \"_product\", then nothing is loaded.\n         */\n        loadItem : function() {\n            var cookies = Cookies.toObject();\n\n            for (var item in cookies) {\n                if (item.indexOf(\"_product_\", 0) === 0) {\n                    $(\"#empty-cart\").addClass(\"hidden\");\n                    cartSliderContainer.behaviour.addItem(JSON.parse(Cookies.get(item)));\n                }\n            }\n        },\n\n\n        /**\n         * Delete an item from the cart drawer list.\n         * Remove it from the DOM.\n         * Delete the object on Cookies.\n         * Set Badge quantity accordingly.\n         * Update Cookie quantity accordingly.\n         *\n         */\n        deleteItem: function() {\n            $(document).on('click', \".close-button\", function() {\n\n                // We fade out the item...\n                var $item = $(this).closest(\".animated\").addClass(\"animated fadeOutUp\");\n\n                // Then we remove it from the dom...\n                $item.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){\n                    $(this).remove();\n\n                    // Display a message if the cart has no more item in it.\n                    UtilityContainer.getNumberOfProducts() === 0 ? $(\"#empty-cart\").removeClass(\"hidden\") : null;\n                });\n\n                // To finally delete it from Cookies.\n                Cookies.remove(\"_product_\" + $(this).closest(\".animated\").data(\"product\"));\n\n                UtilityContainer.setBadgeQuantity();\n                cartSliderContainer.view.setSubtotal();\n                cartSliderContainer.behaviour.setQuantityCookie();\n\n            });\n        },\n\n\n        /**\n         * Modify the quantity of a product in the cart.\n         * Update its price label accordingly.\n         * Update the Cookies.\n         * Set badge quantity.\n         * Update Cookie quantity.\n         *\n         */\n        modifyQuantity : function() {\n            $(\".cart-items-list\").on(\"change\", \".quantity\", function() {\n                var $container = $(this).closest(\".item\"),\n                    $product_price = $container.find(\".price\");\n\n                //update the total value\n                $product_price.text(\"$\" + ($product_price.data(\"price\") * $(this).val()).toFixed(2));\n\n                //retrieve old data from old object then update the quantity and finally update the object\n                var oldData = JSON.parse(Cookies.get(\"_product_\" + $container.data(\"product\")));\n                oldData.quantity = parseInt($(this).val());\n                Cookies.set(\"_product_\" + $container.data(\"product\"), oldData);\n\n                UtilityContainer.setBadgeQuantity();\n                cartSliderContainer.view.setSubtotal();\n                cartSliderContainer.behaviour.setQuantityCookie();\n\n            });\n        },\n\n\n        /**\n         * Create or Update a cookie with the quantity present in the cart.\n         * The value of the cookie is encoded in base64 (btoa)\n         *\n         */\n        setQuantityCookie : function () {\n            var number = UtilityContainer.getNumberOfProducts();\n\n            if (Cookies.get(\"quantityCart\") == undefined || number === 0)\n            {\n                Cookies.set(\"quantityCart\", btoa(\"0\"));\n            }\n            else {\n                Cookies.set(\"quantityCart\", btoa(number));\n            }\n        }\n    },\n\n\n\n    /**\n     * Responsible for the view aspect.\n     *\n     */\n    view: {\n        /**\n         * Slide in the cart-drawer (slider?) when adding items or clicking on the .view-cart trigger.\n         *\n         */\n        slideIn: function () {\n            $(\".view-cart, .buybutton, .close-cart\").on(\"click\", function () {\n                $(\".cart-drawer\").sidebar(\"toggle\");\n            });\n        },\n\n\n        /**\n         * Update the value of .subtotal when adding or deleting elements.\n         *\n         */\n        setSubtotal: function () {\n            var subtotal = UtilityContainer.getProductsPrice(),\n                subtotal_label = \"CAD $\" + subtotal.toFixed(2);\n\n            if ($(\"meta[name='user-currency-code'], meta[name='user-currency-rate']\").length > 0) {\n                var currency_price = (subtotal * parseFloat($(\"meta[name='user-currency-rate']\").attr(\"content\"))).toFixed(2);\n\n                subtotal_label += \" (\" + $(\"meta[name='user-currency-code']\").attr(\"content\") + \" \" + currency_price + \")\" ;\n            }\n            $(\".subtotal\").text(subtotal_label);\n        }\n    },\n\n\n    init : function() {\n        var behaviour = cartSliderContainer.behaviour;\n        var view = cartSliderContainer.view;\n\n\n        view.setSubtotal();\n        view.slideIn();\n        UtilityContainer.setBadgeQuantity();\n\n\n        behaviour.buyButtonClick();\n        behaviour.loadItem();\n        behaviour.deleteItem();\n        behaviour.modifyQuantity();\n        behaviour.setQuantityCookie();\n    }\n\n};","/**\n * Component responsible for handling the payment overlay behaviour.\n * Entry point is in checkPendingOrders.\n *\n * @type {{cancelOrder: Function, displayUnpaidOverlay: Function, displayCongratulateOverlay: Function, renderAddress: Function, renderAdditionalDetails: Function, checkPendingOrders: Function, init: Function}}\n */\nvar paymentOverlayContainer = {\n\n    /**\n     * Cancel an order.\n     * If the user clicks the cancel button, remove the cookie, flush the card, fadeOut the jumbotron then redirect to homepage.\n     *\n     */\n    cancelOrder : function() {\n        $(\"body\").on(\"click\", \"#cancelOrder\", function() {\n            Cookies.remove(\"_current_order\");\n\n            $(\"#cancelledOrder\").fadeOut();\n\n            window.location.replace(\"/\");\n\n            UtilityContainer.removeAllProducts();\n        });\n    },\n\n\n    /**\n     * Display the unpaid overlay using semantic-ui modal module.\n     *\n     */\n    displayUnpaidOverlay: function () {\n        var order = JSON.parse(Cookies.get('_current_order'));\n\n        var unpaidOverlay =\n            '<div class=\"ui small modal text-center unpaid-modal\">' +\n                '<i class=\"close icon\"></i>' +\n                '<div class=\"header\">' +\n                    Localization.pending_order.replace(':command', order.id) +\n                '</div>' +\n                '<div class=\"content\">' +\n                    '<div class=\"description\">' +\n                        '<div class=\"ui header\">'  +\n                            Localization.what_to_do +\n                        '</div>' +\n                        '<a href=\"' + order.payment_url + '\">' +\n                            '<button class=\"ui button green\" id=\"payOrder\">'+ Localization.pay_now +'</button>'+\n                        '</a>' +\n                        '<button class=\"ui button red\" id=\"cancelOrder\">'+\n                            Localization.cancel_order +\n                        '</button>'+\n                    '</div>' +\n                '</div>' +\n            '</div>';\n\n        $(\"body\").prepend(unpaidOverlay);\n        $(\".small.unpaid-modal\").modal(\"show\");\n\n    },\n\n\n    /**\n     * Display the congratulate overlay using semantic-ui modal module.\n     *\n     * @param order\n     */\n    displayCongratulateOverlay: function (order) {\n        var overlay =\n            '<div class=\"ui modal congratulate-modal payment_successful\">' +\n                '<div class=\"header\">' +\n                    Localization.payment_successful +\n                '</div>' +\n                '<div class=\"content\">' +\n                    '<div class=\"description\">' +\n                        '<div class=\"ui header\">' +\n                            Localization.summary_below +\n                        '</div>' +\n                        '<p>' + Localization.summary_copy + '</p>' +\n                    '</div>' +\n                    '<br/>' +\n                    '<table class=\"ui striped table\" style=\"margin: 0 auto\">' +\n                        '<tbody class=\"center aligned\">' +\n                            '<tr>' +\n                                '<td>' + Localization.order + '</td>' +\n                                '<td>' + \"#\" + order.id + '</td>' +\n                            '</tr>' +\n\n                            this.renderAdditionalDetails(order) +\n\n                        '</tbody>' +\n                    '</table>' +\n                '</div>' +\n                '<div class=\"actions\">' +\n                    '<div class=\"ui black deny button\">' +\n                        Localization.close +\n                    '</div>' +\n                '</div>' +\n            '</div>';\n\n        $(\"body\").prepend(overlay);\n\n        $(\".congratulate-modal\").modal(\"show\");\n    },\n\n    /**\n     * Render the appropriate address' <td> tags according to the type of address.\n     *\n     * @param [object] address_details\n     * @param [string] address_type_name\n     * @returns {string}\n     */\n    renderAddress: function (address_details, address_type_name) {\n        var line2 = address_details.line2 == null ? '' : address_details.line2 + '<br/>';\n\n        return '<tr>' +\n                    '<td>' + address_type_name + '</td>' +\n                    '<td>' +\n                        address_details.name +\n                        '<br/>' +\n                        address_details.line1 +\n                        '<br/>' +\n                        line2 +\n                        address_details.city +\n                        ', ' +\n                        address_details.province +\n                        ', ' +\n                        address_details.postcode +\n                        '<br/>' +\n                        address_details.country +\n\n                    '</td>' +\n                '</tr>';\n    },\n\n\n    /**\n     * Check if there are any additional details.\n     * If there are, insert them in the summary table.\n     *\n     * @param order\n     * @returns {string}\n     */\n    renderAdditionalDetails: function (order) {\n        if (order.shipping_address != null) {\n            return this.renderAddress(order.shipping_address, Localization.shipping_address) +\n                    this.renderAddress(order.billing_address, Localization.billing_address) +\n                '<tr>' +\n                        '<td>' + Localization.subtotal + '</td>' +\n                        '<td>' + \"$\" + parseFloat(order.payment_details.subtotal).toFixed(2) + '</td>' +\n                    '</tr>' +\n\n                    '<tr>' +\n                        '<td>' + Localization.taxes + '</td>' +\n                        '<td>' + \"$\" + parseFloat(order.payment_details.taxes).toFixed(2) + '</td>' +\n                    '</tr>' +\n\n                    '<tr>' +\n                        '<td>' + Localization.total + '</td>' +\n                        '<td>' + \"$\" + parseFloat(order.payment_details.total).toFixed(2) + '</td>' +\n                    '</tr>';\n        }\n        else {\n            return '';\n        }\n    },\n\n\n    /**\n     * Checks the status of the current order stored in _current_order cookie.\n     *\n     * If the order is paid and the call is made by the same user who passed the order,\n     * we display a summary. Laravel takes care of the check, as this can raise security\n     * concerns...\n     *\n     */\n    checkPendingOrders : function() {\n\n        if (Cookies.get('_current_order')) {\n\n            // Retrieve order details.\n            var order = JSON.parse(Cookies.get('_current_order'));\n\n            // Check whether current order has been paid.\n            $.ajax({\n                type: 'GET',\n                url: ApiEndpoints.orders.view.replace(':id', order.id).replace(':verification', order.verification),\n                success: function(order_details) {\n                    if (order_details.status === 'pending') {\n                        this.displayUnpaidOverlay();\n                    }\n                    else if (order_details.status === 'paid') {\n\n                        // Display congratulation dimmer.\n                        this.displayCongratulateOverlay(order_details);\n\n\n\n                        // Register data for Google Analytics Ecommerce module (if GAE is available)\n                        if (window.ga && ga.create) {\n                            GAEAnalytics.register(order_details);\n                        }\n\n\n\n                        // Remove products from cart\n                        UtilityContainer.removeAllProducts();\n                        UtilityContainer.setBadgeQuantity();\n\n\n                        // Delete the unpaid orders cookie (if any).\n                        Cookies.remove('_current_order');\n                    }\n                    else {\n                        Cookies.remove('_current_order');\n                    }\n                }.bind(this)\n            });\n        }\n\n    },\n\n\n    /**\n     * Register functions to be called outside paymentOverlayContainer.\n     *\n     */\n    init : function() {\n        var self = paymentOverlayContainer;\n\n        self.cancelOrder();\n        self.checkPendingOrders();\n\n    }\n};\n","Vue.component(\"product-card\", {\n    template: '#product-card-template',\n\n    props: {\n        name: String,\n        productId: Number,\n        route: String,\n        formatNumber: Number,\n        image: String,\n        thumbnail: String,\n        thumbnailLg: String,\n        description: String,\n        products: Array,\n        firstFormatPrice: Number,\n        firstFormatReducedPrice: Number,\n        firstFormatRebatePercent: String,\n        brandSlug: String,\n        brandName: String\n    },\n\n    data: function () {\n        return {\n            productFormat: \"\"\n        }\n    }\n});","/**\n * Component responsible for handling different formats of the same product.\n *\n * @type {{productWithFormat: Function, productWithoutFormat: Function, updateBuybuttonAttributes: Function, updateProductInformation: Function, init: Function}}\n */\nvar productFormatContainer = {\n\n    /**\n     * Update price value for a product with format.\n     *\n     * @param option\n     */\n    productWithFormat: function(option) {\n        var price = '<span class=\"text-strikethrough\">' +\n            'CAD $ ' + option.find(\":selected\").data(\"price\") +\n            '</span>' +\n            '<span id=\"product-price\" class=\"strong text-danger\">' +\n            'CAD $ ' + option.find(\":selected\").data(\"reduced\") +\n            '</span>';\n\n        $(\".sub.header\").text(price);\n    },\n\n\n    /**\n     * Update price value for a format-less product.\n     *\n     * @param option\n     */\n    productWithoutFormat: function(option) {\n        // Change description.\n        $(\"#product-format-name\").text(option.find(\":selected\").data(\"format\"));\n        $(\"#product-price\").text(\"CAD $ \" + option.find(\":selected\").data(\"price\"));\n    },\n\n\n    /**\n     * Update buybutton data attributes according to format: id/price/name/format.\n     *\n     * @param option\n     */\n    updateBuybuttonAttributes: function (option) {\n        $(\".buybutton\").attr({\n            'data-product': option.val(),\n            'data-price': option.find(\":selected\").data(\"price\"),\n            'data-name': option.find(\":selected\").data(\"name\"),\n            'data-format': option.find(\":selected\").data(\"format\")\n        });\n    },\n\n    /**\n     * Main function of this module.\n     * Once the format selector is clicked, trigger the appropriate helpers then update buybutton.\n     *\n     */\n    updateProductInformation: function() {\n        var self = productFormatContainer;\n\n        $(\"#product-format\").on(\"change\", function () {\n\n            if ($(this).find(\":selected\").data(\"reduced\")) {\n                // Add discounted price for a product with different formats.\n                self.productWithFormat($(this));\n            }\n            else {\n                // Add discounted price for a single format product.\n                self.productWithoutFormat($(this));\n            }\n\n\n            // Update buybutton with right attributes.\n            self.updateBuybuttonAttributes($(this));\n        });\n\n    },\n\n    /**\n     * Entry point of this module.\n     *\n     */\n    init: function () {\n        const self = productFormatContainer;\n\n        self.updateProductInformation();\n\n    }\n}","/**\n * Component responsible for adding products to a user's wishlist.\n *\n * @type {{fadeInFavoriteIcon: Function, setPopupText: Function, setWishlistBadgeQuantity: Function, addToFavorite: Function, persistFavorite: Function, removeFromFavorite: Function, init: Function}}\n */\nvar productLayoutFavoriteContainer = {\n    /**\n     * Fade in the favorite icon (heart icon) when hovering on a product tile.\n     *\n     */\n    fadeInFavoriteIcon: function() {\n        self = productLayoutFavoriteContainer;\n\n        $(\".dense-product\").hover(function() {\n\n            $(this).children(\".favorite-wrapper\").fadeIn();\n            self.setPopupText($(this).children(\".favorite-wrapper\"));\n\n        }, function () {\n            $(this).children(\".favorite-wrapper\").hide();\n        });\n    },\n\n    /**\n     * Set popup text according to current state of the wrapper.\n     *\n     * @param wrapper\n     */\n    setPopupText: function (wrapper) {\n        if($(wrapper).hasClass(\"favorited\")){\n            $(wrapper).attr(\"title\", Localization.wishlist_remove);\n        }\n        else {\n            $(wrapper).attr(\"title\", Localization.wishlist_add);\n        }\n    },\n\n    /**\n     * Update the value of .wishlist_badge when adding or deleting elements.\n     *\n     */\n    setWishlistBadgeQuantity : function() {\n        var total = UtilityContainer.getNumberOfProductsInWishlist();\n\n        $(\".wishlist_badge\").text(total);\n    },\n\n    /**\n     * Add the clicked product to the wish list.\n     *\n     */\n    addToFavorite: function() {\n        var self = productLayoutFavoriteContainer,\n            item;\n\n        $(\".favorite-wrapper\").on(\"click\", function() {\n            //No favorited class.\n            if (!$(this).hasClass(\"favorited\")) {\n                item = UtilityContainer.buyButton_to_Json($(this).parent().find(\".buybutton\"));\n                localStorage.setItem(\"_wish_product \" + item.product, JSON.stringify(item));\n\n                //Set the favorite icon to be displayed\n                $(this).addClass(\"favorited\");\n\n                //Set wishlist badge quantity\n                self.setWishlistBadgeQuantity();\n            }\n            else\n            //Has a favorited class. We remove it, then delete the element from local Storage.\n            {\n                self.removeFromFavorite($(this), self);\n            }\n        });\n    },\n\n    /**\n     * Persist the heart icon next to products already marked as wished.\n     *\n     */\n    persistFavorite: function() {\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0) {\n                for(var j = 0; j<$(\".favorite-wrapper\").length; j++)\n                {\n                    if(JSON.parse(localStorage.getItem(localStorage.key(i))).product === $(\".favorite-wrapper\")[j].dataset.product)\n                    {\n                        $(\".favorite-wrapper\")[j].className += \" favorited\";\n                    }\n                }\n            }\n        }\n    },\n\n    /**\n     * Delete the clicked element from the wish list.\n     *\n     * @param element\n     * @param context\n     */\n    removeFromFavorite: function (element, context) {\n        element.removeClass(\"favorited\");\n        localStorage.removeItem(\"_wish_product \" + element.data(\"product\"));\n        context.setWishlistBadgeQuantity();\n    },\n\n    init: function () {\n        var self = productLayoutFavoriteContainer;\n\n        self.setPopupText();\n        self.addToFavorite();\n        self.persistFavorite();\n        self.fadeInFavoriteIcon();\n        self.setWishlistBadgeQuantity();\n    }\n}","/**\n * Component responsible for changing quantity on the product page view.\n *\n * @type {{addQuantity: Function, removeQuantity: Function, updateBuyButton: Function, init: Function}}\n */\nvar productQuantityContainer = {\n    addQuantity : function(input, callback) {\n        $(\".qty-selector[data-action='add']\").on(\"click\", function() {\n            input.val(parseInt(input.val()) + 1);\n\n            callback();\n        });\n    },\n\n    removeQuantity: function(input, callback) {\n        $(\".qty-selector[data-action='remove']\").on(\"click\", function() {\n            var actual = parseInt(input.val());\n\n            if (actual > 1) {\n                input.val(parseInt(input.val()) - 1);\n            }\n\n            callback();\n        });\n    },\n\n    updateBuyButton: function() {\n        $(\".buybutton\").attr(\"data-quantity\", $(\".qty-selector-input\").val());\n    },\n\n    init: function () {\n        var self = productQuantityContainer;\n        self.addQuantity($(\".qty-selector-input\"), self.updateBuyButton);\n        self.removeQuantity($(\".qty-selector-input\"), self.updateBuyButton);\n\n    }\n};","/**\n * Component responsible for handling the checkout process.\n * @type {{validation: {validateFormFields: Function}, view: {autofillBillingInformation: Function, clearFields: Function, dispatchButtonsActions: Function, displayContactInformation: Function, displayShipmentMethodsAndPriceInformation: Function, fadeInBillingInformation: Function, fetchEstimate: Function, fetchPayment: Function, setInternationalFields: Function, updatePayment: Function}, actions: {createOrdersCookie: Function, getShipmentTaxes: Function, getTaxes: Function, placeOrderAjaxCall: Function, shipmentMethodsAjaxCall: Function}, bootstrap: {selectDefaultShipmentMethod: Function}, init: Function}}\n */\nvar checkoutContainer = {\n\n    /**\n     * Responsible for validating the form.\n     *\n     */\n    validation: {\n\n        /**\n         * Validate the form by following a set of rules defined in validationRules.\n         *\n         */\n        validateFormFields: function () {\n            var self = checkoutContainer;\n\n            var validationRules =\n            {\n                shippingFirstname: {\n                    identifier: 'shippingFirstname',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_name\n                        }\n                    ]\n                },\n\n                shippingLastname: {\n                    identifier: 'shippingLastname',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_name\n                        }\n                    ]\n                },\n\n                shippingAddress1: {\n                    identifier: 'shippingAddress1',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_address_shipping\n                        }\n                    ]\n                },\n\n\n                shippingCountry: {\n                    identifier: 'shippingCountry',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_address_shipping\n                        }\n                    ]\n                },\n\n                shippingProvince: {\n                    identifier: 'shippingProvince',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_address_shipping\n                        }\n                    ]\n                },\n\n                shippingCity: {\n                    identifier: 'shippingCity',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_city_shipping\n                        }\n                    ]\n                },\n\n                shippingPostcode: {\n                    identifier: 'shippingPostcode',\n                    rules: [\n                        {\n                            type   : 'postalCode[shippingCountry]',\n                            prompt : Localization.validation_post_shipping\n                        }\n                    ]\n                },\n\n                customer_email: {\n                    identifier: 'customer_email',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_email\n                        },\n                        {\n                            type   : 'email',\n                            prompt : Localization.validation_valid_email\n                        }\n                    ]\n                },\n\n                customer_phone: {\n                    identifier: 'customer_phone',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_phone\n                        }\n                    ]\n                },\n\n                billingFirstname: {\n                    identifier: 'billingFirstname',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_name\n                        }\n                    ]\n                },\n\n                billingLastname: {\n                    identifier: 'billingLastname',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_name\n                        }\n                    ]\n                },\n\n                billingAddress1: {\n                    identifier: 'billingAddress1',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_address_billing\n                        }\n                    ]\n                },\n\n                billingCountry: {\n                    identifier: 'billingCountry',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_address_shipping\n                        }\n                    ]\n                },\n\n                billingProvince: {\n                    identifier: 'billingProvince',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_address_shipping\n                        }\n                    ]\n                },\n\n                billingCity: {\n                    identifier: 'billingCity',\n                    rules: [\n                        {\n                            type   : 'empty',\n                            prompt : Localization.validation_city_billing\n                        }\n                    ]\n                },\n\n                billingPostcode: {\n                    identifier: 'billingPostcode',\n                    rules: [\n                        {\n                            type   : 'postalCode[billingCountry]',\n                            prompt : Localization.validation_post_billing\n                        }\n                    ]\n                }\n            };\n\n\n            $(\".form-checkout\").form({\n                fields: validationRules,\n                inline: true,\n                on    : 'blur',\n\n                onSuccess: function (e) {\n                    // We prevent default here, so that the form is not submitted when clicked on \"next\" (which is a submit button)\n                    e.preventDefault();\n\n                    // We are calling a function responsible for attributing each button's behaviour.\n                    self.view.dispatchButtonsActions();\n\n                    // Makes cart items not editable.\n                    $(\".cart-items-list .close-button\").fadeOut();\n                    $(\".cart-items-list .cart-content .input\").addClass(\"disabled\");\n                }\n            });\n\n        }\n    },\n\n    /**\n     * Responsible for handling the view aspect of checkout.\n     *\n     */\n    view: {\n        /**\n         * Auto fill the billing information if the checkbox is ticked.\n         *\n         */\n        autofillBillingInformation: function () {\n            var shippingFirstname = $(\"#shippingFirstname\").val(),\n                shippingLastname = $(\"#shippingLastname\").val(),\n                shippingAddress1 = $(\"#shippingAddress1\").val(),\n                shippingCity = $(\"#shippingCity\").val(),\n                shippingPostcode = $(\"#shippingPostcode\").val();\n\n            $(\".form-checkout\").form('set values', {\n                billingFirstname: shippingFirstname,\n                billingLastname : shippingLastname,\n                billingAddress1 : shippingAddress1,\n                billingCity     : shippingCity,\n                billingPostcode : shippingPostcode\n            });\n        },\n\n\n        /**\n         * Small utility function used to clear a field.\n         *\n         * @param node\n         * @param fields\n         */\n        clearFields: function (node, fields) {\n            node.find(fields).val(\"\");\n        },\n\n\n        /**\n         *  Defines a specific behaviour depending on which button is clicked after a form validation passes.\n         *\n         */\n        dispatchButtonsActions: function () {\n            var self = checkoutContainer;\n\n            // Default actions triggered right after all validation passes and the next button is clicked.\n            self.view.displayShipmentMethodsAndPriceInformation();\n            self.actions.shipmentMethodsAjaxCall();\n\n            // When clicked on the back button, display the contact information.\n            $(\".back-contact-info\").on(\"click\", function (e) {\n\n                // Once again, we prevent default here since, oddly, every button inside a semantic-ui validated form\n                // triggers a form submit.\n                e.preventDefault();\n\n                self.view.displayContactInformation(e);\n\n                // Makes cart items editable.\n                $(\".cart-items-list .close-button\").fadeIn();\n                $(\".cart-items-list .cart-content .input\").removeClass(\"disabled\");\n            });\n\n            // When clicked on the next button, we process the payment.\n            $(\".next-payment-process\").on(\"click\", function (e) {\n                e.preventDefault();\n\n                // Creates a redirecting dimmer.\n                var dimmer = '<div class=\"ui page dimmer redirect-dimmer\">' +\n                    '<div class=\"content\">' +\n                    '<div class=\"center\"><div class=\"ui text loader\"><h3 class=\"ui header white\">' + Localization.payment_redirect +'</h3></div></div>' +\n                    '</div>' +\n                    '</div>';\n\n                $(dimmer).appendTo(\"body\");\n                $(\".redirect-dimmer\").dimmer(\"show\");\n\n                // Makes the ajax call.\n                self.actions.placeOrderAjaxCall();\n\n            });\n        },\n\n\n        /**\n         * Displays the contact information.\n         *\n         * @param e\n         */\n        displayContactInformation: function (e) {\n            $(\".priceInformation\").fadeOut(300);\n            $(\".shippingMethod\").fadeOut(300, function() {\n                $(\".contactInformation\").fadeIn();\n            });\n\n            // We need to stop event bubbling from the back button.\n            // TBH, I didn't really look into it but one of these two should be enough...\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        },\n\n\n        /**\n         * Fades out the contact information segments then fades in the shipping methods and price information segment.\n         *\n         */\n        displayShipmentMethodsAndPriceInformation: function () {\n\n            var $contactInformation = $(\".contactInformation\"),\n                $shippingMethod = $(\".shippingMethod\"),\n                $priceInformation = $(\".priceInformation\");\n\n            $contactInformation.fadeOut(300, function() {\n                $(\".shippingMethod .loadable-segment, .priceInformation .loadable-segment\").addClass(\"loading\");\n\n                //Fade the shipping methods and price info from the left.\n                $shippingMethod.show(0, function() {\n                    $(this).removeClass(\"hidden animated fadeInLeft\").addClass(\"animated fadeInLeft\");\n                });\n\n\n                $priceInformation.show(0, function() {\n                    $(this).removeClass(\"hidden animated fadeInLeft\").addClass(\"animated fadeInLeft\");\n                });\n            });\n        },\n\n\n        /**\n         * Fades in the billing information segment.\n         *\n         */\n        fadeInBillingInformation: function () {\n            var self = checkoutContainer;\n\n            $(\".billing-checkbox\").checkbox({\n                onUnchecked: function () {\n                    $(\".billingInformation\").hide().removeClass(\"hidden\").fadeIn(400);\n                    self.view.clearFields($(\".billingInformation\"), \"input:text\");\n                },\n\n                onChecked: function () {\n                    $(\".billingInformation\").fadeOut(300, function () {\n                        $(this).delay(300).addClass(\"hidden\");\n                    })\n                }\n            })\n        },\n\n\n        /**\n         * Creates a table of available shipments populated with data from the api call.\n         *\n         * @param data\n         */\n        fetchEstimate: function (data) {\n            var self = checkoutContainer;\n\n            $(\"#shippingMethod-table-tbody\").empty();\n\n            for(var i = 0, shippingLength = data.shipping.services.length; i<shippingLength; i++)\n            {\n                var delivery = data.shipping.services[i].delivery != null ? data.shipping.services[i].delivery : \" - \";\n\n                var serviceDOM = \"<tr data-service='\" + data.shipping.services[i].method + \"'>\" +\n                    \"<td>\" + data.shipping.services[i].name + \"</td>\" +\n                    \"<td>\" + delivery  + \"</td>\" +\n                    \"<td>\" + \"$\" + data.shipping.services[i].price.toFixed(2) + \"</td>\" +\n                    \"<td>\" +\n                    \"<input \" +\n                    \"type='radio' \" +\n                    \"name='shipping' \" +\n                    \"class='shipping_method' \" +\n                    \"data-taxes='\" + self.actions.getShipmentTaxes(data.shipping.services[i].method, data) + \"' \" +\n                    \"data-cost='\" + data.shipping.services[i].price.toFixed(2) + \"' \" +\n                    \"data-value='\" + data.shipping.services[i].method + \"' \" +\n                    \"value='\" + btoa(JSON.stringify(data.shipping.services[i])) + \"' >\" +\n                    \"</td>\";\n\n                $(\"#shippingMethod-table-tbody\").append(serviceDOM);\n\n            }\n\n            // After all shipments are appended, remove the loading sign on the appropriate segment.\n            $(\".shippingMethod .segment\").removeClass(\"loading\");\n\n            // Select the default shipment method.\n            self.bootstrap.selectDefaultShipmentMethod();\n        },\n\n\n        /**\n         * Displays the various prices according to the chosen shipment method option.\n         *\n         * @param data\n         */\n        fetchPayment: function (data) {\n            var subtotal = UtilityContainer.getProductsPrice().toFixed(2),\n                priceTransport = $(\"input:radio.shipping_method:checked\").data(\"cost\"),\n                taxes = checkoutContainer.actions.getTaxes(data) + parseFloat($(\"input:radio.shipping_method:checked\").data(\"taxes\")),\n                total = parseFloat(subtotal) + parseFloat(priceTransport) + parseFloat(taxes);\n\n            $(\"#price_subtotal\").text(\"$\" + subtotal);\n            $(\"#price_transport\").text(\"$\" + priceTransport);\n            $(\"#price_taxes\").text(\"$\" + taxes.toFixed(2));\n            $(\"#price_total\").text(\"$\" + total.toFixed(2));\n\n            $(\".priceInformation .segment\").removeClass(\"loading\");\n        },\n\n\n        /**\n         * Sets the province/state/region dropdown state according to the country entered.\n         *\n         * @param fields\n         */\n        setInternationalFields: function (fields) {\n            fields.map(function(field) {\n                field.on(\"change\", function () {\n                    if($(this).val() != \"CA\") {\n\n                        // We assume the structure is not changing and stays like so:\n                        // Country list is a sibling of province state region, both of them wrapped\n                        // in a parent container.\n                        $(this).parent().next().addClass(\"disabled\");\n                        $(this).parent().next().find(\"select\").attr(\"disabled\", true);\n                    }\n                    else {\n                        $(this).parent().next().removeClass(\"disabled\");\n                        $(this).parent().next().find(\"select\").attr(\"disabled\", false);\n                    }\n                });\n            });\n        },\n\n\n        /**\n         * Update the payment panel with right values (shipment method)\n         *\n         * @param data\n         */\n        updatePayment : function(data) {\n            var subtotal = parseFloat(UtilityContainer.getProductsPrice()).toFixed(2),\n                priceTransport, taxes, total;\n\n            $(\".shipping_method\").on(\"change\", function() {\n                priceTransport = $(this).data(\"cost\");\n                taxes = checkoutContainer.actions.getTaxes(data) + parseFloat($(this).data(\"taxes\"));\n                total = parseFloat(subtotal) + parseFloat(priceTransport) + parseFloat(taxes);\n\n                $(\"#price_subtotal\").text(\"$\" + subtotal);\n                $(\"#price_transport\").text(\"$\" + priceTransport);\n                $(\"#price_taxes\").text(\"$\" + taxes.toFixed(2));\n                $(\"#price_total\").text(\"$\" + total.toFixed(2));\n            });\n        }\n    },\n\n    /**\n     * Responsible for the overall checkout behaviour.\n     *\n     */\n    actions: {\n        /**\n         * Create a localStorage object containing the id, verification code and\n         * redirection link of the order.\n         *\n         * @param data\n         */\n        createOrdersCookie: function(data) {\n            var paymentId = data.id,\n                paymentVerification = data.verification,\n                payment_url = data.payment_details.payment_url;\n\n            Cookies.set(\"_current_order\", JSON.stringify( {\n                id : paymentId,\n                verification : paymentVerification,\n                payment_url : payment_url\n            }));\n        },\n\n\n        /**\n         * Get the relevant taxes according to the chosen shipping method.\n         *\n         * @param serviceCode\n         * @param data\n         * @returns {string}\n         */\n        getShipmentTaxes : function(serviceCode, data) {\n            var taxes = 0;\n\n            for(var i=0; i<data.shipping.services.length; i++)\n            {\n                if(data.shipping.services[i].method == serviceCode)\n                {\n                    if (data.shipping.services[i].taxes.length != 0)\n                    {\n                        for(var j=0; j<data.shipping.services[i].taxes.length; j++)\n                        {\n                            taxes += data.shipping.services[i].taxes[j].amount;\n                        }\n                    }\n                }\n            }\n\n            return taxes.toFixed(2);\n        },\n\n\n        /**\n         * Get the total taxes (TPS/TVQ or TVH or TPS or null) + shipping method taxes.\n         *\n         * @param data\n         * @returns {number}\n         */\n        getTaxes : function(data) {\n            var taxes = 0,\n                dataTaxesLength = data.taxes.length;\n\n            if (dataTaxesLength != 0)\n            {\n                for(var i=0; i<dataTaxesLength; i++)\n                {\n                    taxes += data.taxes[i].amount;\n                }\n            }\n            return parseFloat(taxes);\n        },\n\n\n        /**\n         * Makes an ajax call to api/orders with the values from the form\n         *\n         * @param self\n         */\n        placeOrderAjaxCall: function() {\n            $.ajax({\n                method: \"POST\",\n                url: ApiEndpoints.placeOrder,\n                data: $(\"#cart_form\").serialize(),\n                cache: false,\n                success: function(data) {\n                    var self = checkoutContainer;\n\n                    self.actions.createOrdersCookie(data);\n\n                    //redirect the user to the checkout page if he backs from the payment page\n                    history.pushState({data: data}, \"Checkout \",\"/cart\");\n\n                    //Redirect to success url\n                    window.location.replace(data.payment_details.payment_url);\n                },\n                error: function(xhr, e) {\n                    console.log(xhr);\n                    console.log(e);\n                }\n            });\n        },\n\n\n        /**\n         * Makes an ajax call to api/estimate with the contact information.\n         *\n         * @param self\n         */\n        shipmentMethodsAjaxCall: function () {\n            $.ajax({\n                type: \"POST\",\n                url: ApiEndpoints.estimate,\n                data: {\n                    email: $(\"#customer_email\").val(),\n                    shipping: {},\n                    products: UtilityContainer.getAllProducts(),\n                    shipping_address: UtilityContainer.getShippingFromForm()\n                },\n                success: function(data) {\n                    checkoutContainer.view.fetchEstimate(data);\n                    checkoutContainer.view.fetchPayment(data);\n\n                    checkoutContainer.view.updatePayment(data);\n                    console.log(data);\n                },\n                error: function(e, status) {\n                    if (e.status == 403){\n                        // TODO: replace with an actual link\n                        window.location.replace(\"/auth/login\");\n                        return;\n                    }\n                    $('#estimate').html('<div class=\"alert alert-danger\">Une erreur est survenue. Veuillez vérifier les informations fournies.</div>');\n                }\n            });\n        }\n    },\n\n    /**\n     * Functions meant to be called for default behaviour.\n     *\n     */\n    bootstrap: {\n        /**\n         * Select the default shipment method from a predefined list.\n         *\n         */\n        selectDefaultShipmentMethod : function() {\n            var defaultShipment = [\"DOM.EP\", \"USA.TP\", \"INT.TP\"],\n                availableShipment = $(\"input[name=shipping]\");\n\n            for(var i= 0, length = availableShipment.length; i<length; i++)\n            {\n                if (defaultShipment.indexOf(availableShipment[i].dataset.value) != -1)\n                {\n                    availableShipment[i].checked = true;\n                }\n            }\n        }\n    },\n\n    /**\n     * Register outside calling methods.\n     *\n     */\n    init: function () {\n        var self = checkoutContainer;\n        self.validation.validateFormFields();\n        self.view.fadeInBillingInformation();\n        self.view.setInternationalFields([$(\"#shippingCountry\"), $(\"#billingCountry\")]);\n\n        // This is where it all begins...\n        // This automatically calls the form.onSuccess method upon validating all fields from the contact information\n        // segment.\n        $(\".shipment-trigger\").on(\"click\", function (e) {\n            if ($(\".billing-checkbox\").checkbox(\"is checked\")) {\n                self.view.autofillBillingInformation();\n            }\n\n            // We prevent default here, to avoid a double form submission.\n            e.preventDefault();\n        });\n    }\n\n}","/**\n * Component responsible for activating semantic ui features.\n *\n * @type {{module: {initDropdownModule: Function, initRatingModule: Function, initPopupModule: Function, initCheckboxModule: Function}, behaviors: {closeDimmer: Function}, init: Function}}\n */\nvar semanticInitContainer = {\n\n    /**\n     * Initialize modules\n     *\n     */\n    module: {\n        /**\n         * Initialize dropdown module.\n         *\n         */\n        initDropdownModule: function() {\n            $(\".ui.dropdown\").dropdown();\n\n            $(\".ui.dropdown\").on(\"click\", function () {\n                var action = $(this).data(\"action\") || \"activate\";\n\n                $(this).dropdown({\n                    action: action\n                });\n            });\n        },\n\n        /**\n         * Initialize rating module.\n         *\n         */\n        initRatingModule: function () {\n            $(\".ui.rating\").rating();\n        },\n\n        /**\n         * Initialize popup module.\n         *\n         */\n        initPopupModule: function () {\n            $(\".popup\").popup();\n        },\n\n        /**\n         * Initialize checkbox module.\n         *\n         */\n        initCheckboxModule: function () {\n            $('.ui.checkbox')\n                .checkbox()\n            ;\n        },\n\n        /**\n         * Initialize accordion module.\n         *\n         */\n        initAccordionModule: function() {\n            $('.ui.accordion').accordion();\n        }\n    },\n\n    /**\n     * Specify semantic custom behavior.\n     *\n     */\n    behaviors: {\n        closeDimmer: function () {\n            $(\".close-dimmer\").on(\"click\", function() {\n                $(\".dimmer\").dimmer(\"hide\");\n            });\n        }\n    },\n\n    /**\n     * Specify custom form validation rules.\n     *\n     */\n    rules: {\n        postalCode: function() {\n            $.fn.form.settings.rules.postalCode = function(value, fieldIdentifier) {\n                if(document.getElementById('checkboxSuccess').checked && fieldIdentifier == \"billingCountry\") {\n                    return true;\n                } else {\n                    if ($(\"#\" + fieldIdentifier).val() === \"CA\")\n                        return value.match(/^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} ?\\d{1}[A-Z]{1}\\d{1}$/i) ? true : false;\n                    else if ($(\"#\" + fieldIdentifier).val() === \"US\")\n                        return value.match(/^\\d{5}(?:[-\\s]\\d{4})?$/) ? true : false;\n                    else {\n                        return true;\n                    }\n                }\n            }\n        }\n    },\n\n\n    init: function () {\n        var self = semanticInitContainer,\n            module = self.module,\n            behaviors = self.behaviors,\n            rules = self.rules;\n\n        module.initDropdownModule();\n        module.initRatingModule();\n        module.initPopupModule();\n        module.initCheckboxModule();\n        module.initAccordionModule();\n\n        behaviors.closeDimmer();\n\n        rules.postalCode();\n    }\n}","/**\n * Component responsible for the view component of each category page.\n *\n * @type {{searchParameters: {page: number, per_page: number, order: string, min_price: null, max_price: null, brands: Array, categories: Array}, blurBackground: Function, itemsPerPage: Function, sortBy: Function, price: Function, categories: Function, brands: Function, updateFilterList: Function, addTag: Function, tags: Function, addFilter: Function, removeFilter: Function, updateFilters: Function, toggleLayout: Function, localizeSwitcher: Function, retrieveSearchParameters: Function, toggleTagsList: Function, localizeDimmer: Function, addDimmer: Function, init: Function}}\n */\nvar categoryContainer = {\n\n    /**\n     * Contains the updated URL parameters,\n     *\n     */\n    searchParameters: {\n        page: 1,\n        per_page: 8,\n        order: 'relevance',\n        min_price: null,\n        max_price: null,\n        brands: [],\n        categories: []\n    },\n\n    /**\n     * Blurs the background of each category's page header.\n     *\n     */\n    blurBackground: function () {\n        $(\".category-header\").blurjs({\n            source: \".category-header\"\n        });\n    },\n\n\n    /**\n     * Sets a number of items per page and set the value to the appropriate input.\n     *\n     */\n    itemsPerPage: function () {\n        $(\".items-per-page .item\").on(\"click\", function() {\n            categoryContainer.addDimmer();\n            UtilityContainer.urlAddParameters(\"per_page\", $(this).data(\"sort\"));\n        });\n\n        // Set the selected option.\n        $('#items-per-page-box').dropdown('set selected', this.searchParameters.per_page);\n    },\n\n\n    /**\n     * Sets the sort by filter and set the value to the appropriate input.\n     *\n     */\n    sortBy: function () {\n        $(\".sort-by .item\").on(\"click\", function() {\n            categoryContainer.addDimmer();\n            UtilityContainer.urlAddParameters(\"order\", $(this).data(\"sort\"));\n        });\n\n        // Find the text for the selected option.\n        $(\".sort-by .item\").each(function(index, element) {\n            if ($(element).data('sort') == categoryContainer.searchParameters.order) {\n                $(\"#sort-by-box\").dropdown(\"set selected\", $(element).data('sort'));\n                return false;\n            }\n        });\n    },\n\n    /**\n     * Adds the price filter to the search query and updates the filter on the page.\n     *\n     */\n    price: function() {\n\n        $(\"#price-update\").on(\"click\", function()\n        {\n            categoryContainer.addDimmer();\n\n            UtilityContainer.urlAddParameters({\n                min_price : $(\"#min-price\").val(),\n                max_price : $(\"#max-price\").val()\n            });\n        });\n\n        // Set the specified price range.\n        if (this.searchParameters.min_price) {\n            $('#min-price').val(this.searchParameters.min_price);\n        }\n\n        if (this.searchParameters.max_price) {\n            $('#max-price').val(this.searchParameters.max_price);\n        }\n    },\n\n    /**\n     * Adds the category filter to the search query and updates the filter on the page.\n     *\n     */\n    categories: function() {\n        this.updateFilterList($(\"#refine-by-category\"), \"categories\");\n    },\n\n    /**\n     * Adds the brands filter to the search query and updates the filter on the page.\n     *\n     */\n    brands: function() {\n        this.updateFilterList($(\"#refine-by-brand\"), \"brands\");\n    },\n\n    /**\n     * Shortcut to handle filter lists such as brands and categories.\n     *\n     * @param element\n     * @param filterType\n     */\n    updateFilterList : function(element, filterType)\n    {\n        // Add the event listeners to each child element.\n        element.find(\".item\").on(\"change\",\n            {\n                filter : filterType || \"brands\"\n            },\n\n            function(event)\n            {\n                event.stopPropagation();\n\n                var id = $(this).data(\"filter\"),\n                    filterList = categoryContainer.searchParameters[event.data.filter],\n                    filter = $(this);\n\n                // If the checkbox is checked, add the filter to the list.\n                if (filter.prop(\"checked\")) {\n                    categoryContainer.addFilter(event.data.filter, id);\n                }\n\n                // If not, then remove it from the list.\n                else {\n                    categoryContainer.removeFilter(event.data.filter, id);\n                }\n            }\n        );\n\n        // Update selected checkboxes. IDs are stored as strings in \"categoryContainer.searchParameters\".\n        element.find(\".item\").each(function() {\n\n            $(this).prop(\"checked\", categoryContainer.searchParameters[filterType].indexOf(\"\"+ $(this).data(\"filter\")) > -1);\n\n            // And add the filter as a tag.\n            if ($(this).prop(\"checked\")) {\n                categoryContainer.addTag($(this));\n            }\n        });\n    },\n\n    /**\n     * Create a new tag to be appended to the tags list.\n     *\n     * @param filter (filter being the checkbox DOM node)\n     */\n    addTag: function (filter) {\n        var item =\n            '<div class=\"item\">' +\n            '<a class=\"ui grey tag label\">' + filter.data(\"name\") +\n            '<i class=\"icon remove right floated\" data-id=\"' + filter.data(\"filter\") + '\" data-type=\"' + filter.data('type') + '\"></i>' +\n            '</a>' +\n            '</div>';\n\n        $(\".tags-list\").append(item);\n    },\n\n    /**\n     * Attaches the remove event to the tags.\n     *\n     */\n    tags: function() {\n        $(\".tags-list .item .remove\").on(\"click\", function() {\n            categoryContainer.removeFilter($(this).data('type'), $(this).data('id'));\n        });\n    },\n\n    /**\n     * Adds a filter and refreshes the page.\n     *\n     * @param filterType    Either \"brands\" or \"categories\".\n     * @param id            ID of brand or category.\n     */\n    addFilter: function(filterType, id) {\n        this.searchParameters[filterType].push(id);\n        this.updateFilters(filterType);\n    },\n\n    /**\n     * Removes a filter and refreshes the page.\n     *\n     * @param filterType    Either \"brands\" or \"categories\".\n     * @param id            ID of brand or category.\n     */\n    removeFilter: function(filterType, id) {\n\n        // Retrieve filter list.\n        var filterList = this.searchParameters[filterType], newList = [];\n\n        // Rebuild a new list, without the filter we want removed.\n        if (filterList.length > 1) {\n            for (var index in filterList) {\n                if (filterList[index] != id) {\n                    newList.push(filterList[index]);\n                }\n            }\n        }\n\n        this.searchParameters[filterType] = newList;\n        this.updateFilters(filterType);\n    },\n\n    updateFilters: function(filterType) {\n\n        // Reorder filter list (this will help with caching on Laravel's end).\n        var filterList = this.searchParameters[filterType];\n        filterList.sort(function(a, b) {\n            return a - b;\n        });\n\n        // If we have filters, update the query string and refresh the page.\n        if (filterList.length > 0) {\n            var filter = filterList.length > 1 ? filterList.join(';') : filterList[0];\n            categoryContainer.addDimmer();\n            UtilityContainer.urlAddParameters(filterType, filter);\n        }\n\n        // If we don't have any filters left, refresh the page without the filter parameter.\n        else {\n            UtilityContainer.urlRemoveParameters(filterType);\n        }\n    },\n\n    /**\n     * Retrieves the query parameters from the URL and stores them locally.\n     *\n     */\n    retrieveSearchParameters: function() {\n\n        var query = UtilityContainer.urlGetParameters();\n\n        for (var key in query)\n        {\n            this.searchParameters[key] = query[key];\n\n            // For brands and categories, the value should be an array.\n            if ([\"brands\", \"categories\"].indexOf(key) > -1 && typeof query[key] != 'object') {\n                this.searchParameters[key] = [query[key]];\n            }\n        }\n    },\n\n    toggleTagsList: function () {\n        $(\".tags-list\").children().size() > 0 ? $(\".tags-list\").parent().removeClass(\"hidden\") : \"\";\n    },\n\n    /**\n     * Localize the dimmer text with the appropriate message.\n     *\n     */\n    localizeDimmer: function () {\n        $(\".loading-text\").text(Localization.loading);\n    },\n\n    /**\n     * Add a dimmer to the body when adding / removing a new filter.\n     *\n     */\n    addDimmer: function () {\n        var dimmer =\n            '<div class=\"ui page dimmer loading-dimmer\">' +\n            '<div class=\"content\">' +\n            '<div class=\"center\">' +\n            '<div class=\"ui text loader\">' +\n            '<h1 class=\"ui header loading-text white\"></h1></div>' +\n            '</div>' +\n            '</div>';\n\n        $(\"body\").append(dimmer);\n\n        categoryContainer.localizeDimmer();\n\n        $('.ui.dimmer.loading-dimmer')\n            .dimmer('show')\n        ;\n    },\n\n    init: function () {\n        var self = categoryContainer;\n\n        self.retrieveSearchParameters();\n        //self.blurBackground();\n        self.itemsPerPage();\n        self.sortBy();\n        self.price();\n        self.categories();\n        self.brands();\n        self.tags();\n    }\n};","/**\n * Component responsible for handling the logic of the wish list page.\n * Layout handled in dev/components/site/wishlist.js\n *\n * @type {{createWishlistElement: Function, renderWishlist: Function, localizeWishlistButton: Function, removeWishlistElement: Function, init: Function}}\n */\nvar wishlistLogicContainer = {\n\n    /**\n     * Create a list layout element from the information passed as an argument.\n     *\n     * Rounding to 2 decimals, courtesy of http://stackoverflow.com/a/6134070.\n     *\n     * @param item\n     */\n    createWishlistElement: function(item) {\n        var self = wishlistLogicContainer,\n            element =\n        '<div class=\"item list-layout-element\">' +\n        '<div class=\"ui tiny image\">' +\n        '<img src=' + item.thumbnail_lg + '>' +\n        '</div>' +\n        '<div class=\"middle aligned content\">' +\n        '<div class=\"header\">' +\n        '<a href=' + item.link + '>' + item.name + '</a>' +\n        '</div>' +\n        '<div class=\"description\">' +\n        '<p>' + item.description + '</p>' +\n            '<h5> $ ' + parseFloat(Math.round(item.price * 100) / 100).toFixed(2) + '</h5>'+\n        '</div>' +\n        '<div class=\"extra\">' +\n        '<button class=\"ui right floated button green buybutton\"' +\n        'data-product=\"' + item.product + '\"' +\n        'data-price=\"' + item.price + '\"' +\n        'data-thumbnail=\"' + item.thumbnail + '\"' +\n        'data-thumbnail_lg=\"' + item.thumbnail_lg + '\"' +\n        'data-name=\"' + item.name + '\"' +\n        'data-description=\"' + item.description + '\"' +\n        'data-quantity=\"' + item.quantity  + '\"' + \">\" +\n        'Add to cart </button>' +\n        '</button>' +\n        '<button class=\"ui right floated button inverted red removeFavoriteButton\" data-product=\"' + item.product + '\">' +\n        'Remove from wishlist' +\n        '</button>' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '<hr/>';\n\n\n        //Localize button (default in english)\n        self.localizeWishlistButton();\n\n        //Append elements\n        $(\".list-layout-element-container\").append(element);\n    },\n\n    /**\n     * Populate the wishlist page with elements created on the fly from localStorage that has their key starting with \"_wish_prod {id}\".\n     * The creation is handled in createWishlistElement function.\n     *\n     */\n    renderWishlist: function() {\n        var self = wishlistLogicContainer;\n\n        for(var i = 0, length = localStorage.length; i<length; i++)\n        {\n            if (localStorage.key(i).lastIndexOf(\"_wish_product\", 0) === 0)\n            {\n                self.createWishlistElement(JSON.parse(localStorage.getItem(localStorage.key(i))));\n            }\n        }\n    },\n\n    localizeWishlistButton: function() {\n        $(\".list-layout-element .buybutton\").text(Localization.add_cart);\n        $(\".list-layout-element .removeFavoriteButton\").text(Localization.wishlist_remove);\n    },\n\n    /**\n     * Remove the element from the wishlist after a subtle animation.\n     *\n     */\n    removeWishlistElement: function () {\n        $(\".list-layout-element-container\").on(\"click\", \".removeFavoriteButton\", function() {\n            //Animate the element.\n            UtilityContainer.addFadeOutUpClass($(this).closest(\".list-layout-element\"));\n            UtilityContainer.addFadeOutUpClass($(this).closest(\".list-layout-element\").next());\n\n            //Delete the element from localStorage.\n            localStorage.removeItem(\"_wish_product \" + $(this).data(\"product\"));\n\n            //Set wishlist header quantity.\n            wishlistContainer.setNumberOfProductsInHeader();\n\n            //Set wishlist badge\n            productLayoutFavoriteContainer.setWishlistBadgeQuantity();\n        });\n    },\n\n    init: function () {\n        var self = wishlistLogicContainer;\n\n        //Calls the layout container (wishlistContainer).\n        wishlistContainer.init();\n\n        //Initialize the logic.\n        self.renderWishlist();\n        self.removeWishlistElement();\n    }\n\n}","/**\n * Component responsible for the view component of the wish list page.\n * Logic handled in dev/actions/site/wishlist-logic.js\n *\n * @type {{setNumberOfProductsInHeader: Function, init: Function}}\n */\nvar wishlistContainer = {\n\n    /**\n     * Sets the number of products in the header (singular / plural).\n     *\n     */\n    setNumberOfProductsInHeader: function() {\n        var quantity = \"\";\n        UtilityContainer.getNumberOfProductsInWishlist() == 0 || UtilityContainer.getNumberOfProductsInWishlist() == 1 ? quantity+= (UtilityContainer.getNumberOfProductsInWishlist() + \"  item \") : quantity += (UtilityContainer.getNumberOfProductsInWishlist() + \"  items \");\n        $(\"#quantity-wishlist\").text(quantity);\n    },\n\n\n    init: function() {\n        var self = wishlistContainer;\n\n        self.setNumberOfProductsInHeader();\n    }\n}","/**\n * Entry point of script.\n *\n */\n; (function(window, document, $) {\n\n    // Temporary for now, until we find a better file structure...\n    Vue.config.debug = true;\n\n\n    $(document).ready(function () {\n\n        /**\n         * Sets up Vue.js module on the Duka container.\n         *\n         */\n        new Vue({\n            el: \".duka-container\"\n        });\n\n        /**\n         * Sets up the ajax token for all ajax requests.\n         *\n         */\n        $.ajaxSetup({\n            headers: {\n                'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\n                'locale': $('html').attr('lang')\n            }\n        });\n\n        /**\n         * Sets up Localization and ApiEndpoints variables.\n         *\n         */\n        var env = UtilityContainer.getLocalizationAndEndpointUrl().responseJSON;\n        Localization = env.Localization;\n        ApiEndpoints = env.ApiEndpoints;\n\n\n        /**\n         * Initialize semantic UI modules.\n         *\n         */\n        semanticInitContainer.init();\n\n        /**\n         * Initialize checkout logic.\n         *\n         */\n        checkoutContainer.init();\n\n        /**\n         * Initialize cart slider logic.\n         *\n         */\n        cartSliderContainer.init();\n\n        /**\n         * Initialize category container.\n         *\n         */\n        categoryContainer.init();\n\n        /**\n         * Initialize overlay plugin.\n         *\n         */\n        paymentOverlayContainer.init();\n\n        /**\n         * Initialize favorite products feature.\n         *\n         */\n        productLayoutFavoriteContainer.init();\n\n        /**\n         * Initialize product formats feature.\n         *\n         */\n        productFormatContainer.init();\n\n        /**\n         * Initialize product quantity change.\n         *\n         */\n        productQuantityContainer.init();\n\n        /**\n         * Initialize wishlist page.\n         *\n         */\n        wishlistLogicContainer.init();\n\n    });\n\n})(window, window.document, jQuery, undefined)\n"],"sourceRoot":"/source/"}